<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows on Wsine&#39;s blog</title>
    <link>https://blog.wsine.top/tags/windows/</link>
    <description>Recent content in Windows on Wsine&#39;s blog</description>
    <image>
      <url>https://blog.wsine.top/author.jpg</url>
      <link>https://blog.wsine.top/author.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright &amp;copy; 2019-Now &amp;middot; CC [BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
    <lastBuildDate>Tue, 02 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.wsine.top/tags/windows/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Windows平台下的少数派新写稿流程</title>
      <link>https://blog.wsine.top/posts/writting-for-sspai-on-windows/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/writting-for-sspai-on-windows/</guid>
      <description>&lt;p&gt;谈及写作，不少的用户都是使用 Mac 平台配合多样的 App 完成从写稿到发布的一条龙服务。但是在 Windows 平台上，往往需要很多手动的过程。比如，在少数派平台上，官方提供了专用的接口给 MWeb App 完成从写稿、插图、发布的完善服务，但是 MWeb App 仅在 Mac 平台上提供，Windows 用户常常因为插图图床问题困扰。&lt;/p&gt;
&lt;p&gt;最近，随着两大写作好伴侣 App 的更新，这一情况得以改善。PicGo 迎来了 v2.0 版本的大更新，剥离了核心功能同时支持 CLI 调用和 API 调用。Typora 集成了 PicGo 并提供一键上传图片服务。如果需要更详细的资料，请看这两篇文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sspai.com/post/52527&#34;&gt;图床「神器」PicGo v2.0更新，插件系统终于来了&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sspai.com/post/59128&#34;&gt;Typora 支持自定义图片上传服务了&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;配合上述两大神器，是否有方法能够改善少数派平台上的写作流程，下面我就来谈谈我的方案。&lt;/p&gt;
&lt;h2 id=&#34;typora-之功能增强&#34;&gt;Typora 之功能增强&lt;/h2&gt;
&lt;p&gt;首先，从 Typora 官网上能够下载 Win / Linux / OSX 对应平台的安装文件并正确安装。&lt;/p&gt;
&lt;p&gt;然后，我们需要启用图片上传功能。点击 File -&amp;gt; Preferences -&amp;gt; Image，在 Image Upload Setting 那栏，选择 PicGo-Core (command line) ，然后点击 Download and Upgrade，即可完成安装。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/628cb7601505f1aaf9d736a4f59f68a6.png&#34; alt=&#34;enhance&#34;  /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;picgo-之少数派插件&#34;&gt;PicGo 之少数派插件&lt;/h2&gt;
&lt;p&gt;得益于 PicGo 的插件系统，我们可以为少数派平台编写插件，快捷完成图片上传到少数派的服务器。那么，如何安装少数派插件？&lt;/p&gt;
&lt;p&gt;步骤一&lt;/p&gt;
&lt;p&gt;首先我们打开 PicGo 配置文件所在的目录，你可以点击上图的 Open Config File 按钮，或者手动打开对应平台的文件夹。&lt;/p&gt;
&lt;p&gt;Windows 平台位于&lt;code&gt;C:\Users\&amp;lt;your username&amp;gt;\.picgo\&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Linux 和 OSX 平台位于`~/.picgo/``&lt;/p&gt;
&lt;p&gt;然后，克隆或下载&lt;a href=&#34;https://github.com/Wsine/picgo-plugin-sspai&#34;&gt;github.com/Wsine/picgo-plugin-sspai&lt;/a&gt;仓库到该文件夹中，注意如果从网页端下载，解压后去除多余的分支名，这很重要。&lt;/p&gt;
&lt;p&gt;步骤二&lt;/p&gt;
&lt;p&gt;在 PicGo 配置文件夹下创建&lt;code&gt;node_modules&lt;/code&gt;文件夹，并在里面创建同名快捷方式/软链接，指向刚才下载的仓库文件夹。&lt;/p&gt;
&lt;p&gt;步骤三&lt;/p&gt;
&lt;p&gt;编辑`package.json``文件，修改里面的依赖项。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;picgo-plugin-sspai&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file:picgo-plugin-sspai&amp;#34;&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;步骤四&lt;/p&gt;
&lt;p&gt;创建`package-lock.json``，内容填充如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;picgo-plugins&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;requires&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;lockfileVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;picgo-plugin-sspai&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file:picgo-plugin-sspai&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;验证&lt;/p&gt;
&lt;p&gt;最终配置文件夹中的目录结构如应如下图所示&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;~/.picgo &amp;gt; tree
.
├── config.json
├── node_modules
│   └── picgo-plugin-sspai &amp;lt;soft link&amp;gt;
├── package.json
├── package-lock.json
├── picgo.log
└── picgo-plugin-sspai
    ├── index.js
    ├── License
    ├── md5.min.js
    ├── package.json
    └── README.md
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;配置个人信息&#34;&gt;配置个人信息&lt;/h2&gt;
&lt;p&gt;打开少数派官网，登陆自己的账号，然后按F12打开开发者模式，找到 Console 选项卡，输入&lt;/p&gt;
&lt;p&gt;`document.cookie.split(&#39;; sspai_cross_token=&#39;).pop().split(&#39;;&#39;).shift()``&lt;/p&gt;
&lt;p&gt;该命令会返回一串字符串，记住该字符串，并重新在 Typora 中打开 PicGo 的配置文件，替换下面样例的 token 占位符，保存&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;picBed&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;current&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sspai&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;uploader&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sspai&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;transformer&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;base64&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;sspai&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;cross_token&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;replace here&amp;gt;&amp;#34;&lt;/span&gt;
    }
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;picgoPlugins&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;picgo-plugin-sspai&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;好了，至此为止，你已完成了全部的配置，那么来看看效果如何吧。&lt;/p&gt;
&lt;h2 id=&#34;样例效果&#34;&gt;样例效果&lt;/h2&gt;
&lt;p&gt;我们就以本文作为目标图片展示一下该写作流程的优化吧，通过菜单栏的 Format -&amp;gt; Image -&amp;gt; Upload All Local Images 能够一键上传该文章下面的全部图片，也可以通过右击图片的方式单张图片上传&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/4472f6471191c61072d1e54de3f941d9.gif&#34; alt=&#34;example&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;最后，打开少数派网站的编辑器，复制全文富文本格式进去，即可完成发布流程。&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;该插件的开发仅仅是为了方便用户在少数派平台上写作而创作。图床，一直是流量消耗的大户，目前少数派的图床仅能在 sspai.com 域名下显示，也即启用的防盗链技术，如有别的用途的用户就不用折腾啦。&lt;/p&gt;
&lt;p&gt;等后续的 Typora 更新了发布功能，我会再来优化该流程。那么，希望这个插件能帮得到大家。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Microsoft Terminal 颜值在线的终端模拟器</title>
      <link>https://blog.wsine.top/posts/beautiful-microsoft-terminal/</link>
      <pubDate>Mon, 09 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/beautiful-microsoft-terminal/</guid>
      <description>&lt;p&gt;在 Microsoft Build 2019 的大会上，微软给我们带来了一款全新设计的终端模拟器 Microsoft Terminal. 虽然过度好看的宣传片和实际的效果有着巨大的落差，但是也不影响它在 Windows 阵营里取得最高的颜值称号。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/1746B559BC9685F1E4D9BFFF9F5F9EAC.png&#34; alt=&#34;terminal&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;从 Preview v0.2 版本开始我就试用了这款工具，到今天的 Preview v0.6 版本最后关键的问题修复后我才想说来跟大家分享一下这个工具。&lt;/p&gt;
&lt;h2 id=&#34;安装-terminal&#34;&gt;安装 Terminal&lt;/h2&gt;
&lt;p&gt;Microsoft Terminal （下称 Terminal） 明确要求了系统版本至少需要 “Windows 10 version 18362” 或以上才能使用。&lt;/p&gt;
&lt;p&gt;而现在的安装方法也很简单，从 Microsoft Store 里面搜索 “Microsoft Terminal” 就可以直接安装和卸载了。&lt;/p&gt;
&lt;p&gt;但是到目前为止，Terminal 还是处于一个 Preview 的阶段，功能上来说不会囊括所有的用户的期望，如果想要有自己期望的功能，可以在官方的开源仓库的 &lt;a href=&#34;https://github.com/microsoft/terminal/issues&#34;&gt;Github issue&lt;/a&gt; 上发 Feature Request 哟~&lt;/p&gt;
&lt;h2 id=&#34;全新配置管理方式&#34;&gt;全新配置管理方式&lt;/h2&gt;
&lt;p&gt;Terminal 采用了 JSON 文件作为它的配置文件，这就意味着你可以将整个配置文件备份，然后在别的地方下载下来快速使用，十分的方便。&lt;/p&gt;
&lt;p&gt;实际使我眼前一亮的点是，当我用 Sublime 修改该配置文件保存的时候，已经打开了的 Terminal 的样式能实时发生改变，这大大提高了用户调整配置的便捷程度，而很多工具要做到这点都是将设置界面做成软件的一部分才能实现的，这点给 Terminal 大大的加分。&lt;/p&gt;
&lt;p&gt;由于是 JSON 纯文本配置文件，总是有可能出现手抖或者配置出错的问题，这时候保存配置文件会被提示文件哪里的配置有问题，而该次的保存不会生效，实际调试样式还是十分方便的。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/52104FB432B5BCF495FA7E7C056DBA6C.gif&#34; alt=&#34;vim&#34;  /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;less-is-more-的配置项&#34;&gt;Less is More 的配置项&lt;/h2&gt;
&lt;p&gt;Terminal 提供的配置项不多，但我觉得 98% 的人也只需要修改到这些配置项就足够了，下面来跟大家陈列一下它提供的配置项吧（我只挑重点的来展示）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;defaultProfile：默认启动的方案，可以为 CMD，PowerShell，Azure 等&lt;/li&gt;
&lt;li&gt;keybindings：快捷键映射&lt;/li&gt;
&lt;li&gt;acrylic：透明度&lt;/li&gt;
&lt;li&gt;background：背景颜色或者背景图片 &lt;del&gt;动漫女神&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;colorScheme：配色方案，可以自定义配色&lt;/li&gt;
&lt;li&gt;commandline：默认启动的程序，一般为 cmd.exe 等&lt;/li&gt;
&lt;li&gt;cursorColor：光标颜色&lt;/li&gt;
&lt;li&gt;cursorShape：光标形状&lt;/li&gt;
&lt;li&gt;fontFace：字体方案&lt;/li&gt;
&lt;li&gt;fontSize：字体大小&lt;/li&gt;
&lt;li&gt;icon：该方案的代表图标&lt;/li&gt;
&lt;li&gt;name：该方案的名称&lt;/li&gt;
&lt;li&gt;padding：外边距&lt;/li&gt;
&lt;li&gt;historySize：保留的历史输出大小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般情况下，当你调整好了显示的字体和大小，调整背景和透明度，还有配色方案，基本上就把一个终端模拟器的外观给定义好了。&lt;/p&gt;
&lt;p&gt;由于是 JSON 配置文件，文件里面也不能像以前的方式一样给出选项，微软将一份配置文件说明放在了仓库中 =&amp;gt; &lt;a href=&#34;https://github.com/microsoft/terminal/blob/master/doc/cascadia/SettingsSchema.md&#34;&gt;Settings Schema&lt;/a&gt; . 但是却没有在配置文件里面提供链接，我觉得这点还是需要改进的。&lt;/p&gt;
&lt;h2 id=&#34;功能的最后一块拼图&#34;&gt;功能的最后一块拼图&lt;/h2&gt;
&lt;p&gt;谈及终端模拟器，一般情况下我会从一些特定的功能去考察它是否功能完备，以及它的加分点有哪些&lt;/p&gt;
&lt;h3 id=&#34;gpu加速&#34;&gt;GPU加速&lt;/h3&gt;
&lt;p&gt;这个就属于新时代的终端模拟器的代表功能了，之前在 Manjaro 下面使用 Alacritty 终端模拟器时才体会到在GPU加速的这一功能。在大量的文本打印的时候，得益于GPU的加速，丝毫没有那种播放PPT的卡顿感，这个对于长时间在终端下工作的我来说还是十分舒服的。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/CC87571D29A2461C0502CF5A3C9268A9.gif&#34; alt=&#34;vim&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;多标签&#34;&gt;多标签&lt;/h3&gt;
&lt;p&gt;诚然，很多的终端模拟器都自带了多标签，比如 xshell，mobaxterm 和 cmder 等。前两者在工作用途上是收费的，后者总是占用了太多的 Linux 快捷键。之前我不得不使用 CMD 代替它们（发现意外的好用），现在 Terminal 来将 CMD 缺失的多标签功能给补齐了。&lt;/p&gt;
&lt;h3 id=&#34;emoji支持&#34;&gt;Emoji支持&lt;/h3&gt;
&lt;p&gt;虽然微软平台的Emoji真的很丑，但是有总比没有好不是嘛，我还是很喜欢在Git commit里面加点emoji让它好看一点的。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/E56D8ABFB6EA3F8AF3782EC3B0DBFF0B.png&#34; alt=&#34;vim&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;ncurses的支持&#34;&gt;NCURSES的支持&lt;/h3&gt;
&lt;p&gt;对于重度使用终端的人来说，基本上离不开两个重要的工具，文本编辑器（Vim / Emacs）和终端复用器（Tmux / Screen）。而它们的底层，其实都是由 ncurses 来提供支持的。这个库可以让你的终端除了不断打印出新的东西，还能后退擦除一些东西，从而造成屏幕不断刷新的效果。&lt;/p&gt;
&lt;p&gt;通过我两周以来的实际体验，在我的日常使用中完全没有问题，因此才会想推荐给大家。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/63A4C2739333EFDD11711E7F9D791BA8.png&#34; alt=&#34;vim&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/C85D32FC99D632208A9B029AAD6E2FB3.png&#34; alt=&#34;tmux&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;复制与粘贴&#34;&gt;复制与粘贴&lt;/h3&gt;
&lt;p&gt;这个就是我指的最后的一块拼图。在 v0.6 版本之前，Terminal 的复制粘贴功能一直有很大的问题。在 Github issue 中搜索 “copy / paste” 等关键字就可以知道。开发团队为了兼容微软长期以来的 Ctrl + C 的复制快捷键做了大量的工作。&lt;/p&gt;
&lt;p&gt;v0.6 版本以前，复制多段文字的时候，在别的地方粘贴总是会出现超长的一行，比如&lt;code&gt;a\nb&lt;/code&gt;可能会被粘贴成&lt;code&gt;a \space*555 b&lt;/code&gt;的情况，十分影响正常的工作，可惜我已经展示不了了。之前总是需要借助 tmux + http 才能绕过这个问题。现在这个恼人的问题终于被修复了，也就是说可以被大家广泛使用了。&lt;/p&gt;
&lt;h3 id=&#34;基础的功能&#34;&gt;基础的功能&lt;/h3&gt;
&lt;p&gt;Terminal 本身还支持 xterm-256 color ，UTF-8 和 unicode 编码，这些我认为都是必要的功能，这里就不细说了。&lt;/p&gt;
&lt;h2 id=&#34;我的使用分享&#34;&gt;我的使用分享&lt;/h2&gt;
&lt;p&gt;我最近使用的是微软为开发者打造的一款字体 Cascadia，开源仓库在这里 =&amp;gt; &lt;a href=&#34;https://github.com/microsoft/cascadia-code/releases&#34;&gt;Cascadia Code&lt;/a&gt; . 我很喜欢它，得益于对 unicode 编码的支持，在GPU加速的情况下，它总能给我很多很好看的小惊喜，比如&lt;code&gt;=&amp;gt;&lt;/code&gt;会被渲染成一个完整的箭头，并且跟随进度条移动。更多的就等你们使用发掘啦。&lt;/p&gt;
&lt;p&gt;我用的是里面默认的 &amp;ldquo;One Half Dark&amp;rdquo; 配色，我觉得很好看，搭配 70% 的透明度和 5 pixel 的外边距，整体效果很不错。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/8480A1CD36C62A350D33E5F09904EDAC.png&#34; alt=&#34;configuration&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;最后放上我的配置图，剩下的就大家去尝试一下吧~&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chrome在Windows找回熟悉的Alt &#43; Num切换标签页</title>
      <link>https://blog.wsine.top/posts/alt-num-switch-tab-in-chrome-on-windows/</link>
      <pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/alt-num-switch-tab-in-chrome-on-windows/</guid>
      <description>&lt;p&gt;在不同的系统和软件中，我都喜欢尽可能用同一套快捷键方案去完成相同的功能，以减少自己的学习和记忆成本，最大化效率。但是，哪怕是同一个应用，由于不同平台的默认快捷键不一样，频繁切换平台的迁移学习也很辛苦。&lt;/p&gt;
&lt;p&gt;比如 Chrome 浏览器中，切换标签页的方式在不同的平台上不一样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows：Ctrl + Num&lt;/li&gt;
&lt;li&gt;Linux：Alt + Num&lt;/li&gt;
&lt;li&gt;Mac：Cmd + Num&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后两者由于键位所处的位置大致相同，所以哪怕没有记忆也不会造成多大的割裂感。但是，Windows 下面的这套快捷键实在是太难受了，本文就是教你如何找回熟悉的感觉。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/FF5B74693EE093B3A0810E93810F336D.png&#34; alt=&#34;FF5B74693EE093B3A0810E93810F336D&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;这里我们需要借助的软件是 Vimium，相信已经有不少文章介绍过它了。在这里我们需要用到它 Custom key mappings 的功能。Vimium 本身提供很多优秀的内建功能。而我们这里需要用到的是 &lt;code&gt;firstTab&lt;/code&gt; 的功能。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/72B87484BA371209846EF02C6B381FE9.png&#34; alt=&#34;72B87484BA371209846EF02C6B381FE9&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;你可能会觉得这个功能并不足够完成 &lt;code&gt;Alt + 2&lt;/code&gt;或 &lt;code&gt;Alt + 3&lt;/code&gt; 等映射，其实不然，仔细阅读它的开源代码你会发现它本身还提供 option 的功能，简单点来说配置方案是酱紫的。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/939C6CA558E0E7230390D3763ED98731.png&#34; alt=&#34;939C6CA558E0E7230390D3763ED98731&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;这里我把映射也一并附上。我个人只习惯用前面几个固定的标签页，你可以根据自己习惯增减。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;map &amp;lt;a-1&amp;gt; firstTab
map &amp;lt;a-2&amp;gt; firstTab count=2
map &amp;lt;a-3&amp;gt; firstTab count=3
map &amp;lt;a-4&amp;gt; firstTab count=4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有了这套方案，我可以很容易的快速回到长期放在第一个标签的 Gmail 页面或者从 Jupyter Notebook 的编程页面中跳出去快速搜索一些东西，而不用借助鼠标，从而提高效率。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
