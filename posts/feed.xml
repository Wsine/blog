<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Wsine's blog</title><link>https://blog.wsine.top/posts/</link><description>Recent content in Posts on Wsine's blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 15 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.wsine.top/posts/feed.xml" rel="self" type="application/rss+xml"/><item><title>使用 Github Action 编译 Android 项目</title><link>https://blog.wsine.top/posts/use-github-action-to-compile-android-project/</link><pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.wsine.top/posts/use-github-action-to-compile-android-project/</guid><description>[TOC]
和 Android 系统一样，很多 Android 应用也会选择将源码进行开放，一方面供开源社区对代码进行审查保证安全性，另一方面也能「集思广益」，经其它开发者之手发展、演变出更多有意思的代码分支和功能。
更重要的是，因为源码人人可获取，当这些应用的商店版本（如 Play 商店）因为各种原因更新缓慢，或原始分支不再维护时，我们也可以直接绕过商店、借助源码编译「原汁原味」的最新版本。
本文就为大家介绍一种相对简单、能够自给自足的 Android 应用编译方法。
编译 Android 项目所需工具 要想编译 Android 项目，首先我们就先来看看项目源码的一般目录结构，了解我们需要一些什么样的编译工具。
编程语言： 2021 年 Android 项目主要支持的编程语言是 Java 和 Kotlin。两者语言都是运行在 JVM 环境中，都需要各自的编译器 javac 和 kotlinc 把源码编译为 JVM 的字节码。
包管理器： Android 项目常见的包管理器是 Gradle，它负责管理和下载项目的第三方依赖，并且构建出可安装运行的 Android 安装包 (apk)。
开发套件： 开发套件在图中是一个隐藏的依赖 —— Android SDK 。在大部分的平台架构上开发 GUI 程序，基本绕不开平台的 SDK。
至此，我们了解清楚了我们所需要的工具，那么下一个问题就是从哪里获取这些工具。
传统方法的弊端 传统的办法编译 Android 项目是下载 Android Studio 集成开发环境，作为一个 IDE 它包含了上述所需要的全部的工具，但是它也有以下的弊端：
从 Android Studio 下载指定的 Android SDK 版本也还需要一定的步骤 Android Studio 自带的 Java 版本较新，不一定能编译通过旧代码 Gradle 下载依赖的时候由于服务器在外网，需要一些特殊的技巧 这些都是我认为对于小白用户来说比较困难的地方，因此我并不推荐使用大家只是为了构建 APK 就下载 Android Studio 折腾一番。</description></item><item><title>balena：你的树莓派的强力后援</title><link>https://blog.wsine.top/posts/your-raspberry-pi-housekeeper/</link><pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.wsine.top/posts/your-raspberry-pi-housekeeper/</guid><description>[TOC]
树莓派是一个小巧的设备，由英国树莓派基金会开发的微型单板，设计的目标是以低价硬件和自由软件促进学校的基本计算机科学教学。麻雀虽小，树莓派本身也是一个五脏俱全的计算机，并且提供通用的 USB 接口、RJ45 网口以及 GPIO 排针接口予以扩展。且由于其较低的售价，受到了各种人群的喜欢。
但是，并不是喜欢树莓派的所有人都有计算机科学的背景，相当大一部分小白都在通过关注极客玩家们的教程，一步一步跟着教程操作来复刻他们做出来的东西。可是，尽管有了教程的帮助，小白在实际操作的过程中也还是会遇到很多失败的情况且不知道如何独立解决。
所以我打算向大家介绍 Balena 这个一站式的解决方案。
Balena： 完整的生态 Balena 是一套完整用于开发、部署、管理 IOT 设备，并提供了云用于连接这些 IOT 设备们的工具和服务。它包括了：
balenaEngine 是一个为嵌入式设备优化的运行引擎，等同于 Docker 的存在，但胜在软件体积更小，需要传输的镜像层更小，内存占用也更少。 balenaOS 是一个极简的 Linux 系统，不同于 Raspberry Pi OS，仅包含了 balenaEngine 以及一些必要的系统组件，使得硬件资源能够被最大化目标软件的使用，但借助 Balena 的其他服务，又可以很轻松的部署我们想要的工具。。 balenaHub 是一个类似 Github 的地方，开发者把软件装载进 balenaOS 中并发布到这里，用户可以从这里免费下载已经打包好的「系统镜像」。 balenaEtcher 是一个开源跨平台的系统镜像烧录工具，有精美易用的 UI 界面，可以把上述系统镜像烧录到 tf 卡中，然后插入树莓派直接开始使用。 balenaFin 一个建立于树莓派计算模块之上的开发板，有更好的存储和电源扩展等。 balenaCloud 就是承载了上述的开发交互界面，包括打包镜像、管理设备的云端等功能，balenaCloud 我们后面展开细说。 openbalena 则是 balenaCloud 的开源版本，如果不信任由 Balena 这家商业公司提供的云，那么就可以考虑自己部署云端，不过只支持单用户，也没有 Web UI。后者在 Github 上有第三方的开源版本可以使用。 从该生态版图可见，Balena 基本包含了嵌入式开发中的所有环节，哪怕你会说没有树莓派，都给你考虑到了。
Balena 服务的定价策略比较良心，对于个人用户来说，前 10 个设备使用 balenaCloud 都是全功能且免费的，基本上普通的用户也不会超过 10 个 IOT 设备需要连接云吧。后续的服务收费档位主要是根据设备的数量来决定的。</description></item><item><title>我的失物解决方案</title><link>https://blog.wsine.top/posts/my-lost-labeling-solution/</link><pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate><guid>https://blog.wsine.top/posts/my-lost-labeling-solution/</guid><description>[TOC]
今年暑假，我买了一个小的运动相机，Insta 360 Go 2，它的身材很小巧，整体设计也很像 Airpods. 包括它容易丢失的特性T^T. 是的，我弄丢了充电盒，并且需要再花 500+ 大洋才能再买一个充电盒，使得相机本体不浪费。从我身边的经验来看，也有不少的人丢失了小物品，今天就打算来聊聊我的思考。
当然，现在 AirTag 非常实用方便，但我想探讨的是一种平价的方案，毕竟 AirTag 也不便宜。具体效果请看动图。
人之初性本善 其实设身处地地思考，如果是我们拾到了失物，我们一般会怎么做？
如果是我自己的话，在学校，我会交给失物招领中心，饭堂的小卖部，或者保安室之类的地方。如果在景点景区的话，会交给附近的小商店，或者交给景区的游客中心。所以以己度人，一般人是不会贪心据为己有的，但是最重要的问题其实是，他人拾取了之后也不知道如何能够还给到失主。
所以下一个问题其实是如何把自己的联系信息和失物绑定？
万物都能二维码 二维码是一种目前广泛使用的编码方式，它可以存储很多有用的信息。
但是，一般常见的二维码中编码的都是一串 URL (Uniform Resource Locator) 信息，URL 可能是我们常见的网址，e.g., https://sspai.com，也可能是调用 app 某一特定入口的定位符，比如 iOS 系统的 url scheme，e.g., sspai://home . 但是这种编码内容的二维码，最终都依托于互联网或外部来存储和提供内容，一旦服务器出现了问题，可能相应的内容就再也访问不了了。因此，我觉得它并不可靠。
但但是，二维码本身是支持很多种内建的信息，并且有对应的触发动作。普通的文本，展示一段文本，常见于贺卡上；WiFi 上网信息，扫码快速连接 wifi；手机号码，扫码拨打电话；短信文本，扫码快速发送短信；邮件信息，扫码快速发送邮件。以及，最适合我们这里场景的，联系人信息，扫码添加联系人，一般可以放置于名片上。
那么，我们就来制作我们的失物联系人二维码吧。
我选择的二维码在线制作网站是：https://cn.online-qrcode-generator.com/ ，它是免费的，并且网站十分美观，还有很多可以美化二维码选项。
然后在联系卡的 Tab 上，填上自己的信息，我这里选填了
姓名：填写昵称 or X先生 or Y小姐 即可 手机：正常填写即可 电子邮箱：一般我也会留一个邮箱 Note：我会在这一栏填写一些感谢的话语 在生成选项上，如果是可能失物比较小，我会选择纠错等级为最低，这样二维码的编码点是最少的，即使缩小了也能看清。
这样，一个能够离线并且编码了自己的二维码信息就得到了。接下来的问题是，如何把这个二维码和失物联系起来了。
贴纸制作 一个很直接的解决方案是，贴纸。如果能把这个二维码贴在物品上，那么它们就是最好的捆绑方式了。
淘宝上对这类需求的现成的解决方案是「标签机」。它也很方便，通过手机 app 打印对应的图案，然后贴在目标位置。但是，它也有不足。其一，它的标签纸的大小会被标签机所限定，你不能根据失物大小来自由调整；其二，标签机的纸耗材也挺贵的，更不用说标签机本体。
综合搜索下来，我发现了一款很便宜的耗材「A4不干胶打印纸」。它有两种类型，光面和哑面材质，分别对应激光打印机和喷墨打印机。使用我们平时常见的打印机即可打印，然后裁剪成自己想要的大小或形状。
这里有个小技巧，如果你不确定打印的大小，可以先打印在一个普通的A4纸上确定好最终大小，再打印在可粘贴A4纸上。
最终效果展示，这里的图片已被我处理，应该是扫不出来的了~这里的小二维码也是蛮搭的，不算太大的违和感，其实也可以贴在看不见的相机背后。
至此，所有的工作就算完成了。希望大家都不会丢失东西啦，如果丢失也能找回，这是最大的希冀了。</description></item><item><title>修复 Zotero 和 Papership 的联动</title><link>https://blog.wsine.top/posts/how-to-fix-connection-between-zotero-and-papership/</link><pubDate>Mon, 08 Nov 2021 00:00:00 +0000</pubDate><guid>https://blog.wsine.top/posts/how-to-fix-connection-between-zotero-and-papership/</guid><description>[TOC]
Zotero 作为一款开源文献管理工具，受到了很多科研工作者的喜爱，尤其是它能够安装插件以增强软件本身的功能。另一方面，Papership 作为 iOS 及 iPadOS 上目前唯一与之适配的客户端，支持双向同步，综合体验十分出色。
然而，随着 Zotero 的不断更新以及 Papership 的年久失修，它们之间的友谊出现了小小的问题，困扰着很多现有用户。我遍寻网络资源，虽然找到了一些解决方案，但我觉得不够优雅，因此提出一套自己的解决方案，以供有类似需求的读者们参考。
Zotero 和 Papership 之间的问题在哪 在探讨解决方案之前，我们先来聊聊前文提到的问题具体在哪。
https://forums.zotero.org/discussion/64967/cant-access-webdav-files-from-papership-or-zotero-org
Zotero 本身作为开源工具并不收费，但是免费的文件存储空间只提供 300M 的空间，对于大量阅读 PDF 文献的小伙伴来说，很快就会把这部分的配额给消耗殆尽。如果要进一步购买空间 2G 档位，则需要支付每年 20 美元的费用，对学生党来说有点高。但是好在 Zotero 允许外挂 WebDAV 来存放文件，十分良心，所以不少用户都选择以这种方式同步文献。
而 Papership 则是一个支持 Zotero 的第三方客户端，它可以直接登录 Zotero 账号以获取文献库中所有文献的 metadata 的信息，然后通过 WebDAV 链接直接访问文件，最终实现与 Zotero 的完美联动。
Papership 唯一额外要求的一点是需要将一个特殊的文本文件 lastsync.txt 放置在 WebDAV 的同步目录内，Papership 在同步文件时会优先检查这个文件，如果发现本地的文件变动时间没有比 lastsync.txt 存储的最后变动文件更新，则采取「懒同步」的方式——也就是不同步。
问题就出在 Papership 的同步机制上。随着 Zotero 的更新，不知道出于何种原因，Zotero 在同步 WebDAV 文件的时候会主动删除 lastsync.txt。这个机制让 Papership 失去了「懒同步」的参照系，导致在 Papership 中阅读和标注的内容无法更新到云端，Zotero 的文件变动也无法同步至 Papership。</description></item><item><title>科研邮箱的常用用法</title><link>https://blog.wsine.top/posts/my-favourite-usage-of-email-in-research/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://blog.wsine.top/posts/my-favourite-usage-of-email-in-research/</guid><description>[TOC]
9月份，有新同学进入了大学走进知识的殿堂，有新的学者进入了科研的队伍拓展知识的尽头，也有新的毕业生进入了企业实现自己的人生目标。邮箱是在学习和工作中必不可少的一个工具之一，本篇就是通过科研作为切入口来聊聊邮箱的一些常见用法。
让人知道这是你 初来乍到一个新的科研机构（大部分情况下是学校），毫无疑问你会被分配一个邮箱地址来代表你在数字网络中属于这所学校的一个证明，同时它也是你对外和对内沟通的一个非常常用的桥梁，所以第一步就是应该让大家知道「这个邮箱地址」是你。
弊端 一般情况下，默认分配的邮箱地址形式都类似 eid@xxx.edu.cn，其中，eid 是一个字符串，由某一算法针对个人信息唯一生成。常见的例子有，王小明 - wangxm3，陈大为 - u1234567，James Smith - jasmith-c 等等。
但是，这些例子都有一个重要的弊端，就是只有这个 eid，没有办法感知这个是不是你。毕竟，王小明和王小民的 eid 是基本上没有辨识差异的。
解决方案 这个问题可以通过设置别称（Alias）来解决。一般情况下，科研机构都是购买企业邮箱服务，而市场上主流的企业邮箱服务供应商都是提供别称功能的，比如腾讯企业邮箱和 Office365。而这个设置学校会有提供专门的入口，如果没有，也可以电话/邮件咨询一下管理 IT 的部门（比如：信息管理中心）。
以我们学校为例，通过搜索引擎就能搜索到设置的别称的专门入口， Email Alias Management 页面。填写上你想要的 Alias，然后静待数小时使服务器之间的数据同步完全生效，网页上也有相应的提示。至此，你发送出去的邮件都会显示这个别称（e.g.., myalias@xxx.edu.cn），别人也可以通过这个别称邮箱地址给你发邮件。
在科研用的邮箱地址中，我个人还是比较建议用中规中矩的常见格式，比如 cswangxm@xxx.edu.cn , alex.wang@xxx.edu.cn , etc&amp;hellip; 常规的形式也便于他人搜索到你，而且不容易产生有人问你这个名字是什么意思的情形。
Q&amp;amp;A 问：我已经使用默认的邮箱地址有一段时间了，更改会不会有什么影响？
别称（Alias）其实是相当于给自己同一个邮箱多一个地址，就像我们日常生活中有昵称一样，指代的还是同一个人。因此，无论别人给默认地址发送邮件还是给新别称地址发送邮件，你都能通过同一个邮箱接收到邮件。
问：我已经使用默认的邮箱地址发表文章了，更改会不会认为是两个不同的作者？
在现代的识别作者的方案中，一般使用 ORCID (Open Researcher and Contributor ID) 系统来唯一记录同一个作者的贡献。它通过绑定你的邮箱地址到 ORCID 系统中来唯一确定一篇文献是由同一个作者贡献的。
如果你还不清楚这个系统，那么很明显新增别称也不会影响到你，而我强烈建议你快去注册一下。如果已经有这个系统账号了，那么你只需要把新的邮箱地址也绑定到系统上即可。
使用更好的系统 除了邮箱地址之外，评判一个邮箱是否好用，更重要的是它的系统。科研机构选购的企业邮箱是已经固定了的（e.g., 腾讯企业邮箱），肯定是不能由我们来自由选择了。但是，腾讯邮箱这种历史悠久的系统，首先界面就很古老，近些年一些较新的功能是没有的（e.g., 语法检查），和其他的产品之间的联动也不足。
解决方案 但是，我们可以通过邮件转发（Forwarding）这样的功能来把邮件处理转移到你喜欢的邮箱系统上。感谢科研界，很多事情上都有比较大的自由度，在公司管理上可能很多都禁止对外部系统转发邮件，但是在学校里基本上没有这样的限制，大家可以自由地做选择。
简单分享一下，我个人喜欢的邮箱系统是 Gmail。因为得益于 Google 是一个优秀的搜索引擎，本身积累了很多搜索的经验，Gmail 本身有效地检索出自己想要的信息，这一点是最吸引我的。Outlook 平台的搜索体验真的是非常差，默认检索会得到一大堆相关度很低的信息。但是这个从搜索历史邮件是一个非常高频的需求，因此我急切需要更好的系统来满足这个需求。
邮件转发的设置也非常的简单，以 Outlook 邮箱为例，登录网页版，在右上角的小齿轮的设置界面里，找到 Forwarding 这个选项卡，Enable 然后填写上要转发的邮箱地址即可。这里建议也在原来的系统中保留一份邮件副本。整个设置过程非常简单。</description></item><item><title>使用 YADM 整理你的 dotfiles</title><link>https://blog.wsine.top/posts/manage-your-dotfiles-with-yadm/</link><pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate><guid>https://blog.wsine.top/posts/manage-your-dotfiles-with-yadm/</guid><description>说起收纳与整理，大家首先映入脑海中的应该都是家居收纳和书桌的整理。但是对于虚拟的东西是否也应该收纳与整理，一个干净的工作环境必定也能对工作有正面的帮助效果。
在我的日常工作环境中，主要使用命令行相关的工具，不得不面对很多的配置文件来使工具的表现更符合自己的需求。这种配置文件一般以一个 . 符号为前缀，所以被大家习惯性称为 dotfiles .
对于 dotfiles，我们一般有如下的痛点：
配置文件太零散了 配置文件无法同步 配置文件在不同平台下面有部分不同 软件需要载入配置文件 部分信息既想同步又不想公开 YADM 是一个比较新的管理器。在我的实际使用中，很好地解决了上述的痛点。我也不断摸索出自己的最佳实践，在这里分享给大家。
用约束管理凌乱 首先，如果文件没有办法按照一定的规则来存放，那么无论哪个软件管理器都只能是做掩埋，掩耳盗铃。
我们来看一个例子，一个使用多年 Linux 的用户，它需要管理的配置文件到底有多乱。我就在 Github 搜索 dotfiles 找一个最高 star 的作为例子。
实际上它总共包含了29个文件在一级目录里面。当然平时都是隐藏的状态，但是你总是会因为需要查看文件权限，不小心被这堆「垃圾」压倒。
为了避免被压倒，我们需要遵循规则，而这个规则就是 XDG Base Directory Specification . 先来看一眼 XDG 官方的定义：
Various specifications specify files and file formats. This specification defines where these files should be looked for by defining one or more base directories relative to which files should be located.</description></item><item><title>使用 Airtable 构建个人单词本</title><link>https://blog.wsine.top/posts/airtable-as-personal-lexicon/</link><pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate><guid>https://blog.wsine.top/posts/airtable-as-personal-lexicon/</guid><description>词到用时方恨少，这句话说的就是第一次写论文的时候的我。口语表达需要用到的词，真的比书面表达的词少很多。但是，在平时的论文阅读的过程中，总能发现一些「陌生词」，而这些陌生词往往用得非常的巧妙，在英语语境中，是更能precisely 地表达语义。我就是一直在思考这个问题，如何才能收藏起来以便以后为我所用呢？
本文就是提出这么一个免费的解决方案，来帮助我们摘抄陌生词，形成自己的词典，并能方便地查看和温故。当然，我们的目标还是希望能够多平台覆盖和同步的，不然实用意义就变少了。
Airtable as a Database 首先要解决的第一个问题，就是如何把想要的单词摘抄并存储起来。这里，很多的单词翻译软件都有自己的单词本功能，但是同步功能基本上都是付费的功能。对我这种低频使用者而言，不太实惠。
我考虑了使用在线表格作为后端的存储，Airtable 就是这个领域的佼佼者了，并且它提供的基于 HTTP 的 API 接口方便和其他的软件交互完成存储和访问，就非常地符合我们的需求。
你需要做的准备有以下的几点：
准备一个 Airtable 的账户，新建一个 Table，并将主 sheet 命名为 Main 根据以下的 scheme 建立表头 # Name - Field Type Query - Long text Translation - Single line text isWord - Check box Explains - Long text US-Phonetic - Single line text UK-Phonetic - Single line text Count - Number - Integer 最后，你需要获取 Airtable 相关的 API Token。 访问 https://airtable.</description></item><item><title>疫情之下提升心情的方法</title><link>https://blog.wsine.top/posts/improve-mood-under-covid19/</link><pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate><guid>https://blog.wsine.top/posts/improve-mood-under-covid19/</guid><description>2020 年，在疫情的笼罩之下，对我而言最大的课题就是情绪管理。当然，这也跟我的经历相关。产生低落的情绪并不可怕，可怕的是自己无法打败这样的情绪。本篇文章就是我在 2020 年的实践中总结的一些调节心情的方法。
千言万语总结成一句话:
让自己开心最重要
背景介绍 我是一名 2019 年秋季入学的香港博士生。不幸的是，由于座位紧张，我入学被分在一个地下办公室。没办法和师兄师姐在同一个办公室，也就没办法产生更多的联系。
没多久，香港社会暴乱，学校率先停课/推出网课，这一动乱就是两个月之久。缺少的线下授课使得认识同级小伙伴的数量变得更加少。
2020年初，Covid-19 席卷全球，由于是一年级生，出于稳定的网络环境考虑，赶在封关之前回到香港继续课业，没想到和朋友的断联到现在也还没恢复。
但是，无论生活如何糟糕，还是要笑对人生。
给情绪找一个出口 在我们的现代观念中，生活往往要求人们积极乐观向上，大家总是报喜不报忧，尤其是面对家长，不想家长担心；但自己的朋友圈中，也需要顾虑到面子，不能畅所欲言。在最近的氛围中，也提出了高情商vs低情商这样的对比，使得人们说一句话反而要考虑得更多了。
但是，人总是会有悲欢离合。那些失落的情绪被掩埋了，它就真的不在了吗？
在 20 年 4 月的时候，少数派有一位作者提出了 「b言b语」的想法，作者初始的想法是保卫表达欲的同时避免社交兴奋。有兴趣的可以详细阅读这篇文章：https://sspai.com/post/60024 。但是对我而言，更重要的是给情绪一个出口，让知己能够聆听。
我的搭建方案 遵循类似的架构设计，我使用了Github Page + Airtable，我的方案改进了一下的几点：
使用 Airtable 替代 Leancloud 作为后端，避免了Leancloud一定时间内没使用会归档应用的限制，避免被迫营业，毕竟我的希冀是这个自留地发得越少越好，说明自己的心境在提高甚至走了出来。 使用 Material Design 作为设计语言，良好的视图也能影响心情。 发布方式增加了更加易用的网页端，密钥本地保存。 但由于私密性相关，我不打算开放给非亲密好友。源代码可以从该链接获取 Gist. Airtable 自身提供的API已经考虑了翻页的功能，且可访问频率高，不限制过长时间的访问，非常适合这个系统。你只需根据自己的API token 替换对应的位置即可部署。最重要的是把入口只告诉给你信赖的亲密好友。
# airtable base scheme Created: Date - Date format: Local - Time format: 24 hour - Do not use the same time zone Content: Long text - Do not enable rich text formatting Index: Autonumber 如果有更多的问题，也欢迎和我讨论。</description></item><item><title>我的科研软件流分享</title><link>https://blog.wsine.top/posts/my-research-software-solution/</link><pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate><guid>https://blog.wsine.top/posts/my-research-software-solution/</guid><description>在少数派2019的年度征文里，我分享了我积累的「科研方法论」。经过一年多的对科研软件的使用，我也逐渐积累了一套自己的软件流程，现整理为文章，希望对你有用。
在科研的过程中，我经常经历的过程大概只有这几个：阅读论文，讨论 idea，实验记录。所以本文主要还是以这 3 点作为切入点来聊聊，如何将这3个过程变成一个电子化的，系统化的软件流程。
阅读论文 首先科研离不开的是阅读论文，而一个好的文献管理工具能让你快速的收纳和回顾你所看过的文章。我使用过的文献管理工具有主流的 3 大工具，Mendeley，Endnote 和 Zotero，最后选择的是 Zotero。下面先来说说我为什么喜欢它的独特理由，其他的功能其实都大同小异。
桌面端管理 在桌面端，我的需求是筛选论文并且可以快速入库；当论文阅读完觉得值得保留，从 Inbox 转移到特定的 Collection 时，我能够快速编辑相应的字段；当我想起来某篇论文，能够快速找到并查看 PDF 上面的标记。这就是我在桌面端会使用到的最常用的功能了。
文章编号导入
这个算是 Zotero 里比较让我眼前一亮的功能了。我们知道，出版商发行出版的书籍会有一个对应的ISBN号，这个编号是唯一的。在文献的领域里面，一般会使用 Digital Object Identifier (DOI) 来作为文章的唯一编号。但是在生命和医学等领域，他们会使用 PubMed Unique Identifier (PMID) 来作为唯一编号。哪怕是对于未发表的文章，比如 arxiv 这种平台的编号，在 Zotero 中通通都支持自动导入。
但是值得注意的是，这种导入功能还是会跟你的出口 IP 有关系的。因为只有你所在的学校或机构购买对应出版商的访问资格权限，才能直接使用该导入功能，而服务器是根据你的请求所在的 IP 来判断你所在的机构的。
字段管理
另一个让我比较喜欢的功能就是简洁的字段管理了。因为 Zotero 本身虽然可以通过 Group 的方式来区分不同子领域的文章，但是实际上当你加入的文章比较多的时候，你的眼睛其实很难检索你脑海中的一篇文章。
但是，实际上我们对文章记忆比较深的，除了 idea 本身以外，更多的是文章的 short title/short name。这个 short title 在 Zotero 中有专门一个字段「Short Title」，相比于其它的软件，确实更加符合实际的使用需求。
另一个记忆比较深刻的字段应该属于 Publication 的 short name . 比如机器学习领域的顶会是 ICML，总比记忆 International Conference on Machine Learning 来得实在吧。这个字段在 Zotero 中被称之为 「Series」.</description></item><item><title>给你的静态博客带来 RSS 订阅</title><link>https://blog.wsine.top/posts/bring-rss-to-your-blog/</link><pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate><guid>https://blog.wsine.top/posts/bring-rss-to-your-blog/</guid><description>最近对于千篇一律的科技新闻，感到了一丝的阅读疲倦。因此，想要寻找一些有有趣的灵魂或者独立思考的博文，打发平时无聊的摸鱼时光。但是，随着在互联网上探索有意思的博客，发现绝大部分都没有提供相关的订阅链接，这将很难追踪新博客的发布。这其中，相当一部分博客是通过静态方式发布博客的。
因此，本文的内容就是通过我的实践展示一下如何给静态博客增加 RSS 订阅。
什么是 RSS 首先我们来看一下维基百科上面对 RSS 的定义：
RSS（全称：RDF Site Summary；Really Simple Syndication），中文译作简易信息聚合，也称聚合内容，是一种消息来源格式规范，用以聚合经常发布更新资料的网站，例如博客文章、新闻、音频或视频的网摘。RSS文件（或称做摘要、网络摘要、或频更新，提供到频道）包含全文或是节录的文字，再加上发布者所订阅之网摘资料和授权的元数据。简单来说 RSS 能够让用户订阅个人网站个人博客，当订阅的网站有新文章是能够获得通知。
仔细阅读第二个英文全称，它表达的是 RSS 是一个十分简单的聚合技术，最主要的目的就是给个人网站和博客提供信息聚合，并通知所有订阅的阅读者，使信息能够更高效的传播。这正是我们想要的目的。
RSS 的格式 RSS 的本质其实很简单，只是一份定制化的 XML 文件，我们先来看看该文件的基础定义。这份定义参考自 RSSBoard 网站对于 RSS 2.0 版本的定义所提供的最简单的版本。
&amp;lt;rss xmlns:atom=&amp;#34;http://www.w3.org/2005/Atom&amp;#34; version=&amp;#34;2.0&amp;#34;&amp;gt; &amp;lt;channel&amp;gt; &amp;lt;title&amp;gt;blog_title&amp;lt;/title&amp;gt; &amp;lt;atom:link href=&amp;#34;blog_link&amp;#34; rel=&amp;#34;self&amp;#34; type=&amp;#34;application/rss+xml&amp;#34; /&amp;gt; &amp;lt;link&amp;gt;blog_link&amp;lt;/link&amp;gt; &amp;lt;description&amp;gt;xxx&amp;lt;/description&amp;gt; &amp;lt;item&amp;gt; &amp;lt;title&amp;gt;&amp;lt;![CDATA[article_title]]&amp;gt;&amp;lt;/title&amp;gt; &amp;lt;link&amp;gt;article_link&amp;lt;/link&amp;gt; &amp;lt;guid isPermaLink=&amp;#34;false&amp;#34;&amp;gt;article_id&amp;lt;/guid&amp;gt; &amp;lt;description&amp;gt;&amp;lt;![CDATA[article_content]]&amp;gt;&amp;lt;/description&amp;gt; &amp;lt;pubDate&amp;gt;article_date&amp;lt;/pubDate&amp;gt; &amp;lt;/item&amp;gt; &amp;lt;/channel&amp;gt; &amp;lt;/rss&amp;gt; 可以看到，这份 XML 文件十分简单，仅包括对于需要阅读的内容的基础信息，并没有增加其他复杂的信息。其中比较特殊的可能是 guid 这个标签，它提供对于文章的唯一标识，但由于文章的超链接也是唯一的，因此可以把超链接作为 GUID 的标识。</description></item></channel></rss>