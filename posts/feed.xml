<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Wsine's blog</title><link>https://blog.wsine.top/posts/</link><description>Recent content in Posts on Wsine's blog</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 13 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.wsine.top/posts/feed.xml" rel="self" type="application/rss+xml"/><item><title>使用 Typst 制作简历</title><link>https://blog.wsine.top/posts/use-typst-for-resume/</link><pubDate>Wed, 13 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.wsine.top/posts/use-typst-for-resume/</guid><description>使用 Typst 制作简历 制作一份优秀的简历是每一个毕业生都需要经历的过程，而海投企业是目前比较实际的一个求职策略。但是，随着就业市场的竞争日益激烈，为不同的企业定制一份相性更高的简历变得尤为重要。然而，对于许多同学来说，维护多份不同的简历可能是一项比较困难的任务。
在本篇文章中，我们主要围绕制作简历这一具体需求，聊聊现有简历制作方案中的问题，并介绍一款全新的工具来帮助大家更轻松地制作一份专业的简历。
现有简历制作方案的不足 Word 简历 Word 或许是大家脑海中第一反应的通用版本工具，网络上也有很多 Word 制作的简历模板，比如 Microsoft 365 本身自带的创意媒体网站也提供了大量的精美模板。虽然在易用性上 Word 基本做到了领先，但是 Word 文档的编辑和保管却是一言难尽。
不透明属性。Word 基于 XML 的底层做布局并实时渲染于它的编辑器上，这样带来的一个好处是用户不必学习底层的布局语言，直接通过 GUI 编辑器的按钮下达指令去调整排版。但是同时也有由于这种不透明的编辑对底层布局的影响，常常让人们做修改的时候需要小心翼翼的，生怕错误改动一处地方后无法复原原来的格式。
比如上图中的第一个段落，在底层的布局中是两个文本对象，如果不仔细观察，一并选择且更改了，将很难恢复到它原来的样式。
版本管理。Word 的版本管理相对来说并不友好，最被人们熟知的大概是「初稿.docx」到「终稿打死也不改 v3.docx」这一脍炙人口的案例。
但是在海投的过程中，我们往往需要根据特定的企业，定制一份专用的简历版本。比如上文的 Skills，会根据企业的用人需求，润色和强调不同的技能点。在 Word 中往往需要保存多个版本，且很难在不同版本之中复用原有的文字。
Latex 简历 Latex 是理工科的同学较为熟知的一款排版工具，其基于纯文本 + 编译的工作方式也很好地克服了 Word 的不足。但是，Latex 背后的编译过程较为复杂，严重拖慢了纯文本部分的编辑，降低了整体的体验。
较慢的编译速度。Latex 需要在每次保存的时候重新编译生成 PDF 才能看到更改的内容在产出文件中的变化。想要经常看看最新的排版效果的话，每次都需要等待上几秒，但正是这断层的几秒，会打断思维的连续，使得整体的编辑输出不连贯。
错综复杂的布局语法。Latex 还有一点广为诟病的是它的语法非常晦涩难懂，也导致了使用上需要大量的宏包来封装才能稍微降低语法的复杂性。
上面的模板中使用了上图所示的布局语法，如果不翻阅大量的手册，实在是无法直观地理解每个字段想要表达的意思。
难以解读的 debug 信息。另一方面，在编译出错后，Latex 的错误信息总是让人摸不着头脑。Warning 信息充斥着大量的 Latex 模板，Raw logs 信息也难以阅读，更难以准确地定位错误的位置。
在这种情况下，大家往往需要一系列的 Trial and error 来试图解决问题。而这个方法，却又被上面提到的较慢的编译速度所严重影响，编辑体验就会一落千丈。
在线简历制作系统 网络上有很多制作简历的在线系统，能让你输入自己的经历，然后选择模板，生成一份精美的简历。但是，由于简历本身的属性包含了大量的个人信息，而这些在线系统往往都是不是大型公司出品，因此隐私安全成了这一类方案的最大顾虑。
Typst 方案的优缺点 Typst 是一款专门为排版而生的新生代工具。它完全摒弃了现有系统的约束，着眼于现代化的功能与设计，成功地克服了传统方案上的一些不足之处。
跨平台的编译器。Typst 主要使用 Rust 开发，能够生成各大平台的可执行程序，然后被下载到本地离线使用，从而保证了隐私安全。</description></item><item><title>自建 Overleaf 作为毕业论文排版工具</title><link>https://blog.wsine.top/posts/selfhost-overleaf-for-thesis/</link><pubDate>Tue, 31 Oct 2023 00:00:00 +0000</pubDate><guid>https://blog.wsine.top/posts/selfhost-overleaf-for-thesis/</guid><description>自建 Overleaf 作为毕业论文排版工具 无论是本科、硕士、还是博士，论文撰写是每个学生在不同的学习阶段都会遇到的任务。目前主流的论文排版工具主要有两个阵营，Word 和 Latex，不同的工具都有其优缺点和适用范围。本篇文章记录我使用 Latex 撰写博士论文遇到的困难和解决方案，同时也会展开聊聊我为什么做出这样的选择，希望给还在观望 Latex 和使用 Latex 遇到困难的同学们一点启发。
为什么选择 Latex 作为毕业论文工具 在撰写毕业论文的时候，作者只有毕业生一个人，因此协同编辑文档的需求其实已经不复存在了。但是对于为什么仍然使用 Latex 作为排版工具，除了专业背景是最老生常谈的理由，还有两个重要的原因使我更坚定地选择 Latex 作为毕业论文的排版工具。
第一点是沉没成本。在很多理工科的领域，毕业论文约等于文献综述 + 一系列的现有论文已成为一个事实标准。因此，原有论文的排版工具是什么，就成为了你转用其他排版工具的负担，也就是这里说的沉没成本。对我而言，由于前期大量地和导师一起用 Latex 合写文章，基本上我也不得不继续使用 Latex。
第二点是格式统一。不同的论文由于投稿的会议和期刊不同，他们排版的图表和段落格式都不一样。但是对于一份合格的毕业论文来说，在一份论文里至少要做到内部格式一致才会被学校图书馆接收，学生才能顺利毕业。对于一个编译型的语言，能够做到一份源代码 + 库文件生成一致的程序输出。对于 Latex 这个编译型语言来说，就是一份论文源码 + 模版文件生成一份格式一致的 PDF 输出。因此，对我而言，使用 Latex 能减少大量的编辑成本。
在线 Latex 工具无法满足编辑需求 Overleaf 已经成为了在线 Latex 编辑器的事实标准。它提供了大量的国内外出版商的模版供用户直接使用甚至一键投稿；它允许免费用户邀请其他人一起在线协同编辑同一份文档；它的编辑器提供了自动补全、格式化、实时编辑、实时预览等一系列方便的功能。
但是，由于编译这个步骤需要花费相对多的计算资源，因此对于免费版的 Overleaf 来说，它限制了单次编译的最长时间。尽管官方没有明确说明超时时间为多少，但从我的经验来看，大约编译一份 ACM 或 IEEE 的标准会议模板（约 12 页）就比较接近超时的上限了。
对于我们想要编译的博士论文来说，其一般为几十页至上百页不等，远远超过 Overleaf 免费账户的限制。想要绕过这个限制，一般来说有如下几个方法：
选择性地只编译部分章节 花钱购买 Premium 版本 使用本地的 Latex 工具 减少待编译的数量毫无疑问是一个直接了当的解决办法，但是一般来说，不断往下撰写论文的内容的时候也需要偶尔回顾性地看看上文自己是怎么表述的，而部分编译打破了这一回顾的需求；购买 Premium 花钱解决问题诚然是一个万能的钞能力，21 美刀一个月的价格，是否值当就看个人的心理预期了；最后，如果选项二不满足于你，那么使用本地 Latex 工具编译就变成了唯一选项。本地的 Latex 工具在集成性上总是略微逊色于 Overleaf 开箱即用的环境，且我们已经对 Overleaf 的编辑器有着熟练的使用经验，那么是否可以复刻一个运行在本地的 Overleaf 编辑器来绕过编译时长的限制呢？</description></item><item><title>Twitter 的推荐算法</title><link>https://blog.wsine.top/posts/the-algorithm-of-twitter/</link><pubDate>Thu, 31 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.wsine.top/posts/the-algorithm-of-twitter/</guid><description>Twitter 的推荐算法 在今年年初的早些时候马斯克收购 Twitter 时表示会对 Twitter 的推荐算法进行开源。在 2023 年三月份的最后一天，Twitter 的推荐算法代码如约而至地出现在了 GitHub 上。开源推荐算法对 Twitter 公司和用户来说，在一定角度上，是一件双赢的事情。
对于 Twitter 公司来说，其近些年来遇到了信任危机：用户不清楚不同推文的出现理由导致怀疑 Twitter 公司收黑钱做竞价排名的事情。开源 Twitter 推荐算法的官方理由，马老板也给出了自己的解释：
一方面，现有的推荐「算法」太过错综复杂以至于 Twitter 内部都无法很好地搞懂，而开源能够让公众直视当下糟糕的「算法」起到监视的作用，从而推动 Twitter 公司的开发进一步快速迭代「算法」，尽管代码开源初期由于糟糕的「算法」会让 Twitter 陷入尴尬的境地；另一方面也是最重要的一点，Twitter 希望以此来解决上述提到的信任危机。
对于普通用户来说，了解 Twitter 的推荐算法一定程度上能够帮助自己的推文更好地被推荐到更多用户的时间线上，给自己增加更多的曝光流量。如果是一个推荐系统的开发者，还能从顶级公司的推荐系统中学习到有用的策略；科研工作者也能通过分析应用中使用的算法得出研究结论辅助改进算法 ^1。
本篇文章就是一起来探索一下推荐算法的重要性，什么是推荐算法，以及 Twitter 推荐算法的做法。
为什么开源推荐算法这么重要？ 哥伦比大学下的一个研究机构 Knight First Amendment Institute（下称，the Knight Institute）曾指出 ^2，社交媒体平台的推荐系统，特别是其内部的算法和策略，对人们的行为有着巨大影响，包括平台用户和内容创作者。反之，用户和创作者的行为也会反向影响平台，推动算法和策略的持续更新。许多社交媒体上的负面现象常被归咎于人们的行为或是相关算法，但实际上，这些现象是两者共同作用的结果。
The Knight Institute 也列举了两个常见于舆论的不良现象（从观察的角度 vs 从猜想的角度）：
“Twitter 上的用户太消极了” vs “Twitter 的算法奖励消极的情绪” ^3^4 “Youtube 的算法推荐用户一些无意义的内容” vs “用户的行为训练了这样的推荐算法” ^5 这也很好地反映了我们在引言中所提到的、由于算法透明度不足引发问题。人们会对这种不透明的算法产生了许多疑虑。然而，对算法进行开源确实可以减少这部分的疑虑，因为信息传播的方式对于不少人来说其实是透明度的。
另一方面，现代网络的高速传播能力容易引发病毒式扩散，相信大家对此有深刻的体会，其中假新闻的传播尤为常见。
The Knight Institute 指出，网络的存在推动了病毒式的信息传播。这个观点其实很容易理解，因为在互联网网络的前提下，信息才能被更广泛传播。而在现代网络中，我们可以通过度量某个信息（例如，一个推文被转发了多少次）的传播能力，来了解其在网络中的影响力。然而，病毒式的信息传播有时会变得无法预测，并且其传播的内容常常占据了我们的大部分注意力。但是，一个所谓的「降权」操作，或者说是一种软屏蔽，可以有效地减缓这种病毒式的信息传播。
然而，降权这种操作通常在平台内部进行，用户通常无法确切知道自己是否被降权。当用户发现自己的推文无法获得广泛传播时，他们就会怀疑自己的推文是否被降权，这也就进一步佐证了推荐算法的不透明性可能引发用户的疑惑和揣测。所以，开源化推荐算法可以变相地解决某个企业的信任危机。
推荐算法 vs 推荐系统 推荐算法是什么？ 说到推荐算法，很多人对里面的两个词都很熟悉，但是放在一起又不能说出个细节来。这里我尝试举一个极简的例子来一起说明推荐算法要做的事情。</description></item><item><title>城市漫步指南：香港，感受不一样的文化</title><link>https://blog.wsine.top/posts/travel-hk-feeling-different-culture/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.wsine.top/posts/travel-hk-feeling-different-culture/</guid><description>城市漫步指南：香港，感受不一样的文化 在香港生活也三年多了，这座城市给我带来了很多不一样的文化感受。通关在即，如果你希望来香港游玩感受一下这里不一样的文化，这里有一份漫步指南，和普通的旅游攻略可能不一样，希望能从居民的角度帮助你体会这座城市的魅力。
本篇文章分为白天漫步指南和晚上漫步指南两部分，香港给人的一个印象是街道有大量的霓虹灯，有一种灯红酒绿的感觉，这部分的体会会着重留到晚上漫步的部分，而白天，可以踏足一些比较有特色的地方来感受城市另一些方面的文化。
白天的漫步指南 天际 100 &amp;amp; M+ Museum 如果你喜欢从全局的角度去感受一座城市，那么西九龙片区是一个非常值得推荐的地方。
每座大城市可能都有它自己的一座高塔来鸟瞰整座城市，在香港这便是「天际 100」。在天际 100 你可以从东南西北四个方位俯视整座城市的规划和发展，也可以坐下来和朋友在这 100 层楼高的高空中喝杯咖啡聊聊是非。对了，如果你喜欢给朋友们寄明信片，这里的明信片都很有特色可以慢慢挑选写下自己的祝语，然后投递到邮箱中。
西九龙公园常常举办很多有意思的户外演唱会，而每逢周末也有很多人来这里野餐享受闲暇的时光，外国友人在这个群体中占了不少的比例，你可以来这里散散步感受一下蓝天白云和生活的气息。
在西九龙还有一座特别的艺术博物馆「M+ Museum」 ，是亚洲首间全球性当代视觉文化博物馆。既会收藏和展览一些世界艺术大师的作品，也会讲述香港的此地彼方，展现这个城市从战后至今所经历的各种转变。
西九龙附近也有一些常规的大型商场「圆方」，最近也建成并开放了一座特色建筑「香港故宫文化博物馆」，有兴趣也可以步行到访。
黄大仙 &amp;amp; 彩虹 &amp;amp; 钻石山 如果你喜欢融入当地居民的生活，体会当地的历史政策带来的影响，那么黄大仙区则是一个不错的选择。
黄大仙区最出名的莫过于「黃大仙祠」，人们来这里祈福，祈求工作和生活的顺心如意。造访黃大仙祠当然少不了求签问卜，感受一下这个充满仪式感的行为。祠外一条小路上还有反法轮功的宣传，不过随着这几年时间的流逝，这些特别的东西也埋入了历史。
在黃大仙祠的背后，你会发现一座奇怪的小山，那便是「狮子山」。在香港，人们很喜欢周末去郊外踏青，在这里俗称「行山」。每一座风景独特的山峰都是一个郊野公园，有政府铺设规划的行山径，难度也有等级划分。 在这座人口密集的城市中，还能保留数量可观的实在是难能可贵。狮子山的特别之处就在于靠近市区，地势不高因此难度较低，还能遇见野生的憨态可掬/凶神恶煞的猴子 ～ 只要不主动凶它们，它们也不会攻击游客啦。
往旁边走走，你会看到香港很有地标性的一种建筑「公屋」，有点像内地的公租房，建筑风格自成一派。据说申请公屋要好几年才能排得上。而看到公屋后，附近便是港铁一个非常有代表性的「彩虹地铁站」，因为不同的地铁站都用不同的颜色来代表该片区的一个形象，你也可以特别留意一下。而彩虹地铁站包容万象，是一个很特别的存在。
最后，走到位于钻石山的「荷里活广场」可以看看这边亲民的商业店铺们，比如百脑汇、苏宁、屈臣氏、万宁这些当地特色的店铺。广场的中央偶尔会有一些年货节一样的小摊贩，售卖着一些中外的糕点。你也可以在这里找到自己喜欢的餐厅，本地特色敏华餐厅和各国的代表性连锁餐厅。
沙田 &amp;amp; 科学园 &amp;amp; 大尾督 在城市走走停停是一种选择，到郊区用代步工具也是体验居民生活的一种选择。如果你热爱骑行，可以来试试这条路线。
从「大围」或「沙田」地铁站出来，会发现不少的自行车店铺出租越野自行车，也能在店铺附近发现不少指示牌指引着自行车径。沿途会看到不少的自然风光，如白石角的海滨长廊，作为新兴的居住区吸引着不少人在这附近购房；如香港科学园，作为高新技术产业的园区，也是很多年轻人梦想中的工作地点。
不管你在大围还是沙田出发，最终都会抵达大尾督这个终点，可以在这里归还自行车。还车后，可以在水上活动中心旁的码头租艇划艇仔，或在堤坝上放风筝。最后，也肯定少不了这条路线的关键美食，大尾督烧烤场，限时自助烧烤，用这里的话来说叫「放题」。
晚上的漫步指南 旺角 &amp;amp; 弥敦道 &amp;amp; 星光大道 香港的固有印象之一，街道上大量的霓虹灯，就会在「旺角」的晚上遇到。在这里，你也能找到几乎全港所有的香港小吃，以及众多的放题餐馆，可以大快朵颐。不要以为香港人不吃辣，我常常能听到本地口音下单中辣、大辣，让我这个点走辣（不要辣）的人声音分贝都下降一大截。
吃饱喝足后往大马路走走，会来到这座城市的中轴线「弥敦道」，也是港乐中一首传唱度非常高的同名歌曲。往尖沙咀的方向一直走，感受这座城市的车水马龙。你会遇到九龙公园，看似是一个平平无奇的街心花园，里面的湖泊竟然还栖息着火烈鸟。
这条路的终点，是以前我们总能在 TVB 上看到听到的颁奖地点「星光大道」。在星光大道上有一块纪念牌匾依据年代及次镶嵌排列着杰出电影工作者的芳名与掌印。虽然晚上可能看不太清晰，但走走这条大道，也有一种久违的亲切感。
维多利亚港 &amp;amp; 天星小轮 &amp;amp; 中西区海滨长廊 星光大道边，便是「维多利亚港」。走累了坐下来休息一下，看看海，来个小甜点吧。停在「尖沙咀钟楼」附近的「富豪雪糕车」是个不错的选择，软滑香甜，价格亲民。
若恰逢晚上八时，「幻彩颂香江」灯光秀便会上演。璀璨的灯光从对岸铜锣湾、中环的摩天楼上闪烁开来，而你的耳边却响起动人心弦的乐曲，与灯光的节奏完美契合。你面前的这湾海水分割着港岛与九龙，但香港的精神却并不会因此被分隔开。这是一场两岸共同完成的演出，精密的合作让人赞叹不已。
看完演出，你或许也好奇从海的对岸看这边是怎样的一种体验，那么，乘坐「天星小轮」去港岛吧！只需 3 元，你便可以吹着海风，拥有美妙平稳的航海体验。
渡船的终点站是中环，若是你喜好热闹，那么走两步路便可到「兰桂坊」享受美酒派对。若是你更偏爱安静且有生活气息的地方，那么你可以直接沿着码头向前走，沿着「中西区海滨长廊」去偶遇椰子树、柴犬、街头艺术家，和练瑜伽的人们。「中山纪念公园」在这条长廊的中点处，这里和海对面的西九龙公园遥相呼应，走到这里可别忘了给对岸拍个照~
很高兴来到香港这里读书，让我的世界观广阔了不少。我知道因为之前的社会运动，这里的风评变差了许多。但是，这片土地上同样孕育着无数的热爱祖国的人民。疫情时代很快就过去了，这里借用一首歌曲《一水两方》表达我们内心的希冀。
一水将两方分隔 / 好好一个家但是谁又舍得自立 / 矛盾就地忘记吧 / 冰释永未晚大地回暖 / 候鸟总会归返</description></item><item><title>我的日本旅游经验分享</title><link>https://blog.wsine.top/posts/my-travel-experience-in-japan/</link><pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate><guid>https://blog.wsine.top/posts/my-travel-experience-in-japan/</guid><description>我的日本旅游经验分享 随着大环境的复苏，压抑了好久的躁动的心已经忍耐不住了。是的，我就是想出国旅游了&amp;hellip;&amp;hellip;
本篇文章写于 2022 年 12 月的日本旅游后的经验总结分享，主要关于一些实际旅行体验中前期攻略没有覆盖到的点，希望能给后来的人提供更多的信息。
通用经验分享 办理签证 首先要想出国旅游，必先解决签证的问题。而旅行签证从便利角度主要可以分为四类：免签、落地签、异地签和本地签。
免签：这个非常好理解，只要持有中国护照，即可免办理签证入境特定的国家。 落地签：根据两个国家签订的双边协议，允许双方公民在入境的时候再办理旅游地国家的签证。 本地签：这里指的是大部分情况下的签证，需要提前办理，获得许可后再前往旅游地入境。 关于旅游地是否对中国公民提供免签和落地签的便利，可以在网上很容易就能搜索得到。
而旅行签证还有一项主要是给在境外留学和工作的人员提供的便利，使得当地的居民可以不用特意回到祖国居住地就能在当地办理旅游地的签证——这里用「异地签」来指代。以我的情况举例，VFS GLOBAL 是日本驻香港总領事馆的官方合作机构，允许中国国籍（持有中国护照）的香港居民（非香港永久居民）在香港办理日本签证，而不用专门先回一趟内地办理签证再出发日本旅游。这对于目前还没通关的情况下，显得更加的便利。
同样的，对于在欧美日新等地工作或留学的朋友们，可以自行了解一下是否有相关的机构提供同等的服务。世界这么大，好好去看看。
制定旅行计划 有了准许入境的签证，下一步就是需要制定一个适合自己的旅行计划了。
目前网络上不少的文章和视频在大力推荐使用 Notion、Google Map、Apple Map 等地图软件和笔记软件来制定旅行计划，最终的效果看起来很精美也很赏心悦目，但是实际操作起来我发现有以下的痛点：
信息比较散落，对手机小屏幕相对不够友好。 Notion 中记录的景点，无法分辨它们在城市的哪个角落。 软件联动上需要花费更大的精力。 因此，我最终没有选择这些流行的软件做旅行计划，反而转向一个非常小众的服务「穷游行程助手」。
「穷游行程助手」同时提供了 Web 和手机两个客户端，因此在 Web 端编辑和在手机端浏览都能获得舒服的体验。Web 端的操作逻辑很线性，能够在一个软件中完成整个旅游的宏观计划。
规划日期。首先穷游行程助手在最左侧提供了按日期作为分类的功能，十分契合我们做规划时的思维。同时，也可以将景点一键转移到另一天中，平衡一下使得每天的行程不至于太密集。
挑选景点。我个人不太喜欢看很多的旅游攻略，因为这样可能会被「剧透」从而失去遇见美好的机会，而穷游行程助手帮我规避了这个问题。我会在右侧「游玩」的选项卡中挑选合适的景点，查看「必去」「评分」「游玩时间」「简介」「门票价格」「开放时间」等信息，已然满足了筛选所需要的资料。只需要一键就能添加进当日的行程。
优化景点。另一个杀手功能是能够一键切换地图模式，直观地看到各个景点在城市中的分布。如果是太远的景点，可以酌情删掉。然后可以通过拖动景点的先后顺序，调整出一个线性的，通勤时间更短的方案，避免 S 型、Z 型等路线图。最后尽量让预估的当日行程时间保留在「适中」的程度。
整理完成后，手机端能够非常快捷地查看下一个游玩的景点以及它的关键信息。
旅行记账 记账本来是一件困难的事情，因为要每天都重复没有终点，且记账后也没有一个具体的目标到底能得到什么，容易导致动力不足。但旅行记账是一个例外，因为旅行花费是一个专项支出，且一般大家都希望看到这次旅行的总开销，因此也就有了动力去做记账这一件事情。
对于出国旅行记账的软件来说，比较重要的功能有以下三点：
支持多币种记账 支持多人协同记账 支持他人代记账 我前前后后试用了几款，最终选择下来还是「Spend Together」最趁手。
「Spend Together」的界面十分整洁干净，且无需注册账户即可通过链接邀请小伙伴加入账本，这一点就能打败很多的竞争对手。除了上述的三个必要的功能外，Spend Together 还可以自定义分类项目，自定义单笔消费的多人分别支出和债务。
若论不足，大概就是全功能需要内购解锁了。内购功能主要是两个以上的账本，自定义汇率，花费报表统计，很多优秀的旅行记账 app 都将这几个功能作为了付费功能。但良心的是，Spend Together 提供了 7 天的内购功能试用，你可以在前期使用免费功能正常记账，然后在旅行结束后开启试用查看不同的支出类别分布。
日本经验分享 上网卡 出去境外旅游，我们一定至少需要一张能顺畅高速上网的手机卡，这样才比较有安全感。在 2022 年的今天，连接互联网我们有了更多的选择。
购买旅游 SIM 卡。传统的方法当然是预先购买一张上网用的手机卡，淘宝或一些旅游网站上都会有销售，通过快递寄到你的手上。如果你实在是忘记了提前购买也不用担心，在境外的航班上一般也会售卖，你只需要拿起座位上的菜单浏览一下，觉得价格合适，就可以当场示意工作人员表达购买意愿。</description></item><item><title>以 iCloud 共享图库为基础，打造我的照片管理工作流</title><link>https://blog.wsine.top/posts/manage-photos-with-icloud-shared-library/</link><pubDate>Wed, 23 Nov 2022 00:00:00 +0000</pubDate><guid>https://blog.wsine.top/posts/manage-photos-with-icloud-shared-library/</guid><description>以 iCloud 共享图库为基础，打造我的照片管理工作流 这篇文章主要来聊聊 iOS 16.1 后我的照片管理工作流的一些变化，我觉得 iCloud 图库的易用性得到了空前的提升，因此特此来分享一下它解决我的哪些痛点，同时也为不少还在观望的同学扫除一下迷雾。
先说一下背景，我日常的主要拍照场景还是和女朋友一起出去游玩的时候用相机拍照。对于照片管理最大的需求就是易于导入 iCloud，且易于分享给对象。但不要小看这个简单的场景，在 iOS 16.1 之前的工作流还是有很多的妥协。
导入照片到苹果设备 众所周知，iOS / iPadOS 的设备都没有真正的跨 app 通用文件系统，因此很多人会先入为主地认为如果要导入照片到苹果设备的图库中，如果没有 mac 电脑操作起来会很困难。但其实不然。在 iOS 12 的版本之后苹果公司给照片 app 增加了「导入」的功能，这个功能可以让其直接读取外接设备，然后扫描其中的照片，等待用户的筛选和导入。
我使用的苹果设备主要是 iPad Pro 2018 ，因此很幸运地获得了一个极为先进的 type-C 接口，这给我的操作带来了不少地便利。由于相机主要是将照片存储在 SD 卡中，因此我们需要一个 SD 卡的读卡器。我日常使用的是绿联的 type-A 和 type-C 双接口的读卡器。假如你的 iPad 没有 type-C 接口，使用 lightening 转 USB 的转换器也是可以的。
「导入」功能以设备为划分依据且提供了简单的按照片的日期分组排序的功能，而这恰巧也是我们出去游玩的时候分组的重要依据。「导入」提供了「导入全部」的功能，它会自动记住哪些照片之前已经被导入到照片 app 了，哪怕你又把那些照片删除了。
由于我使用的是富士相机，偶尔会有一些测试滤镜用的废片，因此我一般不用这个导入全部的功能。我会按日期手动选择那一天的照片，然后新建一个「相簿」，直接将选择的照片导入到新建的相簿。这样，从相机到 iCloud 图库到过程就完成了。
完善照片的 Exif 信息 对于单张的照片管理，我们最关心的是照片的 Exif 信息，Exif 信息越是完整，我们搜索/筛选/分组照片就更是得心应手。对于相机拍摄的照片，一般情况下只有相机相关的信息，例如相机型号、镜头型号、光圈快门 ISO 这类信息。对于比较新的相机机型，也会有相对一定的时间信息，但由于更换电池等操作且没有联网同步时间的功能，实际记录下来的时间并不一定是准确的。
但是好在照片 app 都提供了批量更新的操作来修改照片的 Exif 信息。</description></item><item><title>安装 WSL2 到非系统盘</title><link>https://blog.wsine.top/posts/install-wsl2-to-non-system-drive/</link><pubDate>Fri, 22 Jul 2022 00:00:00 +0000</pubDate><guid>https://blog.wsine.top/posts/install-wsl2-to-non-system-drive/</guid><description>安装 WSL2 到非系统盘 在上一篇关于 WSL 新功能的文章的评论中，有读者提到了安装 WSL 到非系统盘是一件困难的事情。
在 Windows 系统的默认情况下，WSL2 会被安装到系统盘中。现在系统盘大多为固态硬盘，存储空间比较珍贵；而 WSL2 基于虚拟机实现，跨系统访问数据盘文件读写速度缓慢。如果你的电脑环境 C 盘空间并不大，又有需求高度使用 Linux 环境，那么将 WSL2 安装到非系统盘是一个必不可少的步骤。
但是，对于安装 WSL1 到数据盘的方法现在已不可用了。本文分析旧方法的不可行的原因，并对于 WSL2 的迁移整理了新的方法。
WSL1 的方法不兼容 WSL2 WSL 经历了两个大版本，分别称为 WSL1 和 WSL2。前者是通过兼容层方式转译系统调用，而后者通过虚拟机的方式运行完整的 Linux 内核。
网络上原有的安装 WSL1 到非系统盘的方法对于 WSL2 来说已不可行，简单总结一下：
手动下载 Linux 发行版安装包，通过改后缀为 zip 自行解压后运行发行版的 exe 文件。
使用 LxRunOffline 工具将方法一自动化处理。
Caption - 图解方法一：此方法已不可行，见下图
当你完成下载，改名和解压后，你会发现压缩包里面递归嵌套了很多层 appx 的文件，而且没有任何一个 exe 文件。该方法在 WSL1 中可行，因为会产生对应的 ubuntu.exe 这样的入口程序。根据网上的教程，当你运行 ubuntu.exe 这个程序后会进行 ubuntu 设置用户名和密码的初始化，然后产生一个 rootfs 的文件夹存储着 Linux 的根系统文件树。</description></item><item><title>WSL 的三块新拼图，这就是为师的完全体</title><link>https://blog.wsine.top/posts/wsl-three-pieces-of-puzzle/</link><pubDate>Fri, 08 Jul 2022 00:00:00 +0000</pubDate><guid>https://blog.wsine.top/posts/wsl-three-pieces-of-puzzle/</guid><description>WSL 的三块新拼图，这就是为师的完全体 Windows Subsystem for Linux（WSL）是微软在 Windows 平台下支持 Linux 环境的子系统，一经推出便受到各大开发者的青睐。少数派平台上也有很多篇 WSL 相关的文章：
不用装双系统，直接在 Windows 上体验 Linux：Windows Subsystem for Linux
💡 在 Windows 上用 WSL 开发的操作体验指北
想安装更多 Linux 发行版？LxRunOffline 让 WSL 更好用
如果你也是一名深度学习科研人员，科研圈里的新文章大部分都是基于 Linux 环境的科研实验，而我们日常使用的电脑却是 Windows 平台。而普通的 Linux 虚拟机又无法访问显卡以获得深度学习加速。另一方面，有部分的科研实验开源了他们的 toolkit，但是却是使用 Linux 桌面环境开发的，在 Linux 服务器上也无法使用。
现在，随着时间的推移，WSL 不断迎来了它的功能增强，分别是 WSL2，NVIDIA CUDA on WSL，和 WSLg。它们各自解决了 WSL 在上述场景下不同的开发难题。「Microsoft loves Linux」
本篇文章就是一个教程指导安装和配置 WSL 使其能够使用上上述的新功能。
第二代 WSL 完整的 Linux 体验 主要区别 WSL 目前有两个主要版本，分别称为 WSL1 和 WSL2。它们最大的不同是，WSL1 是基于动态翻译的方式将 Linux 的系统调用翻译为 Windows NT（Windows 操作系统的内核）的系统调用，而 WSL2 是基于虚拟机的，在 Windows 主系统之上创建完整的 Linux 内核。</description></item><item><title>无密码认证的新方式之通行密钥</title><link>https://blog.wsine.top/posts/login-with-passkeys-but-without-password/</link><pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate><guid>https://blog.wsine.top/posts/login-with-passkeys-but-without-password/</guid><description>无密码认证的新方式 —— 通行密钥 记忆密码总是一件痛苦的事情，对于绝大多数不使用密码管理器的人来说「一个密码走天下」是密码问题上最佳的解决方案了。但一个密码到处用总会带来各式各样的安全问题，比如：这个密码因为其他问题导致了外泄，那么所有的账户都会受到威胁。
为了解决这个情况，日常登录网站和应用程序要你两步验证，比如 SMS 短信验证码、邮箱验证码或是基于时间的一次性密钥等方式加强安全性。从我们日常使用来看，等验证码这个步骤反而可能是整个登陆流程里最麻烦的一件事。
Apple 在 WWDC 2022 中向开发者介绍了「通行密钥（Passkeys） 」这项新的「希望可以替代密码」的新技术，并期望通过这项新技术来解决上面的问题。
看到这里，你可能会担心 Apple 的新技术别的互联网公司可能并不会采纳。但事实上通行密钥是通用技术标准 WebAuthn 下的一个关键技术，不仅可以简化登录的流程，还可以提高安全性和增加跨设备授权登录的功能。只不过 Apple 在今年 WWDC 上高调地宣布了而已，微软、Google 等大公司也已经宣布将支持这项 FIDO Standard 技术标准。
那通行密钥是如何替代密码进行身份验证的，Passkeys 能完全取代你的密码吗？本篇文章就来带领大家一探究竟。
通行密钥是如何工作的？ 目前完整支持通行密钥的应用程序还不多，但我们可以从 WWDC 后续面向开发者的视频中窥探到通行密钥的使用方式。登录界面中只需要用户提供用户名（User name）这一信息，然后点击登录按钮，最后完成生物认证便能完成登录。使用通行密钥整个过程，就和我们目前使用 iCloud 钥匙串或是支持自动填充的密码管理器一样自然、直观。
在传统登录环节中由短信验证码、两步验证器所扮演的身份验证功能，也将由通行密钥代劳；尽管 通行密钥和登录密码的功能存在差异，但在整个注册和登录的过程中无需我们主动创建、记忆或输入密码。这种一键登录、几乎不会增加学习和使用成本的身份验证机制，显然也要比我们现阶段主要使用的大部分身份验证方式更加无感。
用非对称加密证明「你是你」 不过通行密钥并不是什么新鲜的玩意，它其实是密码学中「非对称加密」在登录认证中的一种应用。
单个通行密钥由一对密钥组成，分别是公钥（Public key）和私钥（Private key）。
我们可以把公钥类比于带「防盗」锁的传统信箱，把私钥类比于信箱的锁的钥匙。邮递员投递的信件就是我们要加密的信息，通过投递到信箱中加密起来，然后也只有信箱的主人才有钥匙能够打开信箱读取信件的内容。如果一个人手上没有钥匙，那就需要用暴力开防盗锁，整个过程不仅耗时耗力，最后也往往没办法打开那把防盗锁。
与之对应的，如果某些内容被公钥加密了，则该内容能且仅能被私钥解密，非对称加密的可靠性正来源于此——若无私钥，在有限的算力和有限的时间内我们一般无法完成极大整数的因数分解；如果加密内容能被解密，则说明对方拥有私钥。
非对称加密的这种唯一对应性，显然是非常适合用于登录认证的。
以 WWDC 中的例子进一步展开说明，在用户完成第一次登录以后，服务端和用户终端分别持有由用户终端生成的公钥和私钥。如果这时用户再需要登录，用户将用户名发送给服务器以后，服务器用用户名对应的公钥创建一个「口令（challenge）」发送给用户终端，放到上面的例子里就是邮件投递到了用户的传统信箱里；用户这时可以使用私钥解答该「口令」并将对应的「答案（solution）」再发送给服务端，放到上面的例子里就是用户取出了这份邮件并根据这份邮件给发信人返回了一个正确的信件。如此，服务端便能通过比对答案是否正确从而验证终端是否为公钥的主人了。当然，上述的通讯过程都是通过 HTTPS 加密的。
所以这也是为什么通行密钥可以替代各种形式的验证码进行身份验证。
服务端如何获得用户的公钥？ 细心的同学可能会疑惑，上述过程中的假设是如何成立的？换句话说，服务端最初是如何获得公钥并与我们手里的私钥产生对应关系的？
目前，从 WWDC 的视频和 Google 开发者文档中的信息来看，我们需要先行通过传统的密码方式注册一个账号，然后再绑定通行密钥到该账号中。
在完成用密码的登录过程后，账户设置里面会有选项添加通行密钥，且通行密钥完全由用户终端生成、需要经过终端的生物认证，然后公钥上传到服务端，私钥保存在钥匙串里。这样就完成了用户名和通行密钥信息的绑定。
这里打个不完全正确的比喻，和前面所说的一样公钥是传统邮箱的话，我们要向邮政公司提前登记「这个邮箱属于你」，提前登记的过程就是使用传统密码注册账户的过程。
通行密钥还有什么优点？ 作为一种用于用户身份认证的替代方案，通行密钥最直接的应用场景显然就是跨设备登录了。
上图就是很贴近生活的一个例子，在这类场景中，我们以往一般需要通过短信验证码或两步认证来确认登录者身份，国内比较常见的例子就是：微信登录电脑端时，需要通过已登录的手机进行扫码来完成身份验证。
而在通行密钥的应用场景中，当用户打算在一个陌生电脑上临时登录自己的账号的时候，也是可以通过手机扫码来安全地授权完成认证登录的。
同样是扫码行为，通行密钥不同的地方在于它可以脱离对具体服务端、客户端的依赖，变成一种纯粹的身份认证工具。因为它本质上是 FIDO 对通行密钥的扩展——客户端到认证器协议规范（Client to Authenticator Protocol，CTAP），也就是外部认证器通过中继网络（Relay Network）向用户的互联网接入设备局部传递认证证书——我们需要做的，就是通过设备上的生物信息验证机制将 Passkeys 认证结果传递给其他设备。</description></item><item><title>如何在 Linux 下装软件不求人</title><link>https://blog.wsine.top/posts/rootless-install-softwares-in-linux/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://blog.wsine.top/posts/rootless-install-softwares-in-linux/</guid><description>如何在 Linux 下装软件不求人 大部分人日常使用电脑一般都是 Windows 系统和 macOS 系统，不少人可能因为尝鲜或者工作学习需求需要使用 Linux。在我们日常使用 Linux 中，我们自己就是管理员，所以我们可以自由地安装任何软件，当然出了问题就需要自己解决；但是在大学实验室、企业公司中，Linux 常常会以服务器的形式进行部署，一台服务器也会由多个用户互相共享，因此需要有专人负责维护管理 Linux 服务器，这种情况下我们想要安装软件就需要由「管理员」审核和操作。
服务器的管理之所以安排管理员，是为了避免由于用户不了解或操作不小心误删了系统文件，以及安装奇怪的软件导致现有的软件运行不了了。在该审核流程下，普通用户没有办法修改系统相关的配置，因此大大提高了运行环境的稳定性。但是，这样的流程可能会造成以下的一些困难：
因为一些原因，管理员审核不肯通过。
管理员经验不够丰富，无法胜任高级一点的安装操作。
审核流程过长，影响工作进度。
由于版本冲突，无法满足特别的个人需求。
俗话说，求人不如求己。在 2022 年这一时间节点，有很多新的解决方案能够解决上述这类的问题，本文就是来探讨一些有哪些好的解决方案。
为什么安装软件需要管理员 Linux 下安装软件主流的方式都是通过系统自带的包管理器，如 apt、yum、pacman、dnf 等，安装系统官方仓库的软件，而这些命令都需要写入 /usr 系统路径，因此往往都需要管理员权限才能操作。
哪怕是一些新兴的包管理器，如 homebrew 和 nix， 也需要管理员权限才能创建特殊的路径用于安装软件，如 /home/homebrew 和 /nix 。前者虽然经过设置也能安装在用户 home 目录，但是因为背后需要使用 git 同步完整的仓库克隆以及缺少很多的预编译二进制可执行文件，因此最终也没能在 Linux 中流行起来。
可行的解决办法是什么 上述的问题是因为需要写入系统路径，而写入用户目录（/home/user）是不需要管理员权限的，因此只需要将软件所在的路径加入到 PATH 环境变量中，就可以实现在任意目录下运行目标软件，这其实就是我们平常所说的绿色软件，这也是我们解决方案的基石。
比如，我会在 .bashrc 配置文件中把 ~/.local/bin/ 加入到 PATH 环境变量中，且优先于原本 PATH 中的系统路径：
export PATH=&amp;#34;$HOME/.local/bin/:$PATH&amp;#34; 这样，系统在寻找软件的时候就会优先寻找我们用户目录下的软件执行，找不到了才去原本的系统路径下寻找，我们在自主安装软件的时候就不用受到现有软件的困扰。
另一方面可行的原因是由于新兴编程语言的崛起，如 Python、Nodejs、Golang、Rust 等，很多当下热门的工具软件是通过这些语言编写。前两者为解析型语言，后两者不约而同地在编译期偏向静态链接，这两个特性为我们后续在我们用户目录下安装使用他们提供了极大的方便，关于这一点我们会在下文中详细展开。
至于传统的 C/C++ 编写的软件，如今也有了更高级的沙盒机制和打包迁移方案，最大化地减少我们的主动编译麻烦，而且也有了社区级别的工具解决方案，对于暂时不能应用的 corner case ，社区会持续更新该工具使其有强大的生命力。
方案一：AppImage （推荐） AppImage 的 Slogan 是「让 Linux 应用随处运行」。他们有领先的 Linux 应用打包方式，能够让用户只下载一个应用程序（文件），赋予可执行权限，然后双击/命令回车即可运行。和传统安装方式的运行情况没有任何差异，但无需走传统的安装过程，也不需要产生对外依赖。主流的操作系统如 Ubuntu、Debian、Fedora、Arch 等都原生支持 AppImage。</description></item></channel></rss>