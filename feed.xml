<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wsine&#39;s blog</title>
    <link>https://blog.wsine.top/</link>
    <description>Recent content on Wsine&#39;s blog</description>
    <image>
      <url>https://blog.wsine.top/author.jpg</url>
      <link>https://blog.wsine.top/author.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright &amp;copy; 2019-Now &amp;middot; CC [BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
    <lastBuildDate>Wed, 15 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.wsine.top/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 Github Action 编译 Android 项目</title>
      <link>https://blog.wsine.top/posts/use-github-action-to-compile-android-project/</link>
      <pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/use-github-action-to-compile-android-project/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;和 Android 系统一样，很多 Android 应用也会选择将源码进行开放，一方面供开源社区对代码进行审查保证安全性，另一方面也能「集思广益」，经其它开发者之手发展、演变出更多有意思的代码分支和功能。&lt;/p&gt;
&lt;p&gt;更重要的是，因为源码人人可获取，当这些应用的商店版本（如 Play 商店）因为各种原因更新缓慢，或原始分支不再维护时，我们也可以直接绕过商店、借助源码编译「原汁原味」的最新版本。&lt;/p&gt;
&lt;p&gt;本文就为大家介绍一种相对简单、能够自给自足的 Android 应用编译方法。&lt;/p&gt;
&lt;h2 id=&#34;编译-android-项目所需工具&#34;&gt;编译 Android 项目所需工具&lt;/h2&gt;
&lt;p&gt;要想编译 Android 项目，首先我们就先来看看项目源码的一般目录结构，了解我们需要一些什么样的编译工具。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/e290608b0930f14d4801fd8aaa7341fb.png&#34; alt=&#34;image-20211216205520582&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;**编程语言：**2021 年 Android 项目主要支持的编程语言是 Java 和 Kotlin。两者语言都是运行在 JVM 环境中，都需要各自的编译器 javac 和 kotlinc 把源码编译为 JVM 的字节码。&lt;/p&gt;
&lt;p&gt;**包管理器：**Android 项目常见的包管理器是 Gradle，它负责管理和下载项目的第三方依赖，并且构建出可安装运行的 Android 安装包 (apk)。&lt;/p&gt;
&lt;p&gt;**开发套件：**开发套件在图中是一个隐藏的依赖 —— Android SDK 。在大部分的平台架构上开发 GUI 程序，基本绕不开平台的 SDK。&lt;/p&gt;
&lt;p&gt;至此，我们了解清楚了我们所需要的工具，那么下一个问题就是从哪里获取这些工具。&lt;/p&gt;
&lt;h2 id=&#34;传统方法的弊端&#34;&gt;传统方法的弊端&lt;/h2&gt;
&lt;p&gt;传统的办法编译 Android 项目是下载 Android Studio 集成开发环境，作为一个 IDE 它包含了上述所需要的全部的工具，但是它也有以下的弊端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从 Android Studio 下载指定的 Android SDK 版本也还需要一定的步骤&lt;/li&gt;
&lt;li&gt;Android Studio 自带的 Java 版本较新，不一定能编译通过旧代码&lt;/li&gt;
&lt;li&gt;Gradle 下载依赖的时候由于服务器在外网，需要一些特殊的技巧&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些都是我认为对于小白用户来说比较困难的地方，因此我并不推荐使用大家只是为了构建 APK 就下载 Android Studio 折腾一番。&lt;/p&gt;
&lt;h2 id=&#34;巧用-github-action-构建&#34;&gt;巧用 Github Action 构建&lt;/h2&gt;
&lt;p&gt;我个人比较推荐 Github Action ，它有两个重要且十分合适我们场景的特点，这里也提供一个实例展示如何使用。&lt;/p&gt;
&lt;h3 id=&#34;为什么选择-github-action&#34;&gt;为什么选择 Github Action&lt;/h3&gt;
&lt;p&gt;**开箱即用的环境。**从 Github 官方的&lt;a href=&#34;https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md&#34;&gt;虚拟环境仓库&lt;/a&gt;可以看到，Ubuntu 20.04 的环境中自带了 Java 11，Kotlin 1.6.0，Gradle 7.3，和 Android SDK 的常用版本。相比上面的传统方法，Ubuntu 这套环境其实已经解决了很多编译环境问题了，且合适大部分的 Android 项目的构建，如果遇到不满足的地方，下面也有方法告诉你怎么轻易地解决。&lt;/p&gt;
&lt;p&gt;**足够的免费配额。**Github Action 对于免费的账户也是有&lt;a href=&#34;https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions&#34;&gt;一定的限制&lt;/a&gt;的，具体表现在：每个仓库的构建产物限制是 500MB，每个月的运行时长是 2000 分钟。对于我们只是构建一个普通的 Android 项目安装包来说，也够用了，运行时长也是绰绰有余。&lt;/p&gt;
&lt;h3 id=&#34;如何使用-github-action&#34;&gt;如何使用 Github Action&lt;/h3&gt;
&lt;p&gt;下面就通过实战来看看如何方便快捷地用 Github Action 来构建一个开源 Android 项目的 APK 安装包吧。我这里选择的是 &lt;a href=&#34;https://github.com/FolioReader/FolioReader-Android&#34;&gt;FolioReader&lt;/a&gt;，一个 Java 编写的 ePub 阅读器，在 Github 上开源并获得 2k ⭐。&lt;/p&gt;
&lt;p&gt;这里是我编写的 Github Action 运行的配置文件并开源在 &lt;a href=&#34;https://github.com/Wsine/android_builder/blob/main/.github/workflows/build.yaml&#34;&gt;Wsine/android_builder&lt;/a&gt;，我会详细地说明一下每个步骤都做了什么。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;android_build&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;on&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;workflow_dispatch&lt;/span&gt;:

&lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;build&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;runs-on&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Checkout the code&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/checkout@v2&lt;/span&gt;
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Set up JDK&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/setup-java@v1&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;java-version&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1.8&lt;/span&gt;
      - &lt;span style=&#34;color:#f92672&#34;&gt;id&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;get-project&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Get project name&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;echo &amp;#34;::set-output name=PROJECT::$(cat project-to-build)&amp;#34;&lt;/span&gt;
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Clone project&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;git clone --depth=1 ${{ steps.get-project.outputs.PROJECT }} project&lt;/span&gt;
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Build the app&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;working-directory&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;./project&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          if [ ! -f &amp;#34;gradlew&amp;#34; ]; then gradle wrapper; fi
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          chmod +x gradlew
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          ./gradlew assembleDebug --stacktrace&lt;/span&gt;          
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Upload APK&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/upload-artifact@v2&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-build-apk&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;./**/*.apk&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个 Workflow 的触发条件设置为手动触发，因为还需要一些修改才能满足目标 Android 项目的构建条件，因此没有设置为常规的基于文件改动就触发。虚拟环境这里我使用的是 &lt;code&gt;ubuntu-latest&lt;/code&gt;，在此时就是指向 Ubuntu 20.04 这个 LTS 版本，日常开发中可能不建议使用这种不确定的版本，但在我们的场景中还是毕竟合适的，因为一个还在维护的 Android 项目一般都会适配较新的 LTS 版本的。&lt;/p&gt;
&lt;p&gt;Workflow 中的第一步是拉取 android_builder 的源代码，主要目的是获取 project-to-build 这份文件，里面包含了我们的目标 Android 项目的 Github 地址。在我们这个实战中就是 &lt;a href=&#34;https://github.com/FolioReader/FolioReader-Android&#34;&gt;https://github.com/FolioReader/FolioReader-Android&lt;/a&gt; 这个地址，如需编译其它的项目，把该地址替换为其相应的 Github 地址即可。&lt;/p&gt;
&lt;p&gt;第二步是设置运行环境，这里是重点。一般情况下，Android 项目中的 Java 代码语法需要一定的 Java 编译器版本，因此我这里引入了 &lt;a href=&#34;https://github.com/actions/setup-java&#34;&gt;actions/setup-java&lt;/a&gt; 这个 action 来快捷地设置 Java 的版本，如这里我使用了 1.8 版本（Java 8）覆盖环境中自带的 Java 11 版本。同样地，设置 Gradle 和 Android SDK 也有快捷的 action 可以复用，分别为 &lt;a href=&#34;https://github.com/gradle/gradle-build-action&#34;&gt;gradle/gradle-build-action&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/android-actions/setup-android&#34;&gt;android-actions/setup-android&lt;/a&gt;。Github 官方的 Ubuntu 20.04 的环境中自带的版本已经是比较高的版本了，一般情况下程序都有后向兼容，所以大部分的情况下你其实可以完全不用设置。这里仅是一个例子来展示如何轻松地修改版本。&lt;/p&gt;
&lt;p&gt;第三步的目标是从 project-to-build 这份文件中读取 Android 项目的开源地址并传递给下一步进行拉取Android 项目源码。注意，目标 Android 项目要开源并且是处于公开的状态。&lt;code&gt;cat project-to-build &lt;/code&gt;可以读取这份文件包含的地址，然后通过 Github Action 中特殊的语法 &lt;code&gt;::set-output name=PROJECT::XXX&lt;/code&gt;设置地址为该步骤的输出。&lt;/p&gt;
&lt;p&gt;第四步是拉取目标 Android 项目源码到虚拟环境中准备编译。首先通过 &lt;code&gt;${{ steps.get-project.outputs.PROJECT }}&lt;/code&gt; 获取上一步的输出地址，然后用 Git 命令克隆 Android 项目源码到虚拟环境的本地中。至此，编译前的准备工作已完成。&lt;/p&gt;
&lt;p&gt;第五步是构建 APK 的关键步骤，这里假设目标 Android 项目是已经能够编译通过的了。gradlew 是 Gradle 包管理工具自己产生的一个 bash 脚本，用于命令行环境下的自动构建，绝大部分的开源项目已经包含了该文件，因此我加了个判断，如果不存在该文件则用 Gradle 生成出来，并赋予执行权限。得益于优秀的包管理器，Android 项目下只需要一句命令即可构建出 APK 安装包——&lt;code&gt;./gradlew assembleDebug --stacktrace&lt;/code&gt;，该命令用于构建调试版 APK，调试版本已满足个人的使用，折腾应用签名就没有必要了。后面的 &lt;code&gt;stacktrace&lt;/code&gt; 参数只是为了显示更多的运行信息。执行完这步， APK 就已经生成好了。&lt;/p&gt;
&lt;p&gt;最后一步，把生成的 APK 文件打包上传到 Github Action 的网页端，方便下载。你也可以上&lt;a href=&#34;https://github.com/Wsine/android_builder/actions/runs/1561922173&#34;&gt;这里&lt;/a&gt;看看我构建的 APK 输出，最后会得到一个 zip 压缩包，包含了最终生成的 APK 文件。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/f4dcff2a76b6651ef4674ba2fd4a0a9a.png&#34; alt=&#34;image-20211216205539491&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;整个构建过程只需要 2m 47s，就得到了我们的 APK 文件，其中包含了下载全部依赖库和从零开始编译两个过程，相比自己下载到本地编译从运行速度和网速两个角度来说，整个过程就显得非常快了。然后就可以把 APK 文件传输到自己的手机，在设置中打开「允许安装未知来源应用」的选项，就能够顺利安装到手机中。&lt;/p&gt;
&lt;h3 id=&#34;如何复刻该-workflow&#34;&gt;如何复刻该 Workflow&lt;/h3&gt;
&lt;p&gt;首先 fork 一下 &lt;a href=&#34;https://github.com/Wsine/android_builder&#34;&gt;Wsine/android_builder&lt;/a&gt; 这个仓库，根据上面第三步的操作，修改 project-to-build 这个文件改为你需要编译的 Android 项目的 Github 地址，然后如下图所示点击，即可运行该 Workflow。运行完毕后点开 Workflow 在 Summary 的选项卡中找到 Artifacts，即可下载带 APK 的压缩包。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/0fab346b98a0a2cf789043791c138135.png&#34; alt=&#34;image-20211216205547944&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/9b5cd9a75a22a8a35a94466a98e9b9a8.png&#34; alt=&#34;image-20211216205555364&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;感谢 Github Action，让我们的生活更加的简单快捷。现在就开始上手试试吧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>balena：你的树莓派的强力后援</title>
      <link>https://blog.wsine.top/posts/your-raspberry-pi-housekeeper/</link>
      <pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/your-raspberry-pi-housekeeper/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;树莓派是一个小巧的设备，由英国树莓派基金会开发的微型单板，设计的目标是以低价硬件和自由软件促进学校的基本计算机科学教学。麻雀虽小，树莓派本身也是一个五脏俱全的计算机，并且提供通用的 USB 接口、RJ45 网口以及 GPIO 排针接口予以扩展。且由于其较低的售价，受到了各种人群的喜欢。&lt;/p&gt;
&lt;p&gt;但是，并不是喜欢树莓派的所有人都有计算机科学的背景，相当大一部分小白都在通过关注极客玩家们的教程，一步一步跟着教程操作来复刻他们做出来的东西。可是，尽管有了教程的帮助，小白在实际操作的过程中也还是会遇到很多失败的情况且不知道如何独立解决。&lt;/p&gt;
&lt;p&gt;所以我打算向大家介绍 Balena 这个一站式的解决方案。&lt;/p&gt;
&lt;h2 id=&#34;balena-完整的生态&#34;&gt;Balena： 完整的生态&lt;/h2&gt;
&lt;p&gt;Balena 是一套完整用于开发、部署、管理 IOT 设备，并提供了云用于连接这些 IOT 设备们的工具和服务。它包括了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;balenaEngine 是一个为嵌入式设备优化的运行引擎，等同于 Docker 的存在，但胜在软件体积更小，需要传输的镜像层更小，内存占用也更少。&lt;/li&gt;
&lt;li&gt;balenaOS 是一个极简的 Linux 系统，不同于 Raspberry Pi OS，仅包含了 balenaEngine 以及一些必要的系统组件，使得硬件资源能够被最大化目标软件的使用，但借助 Balena 的其他服务，又可以很轻松的部署我们想要的工具。。&lt;/li&gt;
&lt;li&gt;balenaHub 是一个类似 Github 的地方，开发者把软件装载进 balenaOS 中并发布到这里，用户可以从这里免费下载已经打包好的「系统镜像」。&lt;/li&gt;
&lt;li&gt;balenaEtcher 是一个开源跨平台的系统镜像烧录工具，有精美易用的 UI 界面，可以把上述系统镜像烧录到 tf 卡中，然后插入树莓派直接开始使用。&lt;/li&gt;
&lt;li&gt;balenaFin 一个建立于树莓派计算模块之上的开发板，有更好的存储和电源扩展等。&lt;/li&gt;
&lt;li&gt;balenaCloud 就是承载了上述的开发交互界面，包括打包镜像、管理设备的云端等功能，balenaCloud 我们后面展开细说。&lt;/li&gt;
&lt;li&gt;openbalena 则是 balenaCloud 的开源版本，如果不信任由 Balena 这家商业公司提供的云，那么就可以考虑自己部署云端，不过只支持单用户，也没有 Web UI。后者在 Github 上有第三方的开源版本可以使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从该生态版图可见，Balena 基本包含了嵌入式开发中的所有环节，哪怕你会说没有树莓派，都给你考虑到了。&lt;/p&gt;
&lt;p&gt;Balena 服务的定价策略比较良心，对于个人用户来说，前 10 个设备使用 balenaCloud 都是全功能且免费的，基本上普通的用户也不会超过 10 个 IOT 设备需要连接云吧。后续的服务收费档位主要是根据设备的数量来决定的。&lt;/p&gt;
&lt;p&gt;对于上述的小白用户来说，最有价值的莫过于 balenaHub 这个大仓库，可以直接下载极客玩家们开发打包好的应用程序的系统镜像，然后烧录到自己的树莓派中即可享用。&lt;/p&gt;
&lt;h2 id=&#34;balenahub-airplay-服务器&#34;&gt;balenaHub： Airplay 服务器&lt;/h2&gt;
&lt;p&gt;下面我将以 &lt;a href=&#34;https://hub.balena.io/gh_rahul_thakoor/balena-rpiplay&#34;&gt;balena-rpiplay&lt;/a&gt; 项目作为案例在树莓派进行部署，让大家可以清晰直观的看到项目部署的流程有多简单。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/rahul-thakoor/balena-rpiplay&#34;&gt;balena-rpiplay&lt;/a&gt; 可以把你的树莓派变成 Airplay Server，用户把苹果设备的屏幕镜像串流到树莓派上，而树莓派则通过 HDMI 连接电视/显示器/投影仪，部署了这个项目以后算是 Apple TV 盒子中 Airplay 功能的平替。&lt;/p&gt;
&lt;p&gt;balena-rpiplay 项目包含了 &lt;a href=&#34;https://github.com/FD-/RPiPlay&#34;&gt;RPiPlay &lt;/a&gt;项目，后者的安装原本需要你手动安装 cmake 包管理器、一堆 C 语言的依赖库、OpenMAX 库和客户端。直接在 Raspberry Pi OS 安装时需要从源码开始构建软件，对于没有 Linux 基础的普通玩家来说，整个部署流程十分硬核且枯燥。但是如果进入 &lt;a href=&#34;https://github.com/rahul-thakoor/balena-rpiplay&#34;&gt;balena-rpiplay&lt;/a&gt; 的项目主页看，里面没有一行实体代码，只有简单的配置文件描述，整个过程被大幅度地简化了。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/b2ec202be31ff854264ccdde268bb665.png&#34; alt=&#34;image-20211216203458740&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;那么实际部署流程是怎么样的呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先在 balenaHub 找到 &lt;a href=&#34;https://hub.balena.io/gh_rahul_thakoor/balena-rpiplay&#34;&gt;balena-rpiplay&lt;/a&gt; ，点击图中的 Get started 按钮。&lt;/li&gt;
&lt;li&gt;在弹出界面选择自己的树莓派版本。&lt;/li&gt;
&lt;li&gt;输入自己家的 WiFi 连接方式（SSID 和密码），也可以选择用网线连接。&lt;/li&gt;
&lt;li&gt;下载镜像，通过 balenaEtcher 刷入到 tf 卡中，并插入到树莓派中。&lt;/li&gt;
&lt;li&gt;(可选) 对于没有自带 WiFi 模块的树莓派 （2代及以下），需要自备 WiFi 适配器。&lt;/li&gt;
&lt;li&gt;然后通电，静待几分钟，就拥有了自己的 Airplay 服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/5fcad0b590ea46075ed321d7cbe2ba64.png&#34; alt=&#34;image-20211216203548715&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;整个过程不需要用户用终端配置任何的东西，最麻烦的步骤仅是烧录系统到 tf 卡中。烧录镜像到树莓派的步骤，可以参考这篇文章：&lt;a href=&#34;https://sspai.com/post/66938&#34;&gt;《从选购到入手：树莓派零基础入坑指南》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/cacb0cff9c2fb87f1e2d7ce5f64e637b.png&#34; alt=&#34;image-20211216203605818&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;整个部署上没有手动输入命令，修改配置文件的体验，背后多亏 balenaCloud 的帮助。当你烧录好系统的时候，它的软件架构是上图这个样子的。当你第一次给硬件通电的时候，首先如同绝大多数 Linux 发行版一样，systemd 作为第一个守护进程启动，并带起 NetworkManager 通过预设的 WiFi 信息连接你家里的网络，另一方面唤醒并守护你安装的容器，完成整个工作流程。&lt;/p&gt;
&lt;p&gt;而从用户的角度来看，整个过程就像是通了电就能自动完成安装 Airplay Server 一样，最后只需要拿出的苹果设备搜索并连接上该树莓派就可以进行投屏了。&lt;/p&gt;
&lt;h2 id=&#34;balenacloud你的-iot-管家&#34;&gt;balenaCloud：你的 IOT 管家&lt;/h2&gt;
&lt;p&gt;细心的同学可能还会发现，图中还有一个抓眼球的 Device Supervisor Container (DSC)，它一方面跟云端的 balenaCloud 进行通讯，一方面也在本地网络广播自己的存在，使得整个开发部署管理流程有了更多的可能。根据我自己的经验，我会从几个痛点聊聊 balena 是如何帮助开发者更好地解决 DevOps 的问题的。&lt;/p&gt;
&lt;h3 id=&#34;开发&#34;&gt;开发&lt;/h3&gt;
&lt;p&gt;当要利用树莓派进行开发的时候，我们首先遇到的问题就是「如何交互」。一般来说，在树莓派上开发，你需要准备一个键盘、一个鼠标、一个显示器以及一根 HDMI 线，才能满足基本的开发要求。&lt;/p&gt;
&lt;p&gt;虽然新的 Raspberry Pi OS 系统版本支持了通过 txt 配置 WiFi 连接和启动 sshd 服务，让你可以通过无线 ssh 直接操作终端命令行。但是你又会发现缺少顺手的开发工具、必要的运行时等，等把这些又千辛万苦地安装好后，相信你的热情已经被消磨了一大半了。&lt;/p&gt;
&lt;p&gt;DSC 是帮助开发者解决这个问题的关键。首先，balena 提供了 balenaOS base 镜像给用户烧录到 tf 卡中，启动它，DSC 会不断广播自己的存在。然后，用户在自己熟悉的 PC/Laptop 中安装 balena 这个 client 软件，通过 &lt;code&gt;sudo balena scan&lt;/code&gt; 命令即可搜索到自己的树莓派的 ip 地址。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-Plain%20Text&#34; data-lang=&#34;Plain%20Text&#34;&gt;Reporting scan results
-
  host:          63ec46c.local
  address:       192.168.86.45
  dockerInfo:
    Containers:        1
    ContainersRunning: 1
    ContainersPaused:  0
    ContainersStopped: 0
    Images:            4
    Driver:            aufs
    SystemTime:        2020-01-09T21:17:11.703029598Z
    KernelVersion:     4.19.71
    OperatingSystem:   balenaOS 2.43.0+rev1
    Architecture:      armv7l
  dockerVersion:
    Version:    18.09.8-dev
    ApiVersion: 1.39
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;假设你已经在 PC/Laptop 开发并测试好了软件和应用，下一步需要的就是验证在树莓派上也可运行。那只需要一行命令 &lt;code&gt;balena push 63ec46c.local&lt;/code&gt; 即可把当前项目的信息一键发送到树莓派中，DSC 负责接收并自动执行构建和运行，所有的命令行输出会回传到自己的 PC/Laptop 中，查看并解决可能的错误，大大减轻了需要反复查看日志的繁琐过程。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-Plain%20Text&#34; data-lang=&#34;Plain%20Text&#34;&gt;[Info]    Starting build on device 63ec46c.local
[Info]    Creating default composition with source: .
[Build]   [main] Step 1/9 : FROM balenalib/raspberrypi3-node:10-stretch-run
[Build]   [main]  ---&amp;gt; 383e163cf46d
...
[Build]   [main] Successfully built 88065a1a3f00
[Build]   [main] Successfully tagged local_image_main:latest

[Info]    Streaming device logs...
...
[Logs]    [1/9/2020, 1:47:03 PM] [main] &amp;gt; node server.js
[Logs]    [1/9/2020, 1:47:03 PM] [main]
[Logs]    [1/9/2020, 1:47:04 PM] [main] Example app listening on port  80
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;部署&#34;&gt;部署&lt;/h3&gt;
&lt;p&gt;到了真正需要部署的时候，一个比较麻烦的事情是，给不同的硬件适配性地打包。回想我们给树莓派开发部署好的软件和应用，由于只有一张 tf 卡且暂时要把树莓派挪作他用，等到想回顾这个应用或者重新玩一下的时候，又需要重头再来折腾。&lt;/p&gt;
&lt;p&gt;balena 帮助开发者把这件事情放到了 balenaCloud 中执行。开发者只需要编写一份 balena.yml 文件描述一些必要的信息，比如支持的硬件如树莓派 1、2、3、4 等，项目名称等展示在 balenaHub 中。通过输入 &lt;code&gt;balena deploy&lt;/code&gt; 命令，即可把项目信息发送给 balenaCloud 然后构建出所有描述中支持的硬件的系统镜像。当然，必要的 &lt;code&gt;balena login&lt;/code&gt; 步骤还是需要的。&lt;/p&gt;
&lt;p&gt;只需要开发完成，并上传到 balenaHub 以后，想要重温重温以前的美好随时都可以在 balenaHub 中下载回来这个镜像，只需要做烧录的步骤就可以了。&lt;/p&gt;
&lt;h3 id=&#34;管理&#34;&gt;管理&lt;/h3&gt;
&lt;p&gt;管理的需求因人而异，但是对我而言曾经遇到的问题似乎都覆盖到了。balenaCloud 提供了 Web 界面友好地让用户查看自己的设备信息，并实现交互。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/fbd296221b5168fd787ff1797f4832c7.png&#34; alt=&#34;image-20211216203624607&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;**设备状态查看。**有的时候自己编写的软件稳定性不够高，总会发生一些奇奇怪怪的事情，比方说：连不上自己的服务了。这时我们可以 balenaHub 里 Logs 的位置查看服务在命令行的输出，它还支持 Filter 功能方便我们进行筛选分析。通过输出，我们可以查看软件遇到了什么问题，甚至在 Terminal 界面进行交互，相当于提供了远程 SSH 内网穿透。一个机器多个服务的情况下，也可以友好地切换。&lt;/p&gt;
&lt;p&gt;**远程重启 / 关机。**如果实在是不知道出了什么问题，万能的重启大法总没错，面板上的 Restart 按钮可以重启特定的服务，Reboot 可以重启整个机器。&lt;/p&gt;
&lt;p&gt;**更新软件。**如果你 debug 能力比较强，在修复 bug 以后，通过 &lt;code&gt;balena deploy&lt;/code&gt; 重新推送新的版本，DSC 会根据系统镜像下载页面中的高级配置项「自动检查更新间隔」来定期自动更新软件。当然，急于用上修复后的版本，也可以通过 Web 界面手动触发更新。&lt;/p&gt;
&lt;p&gt;**公网访问。**在我们的日常网络中，由于 IPv4 地址的耗尽，一般情况下已经基本没有家用带宽能获得公网地址了。balena 提供了内网穿透服务，如图中的 PUBLIC DEVICE URL，启用该功能即可通过旁边箭头按钮跳转访问服务，不过当你服务比较多的时候要自己手动加端口号。&lt;/p&gt;
&lt;p&gt;以上，就是我在探索 balena 生态时发现的好功能，着实是惊艳了我一番，后续如果有更好玩实用的用法我会再继续分享。感谢阅读。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>我的失物解决方案</title>
      <link>https://blog.wsine.top/posts/my-lost-labeling-solution/</link>
      <pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/my-lost-labeling-solution/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;今年暑假，我买了一个小的运动相机，Insta 360 Go 2，它的身材很小巧，整体设计也很像 Airpods. 包括它容易丢失的特性T^T. 是的，我弄丢了充电盒，并且需要再花 500+ 大洋才能再买一个充电盒，使得相机本体不浪费。从我身边的经验来看，也有不少的人丢失了小物品，今天就打算来聊聊我的思考。&lt;/p&gt;
&lt;p&gt;当然，现在 AirTag 非常实用方便，但我想探讨的是一种平价的方案，毕竟 AirTag 也不便宜。具体效果请看动图。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/7d338200da5a5051e3f5acb200a37f79.gif&#34; alt=&#34;Picture2&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;人之初性本善&#34;&gt;人之初性本善&lt;/h3&gt;
&lt;p&gt;其实设身处地地思考，如果是我们拾到了失物，我们一般会怎么做？&lt;/p&gt;
&lt;p&gt;如果是我自己的话，在学校，我会交给失物招领中心，饭堂的小卖部，或者保安室之类的地方。如果在景点景区的话，会交给附近的小商店，或者交给景区的游客中心。所以以己度人，一般人是不会贪心据为己有的，但是最重要的问题其实是，他人拾取了之后也不知道如何能够还给到失主。&lt;/p&gt;
&lt;p&gt;所以下一个问题其实是如何把自己的联系信息和失物绑定？&lt;/p&gt;
&lt;h3 id=&#34;万物都能二维码&#34;&gt;万物都能二维码&lt;/h3&gt;
&lt;p&gt;二维码是一种目前广泛使用的编码方式，它可以存储很多有用的信息。&lt;/p&gt;
&lt;p&gt;但是，一般常见的二维码中编码的都是一串 URL (&lt;em&gt;Uniform Resource Locator&lt;/em&gt;) 信息，URL 可能是我们常见的网址，e.g., &lt;a href=&#34;https://sspai.com&#34;&gt;https://sspai.com&lt;/a&gt;，也可能是调用 app 某一特定入口的定位符，比如 iOS 系统的 url scheme，e.g., sspai://home . 但是这种编码内容的二维码，最终都依托于互联网或外部来存储和提供内容，一旦服务器出现了问题，可能相应的内容就再也访问不了了。因此，我觉得它并不可靠。&lt;/p&gt;
&lt;p&gt;但但是，二维码本身是支持很多种内建的信息，并且有对应的触发动作。普通的文本，展示一段文本，常见于贺卡上；WiFi 上网信息，扫码快速连接 wifi；手机号码，扫码拨打电话；短信文本，扫码快速发送短信；邮件信息，扫码快速发送邮件。以及，最适合我们这里场景的，联系人信息，扫码添加联系人，一般可以放置于名片上。&lt;/p&gt;
&lt;p&gt;那么，我们就来制作我们的失物联系人二维码吧。&lt;/p&gt;
&lt;p&gt;我选择的二维码在线制作网站是：https://cn.online-qrcode-generator.com/ ，它是免费的，并且网站十分美观，还有很多可以美化二维码选项。&lt;/p&gt;
&lt;p&gt;然后在联系卡的 Tab 上，填上自己的信息，我这里选填了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;姓名：填写昵称 or X先生 or Y小姐 即可&lt;/li&gt;
&lt;li&gt;手机：正常填写即可&lt;/li&gt;
&lt;li&gt;电子邮箱：一般我也会留一个邮箱&lt;/li&gt;
&lt;li&gt;Note：我会在这一栏填写一些感谢的话语&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在生成选项上，如果是可能失物比较小，我会选择纠错等级为最低，这样二维码的编码点是最少的，即使缩小了也能看清。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/8b2026842bf03fc44ad1a05e48a73325.png&#34; alt=&#34;image-20211216204811967&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;这样，一个能够离线并且编码了自己的二维码信息就得到了。接下来的问题是，如何把这个二维码和失物联系起来了。&lt;/p&gt;
&lt;h3 id=&#34;贴纸制作&#34;&gt;贴纸制作&lt;/h3&gt;
&lt;p&gt;一个很直接的解决方案是，贴纸。如果能把这个二维码贴在物品上，那么它们就是最好的捆绑方式了。&lt;/p&gt;
&lt;p&gt;淘宝上对这类需求的现成的解决方案是「标签机」。它也很方便，通过手机 app 打印对应的图案，然后贴在目标位置。但是，它也有不足。其一，它的标签纸的大小会被标签机所限定，你不能根据失物大小来自由调整；其二，标签机的纸耗材也挺贵的，更不用说标签机本体。&lt;/p&gt;
&lt;p&gt;综合搜索下来，我发现了一款很便宜的耗材「A4不干胶打印纸」。它有两种类型，光面和哑面材质，分别对应激光打印机和喷墨打印机。使用我们平时常见的打印机即可打印，然后裁剪成自己想要的大小或形状。&lt;/p&gt;
&lt;p&gt;这里有个小技巧，如果你不确定打印的大小，可以先打印在一个普通的A4纸上确定好最终大小，再打印在可粘贴A4纸上。&lt;/p&gt;
&lt;p&gt;最终效果展示，这里的图片已被我处理，应该是扫不出来的了~这里的小二维码也是蛮搭的，不算太大的违和感，其实也可以贴在看不见的相机背后。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/83ac96e2a5676d4173e4fead43c25be7.png&#34; alt=&#34;image-20211216204828979&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;至此，所有的工作就算完成了。希望大家都不会丢失东西啦，如果丢失也能找回，这是最大的希冀了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>修复 Zotero 和 Papership 的联动</title>
      <link>https://blog.wsine.top/posts/how-to-fix-connection-between-zotero-and-papership/</link>
      <pubDate>Mon, 08 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/how-to-fix-connection-between-zotero-and-papership/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zotero.org&#34;&gt;Zotero&lt;/a&gt; 作为一款开源文献管理工具，受到了很多科研工作者的喜爱，尤其是它能够安装插件以增强软件本身的功能。另一方面，&lt;a href=&#34;https://www.papershipapp.com&#34;&gt;Papership&lt;/a&gt; 作为 iOS 及 iPadOS 上目前唯一与之适配的客户端，支持双向同步，综合体验十分出色。&lt;/p&gt;
&lt;p&gt;然而，随着 Zotero 的不断更新以及 Papership 的年久失修，它们之间的友谊出现了小小的问题，困扰着很多现有用户。我遍寻网络资源，虽然找到了一些解决方案，但我觉得不够优雅，因此提出一套自己的解决方案，以供有类似需求的读者们参考。&lt;/p&gt;
&lt;h3 id=&#34;zotero-和-papership-之间的问题在哪&#34;&gt;Zotero 和 Papership 之间的问题在哪&lt;/h3&gt;
&lt;p&gt;在探讨解决方案之前，我们先来聊聊前文提到的问题具体在哪。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://forums.zotero.org/discussion/64967/cant-access-webdav-files-from-papership-or-zotero-org&#34;&gt;https://forums.zotero.org/discussion/64967/cant-access-webdav-files-from-papership-or-zotero-org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Zotero 本身作为开源工具并不收费，但是免费的文件存储空间只提供 300M 的空间，对于大量阅读 PDF 文献的小伙伴来说，很快就会把这部分的配额给消耗殆尽。如果要进一步购买空间 2G 档位，则需要支付每年 20 美元的费用，对学生党来说有点高。但是好在 Zotero 允许外挂 WebDAV 来存放文件，十分良心，所以不少用户都选择以这种方式同步文献。&lt;/p&gt;
&lt;p&gt;而 Papership 则是一个支持 Zotero 的第三方客户端，它可以直接登录 Zotero 账号以获取文献库中所有文献的 metadata 的信息，然后通过 WebDAV 链接直接访问文件，最终实现与 Zotero 的完美联动。&lt;/p&gt;
&lt;p&gt;Papership 唯一额外要求的一点是需要将一个特殊的文本文件 lastsync.txt 放置在 WebDAV 的同步目录内，Papership 在同步文件时会优先检查这个文件，如果发现本地的文件变动时间没有比 lastsync.txt 存储的最后变动文件更新，则采取「懒同步」的方式——也就是不同步。&lt;/p&gt;
&lt;p&gt;问题就出在 Papership 的同步机制上。随着 Zotero 的更新，不知道出于何种原因，Zotero 在同步 WebDAV 文件的时候会主动删除 lastsync.txt。这个机制让 Papership 失去了「懒同步」的参照系，导致在 Papership 中阅读和标注的内容无法更新到云端，Zotero 的文件变动也无法同步至 Papership。&lt;/p&gt;
&lt;p&gt;更麻烦的是，Papership 已被确认被 Elsevier 公司收购了，而 Elsevier 旗下有自己的文献管理工具 Mendeley。收购完成后，Papership 的开发重点也转向了母公司的产品，甚至可能不会再修复和 Zotero 相关的 bug。与此同时，Zotero 也在开发自己的 iOS 客户端，beta 版发布至今仍未支持 WebDAV 同步。在各方原因和背景之下，夹在中间的用户们只好自行寻求解决方案。&lt;/p&gt;
&lt;h3 id=&#34;当前网上流行的解决方案&#34;&gt;当前网上流行的解决方案&lt;/h3&gt;
&lt;p&gt;目前，网络社群中解决该问题的主要方案是放弃 Papership，使用 Zotero 的插件来解决文件同步的问题。&lt;/p&gt;
&lt;p&gt;Zotero 中有一个很多人都会安装的插件「zotfile」，它有一个功能可以把待阅读批注的文献发送到平板电脑上，然后等到在平板端阅读和标注后，再取回到整体的文献库中。它背后的工作原理是这样子的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将待阅读标注文献复制到另一个文件夹&lt;/li&gt;
&lt;li&gt;该文件夹依靠第三方云存储进行同步（如 OneDrive、坚果云等）&lt;/li&gt;
&lt;li&gt;在 Android 设备或 iPad 上用自己喜欢的批注工具阅读（如 PDF Expert 等）&lt;/li&gt;
&lt;li&gt;将该文献从同步文件夹中移动并替换文献库的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/b57bf92e3d21defae1565bf50e2bb715.png&#34; alt=&#34;image-20211216210137802&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;其中，发送和取回两个动作都需要手动操作，因此，从整体的联动性来说，我觉得是不够方便的。而且由于没有自动双向同步，将文献从 A 集合移动到 B 集合，它对应的存储位置不会改变，这对于我习惯使用 Inbox 来消化文章的用户来说，极大地不方便。&lt;/p&gt;
&lt;h3 id=&#34;如果没有就创造&#34;&gt;如果没有就创造&lt;/h3&gt;
&lt;p&gt;既然现有的解决方案不满意，那就创造自己的解决方案。&lt;/p&gt;
&lt;p&gt;通过上文的讨论，我们知道整个问题的关键在于 lastsync.txt 文件身上，如何存储和恢复该文件就成了该解决方案的关键。同样地，我通过查询英文资料得知，哪怕只创建空白的 lastsync.txt ，也能激活 Papership，让它启动正确的同步机制。&lt;/p&gt;
&lt;p&gt;手动创建 lastsync.txt 是一件很麻烦的事情，但是如今比较流行的 serverless 的技术却能够很好地帮助我们自动化完成这一目标。不少的 serverless 服务都是以 web 作为入口，且使用这些服务或需要绑定信用卡或需要备案，比较麻烦，因此我最终选择了 Github Actions 作为本次的自动化工具。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注：serverless 是一种功能即服务（Function-as-a-Service），它也需要服务器运行，但分离了网页和数据库，仅保留运算部分对外提供服务。&lt;/li&gt;
&lt;li&gt;注：如果你还不会使用 Github Actions，可以参考阮一峰大神的教程，简单易懂。https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于目标比较简单，因此两行简单的 bash 命令就可以完成核心的目标。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;touch lastsync.txt
curl -u &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;WEBDAV_EMAIL&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;WEBDAV_DAVPASS&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; -T lastsync.txt https://your/webdav/url/zotero/lastsync.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这两行的意思分别是：创建空白的 lastsync.txt 文件，上传到 WebDAV 的指定路径上。其中，&lt;code&gt;${WEBDAV_EMAIL}&lt;/code&gt; 是你的 WebDAV 的登录账号或邮箱，&lt;code&gt;${WEBDAV_DAVPASS}&lt;/code&gt; 是你 WebDAV 的应用密码。&lt;/p&gt;
&lt;p&gt;然后只需要在 GitHub 的任意一个仓库中（可新建），在 &lt;code&gt;.github/workflows/webdav_lastsync.yml&lt;/code&gt;&lt;a href=&#34;https://github.com/Wsine/actions/tree/main/.github/workflows&#34;&gt; &lt;/a&gt;路径下放入这两行代码即可，具体的文件模板我都给大家创建好了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;webdav_lastsync&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;on&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;schedule&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;cron&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0 4,16 * * *&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;workflow_dispatch&lt;/span&gt;:

&lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;fix&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;runs-on&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ubuntu-18.04&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Fix&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          export SYNCFILE=&amp;#34;lastsync.txt&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          export REMOTEFILE=&amp;#34;https://app.koofr.net/dav/Koofr/zotero/${SYNCFILE}&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          touch ${SYNCFILE}
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          curl -u ${KOOFR_EMAIL}:${KOOFR_DAVPASS} -T ${SYNCFILE} ${REMOTEFILE}&lt;/span&gt;          
        &lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;KOOFR_EMAIL&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ secrets.KOOFR_EMAIL }}&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;KOOFR_DAVPASS&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ secrets.KOOFR_DAVPASS }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该文件也是我放在 Github 中的实际文件，以一个具体的例子供大家参考，记得修改为自己的字段。&lt;/p&gt;
&lt;p&gt;该 workflow 会在北京时间的每天 12 点和 0 点自动运行一遍，我觉得已经能满足我日常的同步需求了，我并不需要完全的实时同步。如果你希望增加同步的频率，在第 5 行中的 &lt;code&gt;4,16&lt;/code&gt; 处增加你想同步的整点时间即可。值得注意的是，这里的时间是以格林威治时间为标准的，换算为北京时间（UTC+8）时，需要将你的目标时间倒推 8 小时。&lt;/p&gt;
&lt;p&gt;创建完该 workflow 后，别忘了在 GitHub 的 settings -&amp;gt; secrets 中添加你的登录邮箱和应用密码字段。接下来，GitHub Actions 就会依照你设定好的时间，自动生成 lastsync.txt 并同步至你的 WebDAV 目录，Papership 只要识别到该文件，也会保持同步状态啦。&lt;/p&gt;
&lt;p&gt;该解决方案已正确运行一周，解决了我的巨大的痛点，仅以此文献给有需要的小伙伴。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>科研邮箱的常用用法</title>
      <link>https://blog.wsine.top/posts/my-favourite-usage-of-email-in-research/</link>
      <pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/my-favourite-usage-of-email-in-research/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;9月份，有新同学进入了大学走进知识的殿堂，有新的学者进入了科研的队伍拓展知识的尽头，也有新的毕业生进入了企业实现自己的人生目标。邮箱是在学习和工作中必不可少的一个工具之一，本篇就是通过科研作为切入口来聊聊邮箱的一些常见用法。&lt;/p&gt;
&lt;h3 id=&#34;让人知道这是你&#34;&gt;让人知道这是你&lt;/h3&gt;
&lt;p&gt;初来乍到一个新的科研机构（大部分情况下是学校），毫无疑问你会被分配一个邮箱地址来代表你在数字网络中属于这所学校的一个证明，同时它也是你对外和对内沟通的一个非常常用的桥梁，所以第一步就是应该让大家知道「这个邮箱地址」是你。&lt;/p&gt;
&lt;h5 id=&#34;弊端&#34;&gt;弊端&lt;/h5&gt;
&lt;p&gt;一般情况下，默认分配的邮箱地址形式都类似 &lt;code&gt;eid@xxx.edu.cn&lt;/code&gt;，其中，eid 是一个字符串，由某一算法针对个人信息唯一生成。常见的例子有，王小明 - wangxm3，陈大为 - u1234567，James Smith - jasmith-c 等等。&lt;/p&gt;
&lt;p&gt;但是，这些例子都有一个重要的弊端，就是只有这个 eid，没有办法感知这个是不是你。毕竟，王小明和王小民的 eid 是基本上没有辨识差异的。&lt;/p&gt;
&lt;h5 id=&#34;解决方案&#34;&gt;解决方案&lt;/h5&gt;
&lt;p&gt;这个问题可以通过&lt;strong&gt;设置别称&lt;/strong&gt;（Alias）来解决。一般情况下，科研机构都是购买企业邮箱服务，而市场上主流的企业邮箱服务供应商都是提供别称功能的，比如腾讯企业邮箱和 Office365。而这个设置学校会有提供专门的入口，如果没有，也可以电话/邮件咨询一下管理 IT 的部门（比如：信息管理中心）。&lt;/p&gt;
&lt;p&gt;以我们学校为例，通过搜索引擎就能搜索到设置的别称的专门入口， Email Alias Management 页面。填写上你想要的 Alias，然后静待数小时使服务器之间的数据同步完全生效，网页上也有相应的提示。至此，你发送出去的邮件都会显示这个别称（e.g.., &lt;a href=&#34;mailto:myalias@xxx.edu.cn&#34;&gt;myalias@xxx.edu.cn&lt;/a&gt;），别人也可以通过这个别称邮箱地址给你发邮件。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/a3d971d55ea86b2dfd106f13c6930ac7.png&#34; alt=&#34;image-20211216205815462&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;在科研用的邮箱地址中，我个人还是比较建议用中规中矩的常见格式，比如 &lt;a href=&#34;mailto:cswangxm@xxx.edu.cn&#34;&gt;cswangxm@xxx.edu.cn&lt;/a&gt; , &lt;a href=&#34;mailto:alex.wang@xxx.edu.cn&#34;&gt;alex.wang@xxx.edu.cn&lt;/a&gt; , etc&amp;hellip; 常规的形式也便于他人搜索到你，而且不容易产生有人问你这个名字是什么意思的情形。&lt;/p&gt;
&lt;h5 id=&#34;qa&#34;&gt;Q&amp;amp;A&lt;/h5&gt;
&lt;p&gt;问：我已经使用默认的邮箱地址有一段时间了，更改会不会有什么影响？&lt;/p&gt;
&lt;p&gt;别称（Alias）其实是相当于给自己同一个邮箱多一个地址，就像我们日常生活中有昵称一样，指代的还是同一个人。因此，无论别人给默认地址发送邮件还是给新别称地址发送邮件，你都能通过同一个邮箱接收到邮件。&lt;/p&gt;
&lt;p&gt;问：我已经使用默认的邮箱地址发表文章了，更改会不会认为是两个不同的作者？&lt;/p&gt;
&lt;p&gt;在现代的识别作者的方案中，一般使用 &lt;a href=&#34;https://orcid.org/&#34;&gt;ORCID&lt;/a&gt; (Open Researcher and Contributor ID) 系统来唯一记录同一个作者的贡献。它通过绑定你的邮箱地址到 ORCID 系统中来唯一确定一篇文献是由同一个作者贡献的。&lt;/p&gt;
&lt;p&gt;如果你还不清楚这个系统，那么很明显新增别称也不会影响到你，而我强烈建议你快去注册一下。如果已经有这个系统账号了，那么你只需要把新的邮箱地址也绑定到系统上即可。&lt;/p&gt;
&lt;h3 id=&#34;使用更好的系统&#34;&gt;使用更好的系统&lt;/h3&gt;
&lt;p&gt;除了邮箱地址之外，评判一个邮箱是否好用，更重要的是它的系统。科研机构选购的企业邮箱是已经固定了的（e.g., 腾讯企业邮箱），肯定是不能由我们来自由选择了。但是，腾讯邮箱这种历史悠久的系统，首先界面就很古老，近些年一些较新的功能是没有的（e.g., 语法检查），和其他的产品之间的联动也不足。&lt;/p&gt;
&lt;h5 id=&#34;解决方案-1&#34;&gt;解决方案&lt;/h5&gt;
&lt;p&gt;但是，我们可以通过&lt;strong&gt;邮件转发&lt;/strong&gt;（Forwarding）这样的功能来把邮件处理转移到你喜欢的邮箱系统上。感谢科研界，很多事情上都有比较大的自由度，在公司管理上可能很多都禁止对外部系统转发邮件，但是在学校里基本上没有这样的限制，大家可以自由地做选择。&lt;/p&gt;
&lt;p&gt;简单分享一下，我个人喜欢的邮箱系统是 Gmail。因为得益于 Google 是一个优秀的搜索引擎，本身积累了很多搜索的经验，Gmail 本身有效地检索出自己想要的信息，这一点是最吸引我的。Outlook 平台的搜索体验真的是非常差，默认检索会得到一大堆相关度很低的信息。但是这个从搜索历史邮件是一个非常高频的需求，因此我急切需要更好的系统来满足这个需求。&lt;/p&gt;
&lt;p&gt;邮件转发的设置也非常的简单，以 Outlook 邮箱为例，登录网页版，在右上角的小齿轮的设置界面里，找到 Forwarding 这个选项卡，Enable 然后填写上要转发的邮箱地址即可。这里建议也在原来的系统中保留一份邮件副本。整个设置过程非常简单。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/63d6b9c5ab3ea6a09ef39a31bb990db1.png&#34; alt=&#34;image-20211216205826733&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;但是，光是转发邮件是不够的，因为我们不仅需要接收邮件，我们还需要发送邮件或者回复邮件。在当前设置下，在被转发邮箱中收到邮件了直接回复，发件人会显示为被转发邮箱。这样从对方角度看很奇怪，我明明发送给的是A，怎么回复的是B。&lt;/p&gt;
&lt;h5 id=&#34;副作用解药&#34;&gt;副作用解药&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;邮件代理&lt;/strong&gt;（Proxy）可以解决这个问题，注意这个不是通用的名称，不同的邮件服务商有不同的叫法。它可以完美地解决上述的问题，通过授权 SMTP(&lt;em&gt;Simple Mail Transfer Protocol)&lt;/em&gt; 让你的目标邮箱系统可以使用原收件邮箱系统的发送功能。&lt;/p&gt;
&lt;p&gt;这里我还是使用 Gmail 为例子展示如何设置。也可以查看&lt;a href=&#34;https://support.google.com/mail/answer/22370?hl=zh-Hans&#34;&gt;这里&lt;/a&gt;的官方步骤。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开 Gmail 网页并登录&lt;/li&gt;
&lt;li&gt;点击右上角的设置齿轮图标&lt;/li&gt;
&lt;li&gt;点击账号和导入标签页&lt;/li&gt;
&lt;li&gt;选择这个地址发送邮件 -&amp;gt; 添加其他电子邮件地址&lt;/li&gt;
&lt;li&gt;输入发件人显示名称和原收件邮箱地址&lt;/li&gt;
&lt;li&gt;输入 SMTP 服务器及对应的账号用户名和密码&lt;/li&gt;
&lt;li&gt;添加账号并查看确认邮件点击其中的链接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后你可以在撰写新邮件的时候，选择合适的发件人，也可以把常用的那个设为默认发件人。&lt;/p&gt;
&lt;p&gt;在 QQ 邮箱中设置会有一些不一样。也可以查看&lt;a href=&#34;https://service.mail.qq.com/cgi-bin/help?id=26&#34;&gt;这里&lt;/a&gt;的官方步骤。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开 QQ 邮箱网页并登录&lt;/li&gt;
&lt;li&gt;点击左侧菜单栏的其他邮箱 -&amp;gt; 立即添加&lt;/li&gt;
&lt;li&gt;输入其他邮箱的帐号和密码&lt;/li&gt;
&lt;li&gt;在其他邮箱的账户设置 -&amp;gt; 发信设置 -&amp;gt; 选择通过其他邮箱的SMTP服务器发送&lt;/li&gt;
&lt;li&gt;查看确认邮件点击其中的链接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在QQ邮箱的其他邮箱的添加设置中，推荐“只收取最近一个星期/一个月的邮件”以减少同步时间，已经发生的邮件没必要都同步过来，也不会影响后续新邮件的使用。选择“通过其他邮箱的SMTP服务器发送”而不是“由QQ邮箱代发”，这样对方收到的邮件将不再出现“***代发”的字样，对方是无感的。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/ac8843a37b2126e790dbb2c6e59362ca.png&#34; alt=&#34;image-20211216205836316&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;至此，上面的邮件转发功能就达到了完美。你可以善用新系统更好的生态以提高生产力和工作效率。在认真学习和认真摸鱼中都能更方便和更高效喔。&lt;/p&gt;
&lt;h3 id=&#34;发送正确的消息&#34;&gt;发送正确的消息&lt;/h3&gt;
&lt;p&gt;我们确定了邮箱地址，找好自己喜欢的生态，下一步就是撰写一篇正确的邮件了。&lt;/p&gt;
&lt;h5 id=&#34;邮件标题&#34;&gt;邮件标题&lt;/h5&gt;
&lt;p&gt;首先我建议写的是邮件标题，而不是邮件收件人。因为日常中，我们很容易发生手抖的情况，不小心就把没有完成的邮件给发出去了，就很尴尬，但是如果还没填收件人，就有容错的机会。&lt;/p&gt;
&lt;p&gt;可能有人很纠结怎么起一个邮件的标题，邮件的标题比较常见有两种形式，一种是名词短语，另一种是动词短句。&lt;/p&gt;
&lt;p&gt;名词短语是最好理解的，因为你邮件的主题肯定会有一个关键的中心词，而这个中心词 + 拓展连词就能很好地代表这封邮件的标题，也更容易让人记忆搜索，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reminder of submission due&lt;/li&gt;
&lt;li&gt;Solution for Week 1 Execrise&lt;/li&gt;
&lt;li&gt;Review of the coursework&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;动词短句可以简单理解为祈使句，意味你对外发出的一个动作，比如你要发一个邮件咨询一下奖学金的事宜，比如你需要人手帮忙，等等：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Query about the scholarship&lt;/li&gt;
&lt;li&gt;Call for the volunteers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，实际场景肯定不只这些，比如你的心理咨询师会隔一段时间给你发个邮件，你的论文编辑会时不时给你发个广告，你的银行顾问整天想借钱给你。他们的邮件标题都比较 fancy，但掌握了入门的两种形式在日常的场景下是比较不容易出错的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How are you？&lt;/li&gt;
&lt;li&gt;Confusing on thesis writing? We are here!&lt;/li&gt;
&lt;li&gt;We are offering loan at xxx.com&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;邮件正文&#34;&gt;邮件正文&lt;/h5&gt;
&lt;p&gt;在学术交流中，总少不了要用英文跟会议/期刊编辑们询问和回复的时候，这时候就是考验自己的英文水平的时候了。&lt;/p&gt;
&lt;p&gt;但是，哪怕十分有自信，对于初学者还是建议用语法检查工具实时校验，这里我还是推荐广泛使用的的 &lt;a href=&#34;https://www.grammarly.com/plans&#34;&gt;Grammarly&lt;/a&gt; 软件，大家可能认知中觉得它是一个付费服务，但其实 Grammarly 的拼写检查、语法检查、标点检查三个功能都是完全免费的。&lt;/p&gt;
&lt;p&gt;在日常的邮件交流中，我们不需要写长篇大论去表达，基本都是短句和疑问句，因此这三个功能恰好满足了最基本的需求，而且免费，这点很重要。自信地发送，既减少了出糗的机会了，也能通过纠正的过程学会正确的表达。&lt;/p&gt;
&lt;p&gt;另外，掌握一些常用的缩写能显得你很 Native Speaker，但是千万不要滥用，不然要是增加了阅读困难被收件人反问一句什么意思而且是回复全部人的，那就真的是社死现场了。下面我简单列一下日常工作中常见的缩写，网上的缩写多如鸿毛，但是这部分信息足够应付高频场景了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FYI - for your information&lt;/li&gt;
&lt;li&gt;ASAP - as soon as possible&lt;/li&gt;
&lt;li&gt;BTW - by the way&lt;/li&gt;
&lt;li&gt;TL;DR - Too long; Didn&amp;rsquo;t read&lt;/li&gt;
&lt;li&gt;CC/BCC &lt;strong&gt;-&lt;/strong&gt; carbon copy / blind carbon copy&lt;/li&gt;
&lt;li&gt;P.S. - postscript&lt;/li&gt;
&lt;li&gt;AKA - as known as&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;邮件结尾&#34;&gt;邮件结尾&lt;/h5&gt;
&lt;p&gt;关于邮件结尾，我个人强烈建议手打签名，而不是使用邮件的自动签名功能，因为邮件内容的日常使用场景很不一样，你没有办法以一个签名解决所有。举个例子，日常使用 Regards 能应付大部分场景，但某一封邮件你对回复有更高的期望值，那么改用 Best regards 会有奇效，但前提是你没有日常滥用这个 best。同样地，请求帮助使用 Regards with thanks 而不是在正文里 thank you 显得更体面，毕竟人家还没答应帮你呢；在邀请别人的时候，使用 Sincerely 会显得十分地有礼貌。&lt;/p&gt;
&lt;p&gt;至于落款，一般情况下使用非官方的英文名都 ok （不在身份证上），但是注意遇到需要给对方提供信息查询的时候，别忘了署名完整的在系统上的名字，否则会增加别人的负担（而且容易不回你邮件）。&lt;/p&gt;
&lt;p&gt;最后，你可以添加收件人了。一般情况下，你期望收到回复的接收者放在收件人这一栏；你需要告知/知会的接收者放在抄送（cc）这一栏里，如果你希望发送邮件也出现在自己的收件箱，你可以把自己的邮箱地址放在这一栏；你不希望被看到的接收者放在密送（bcc）这一栏里，比如当你需要咨询某些学生为什么没交作业而又不想暴露对方姓名的时候，这个场景就很合适。&lt;/p&gt;
&lt;p&gt;最后的最后，别忘了检查附件，如有。这可是最高频的犯错了，别问我怎么知道。&lt;/p&gt;
&lt;h3 id=&#34;订阅优秀的信息&#34;&gt;订阅优秀的信息&lt;/h3&gt;
&lt;p&gt;解决了邮件的发送问题，然后就是邮件的接收功能了。除了日常了邮件交流，在科研中我们的目标一般都是发现问题，解决问题，总结问题三部曲。而这些信息，在传统的解决方案中，是通过 Newsletter 来解决的。&lt;/p&gt;
&lt;p&gt;你可以寻找你感兴趣的相关领域的会议和期刊的官网，然后寻找 Newsletter 相关的字眼，然后就可以输入自己的邮箱地址订阅相关的信息，一般的 Call for paper，Accepted papers 都会通过 Newsletter 告知订阅者，你可以在第一时间获取到最新的动态。&lt;/p&gt;
&lt;p&gt;这里我也推荐其中一个我很喜欢的 &lt;a href=&#34;https://icse.eu/startseite/newsletter/&#34;&gt;Newsletter&lt;/a&gt; - ICSE (THE INTERNATIONAL CENTRE FOR STEM EDUCATION)。这是一个面向 STEM(Science, Technology, Engineering, Mathematics) 的 Newsletter，也就是我们平常说的理工科。虽然没有很深入某一个特定的小领域，但是它能拓宽你的视界，因此也比较适合大部分人。&lt;/p&gt;
&lt;p&gt;但是如果订阅得多了，收件箱很容易被这些 Newsletter 淹没。我个人是喜欢使用「收件规则」来自动整理这些订阅的。因为 Newsletter 基本上只从固定的邮箱地址发出，因此增加收件规则能很好又准确地收纳这些订阅到分类文件夹，如果翻阅也能像阅读杂志一样一章一章阅读。&lt;/p&gt;
&lt;p&gt;好了，关于邮箱的使用，这里就聊了这些使用情况，如果有更好的用法，也欢迎跟我分享互相学习~&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 YADM 整理你的 dotfiles</title>
      <link>https://blog.wsine.top/posts/manage-your-dotfiles-with-yadm/</link>
      <pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/manage-your-dotfiles-with-yadm/</guid>
      <description>&lt;p&gt;说起收纳与整理，大家首先映入脑海中的应该都是家居收纳和书桌的整理。但是对于虚拟的东西是否也应该收纳与整理，一个干净的工作环境必定也能对工作有正面的帮助效果。&lt;/p&gt;
&lt;p&gt;在我的日常工作环境中，主要使用命令行相关的工具，不得不面对很多的配置文件来使工具的表现更符合自己的需求。这种配置文件一般以一个 &lt;code&gt;.&lt;/code&gt; 符号为前缀，所以被大家习惯性称为 dotfiles .&lt;/p&gt;
&lt;p&gt;对于 dotfiles，我们一般有如下的痛点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;配置文件太零散了&lt;/li&gt;
&lt;li&gt;配置文件无法同步&lt;/li&gt;
&lt;li&gt;配置文件在不同平台下面有部分不同&lt;/li&gt;
&lt;li&gt;软件需要载入配置文件&lt;/li&gt;
&lt;li&gt;部分信息既想同步又不想公开&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://yadm.io&#34;&gt;YADM&lt;/a&gt; 是一个比较新的管理器。在我的实际使用中，很好地解决了上述的痛点。我也不断摸索出自己的最佳实践，在这里分享给大家。&lt;/p&gt;
&lt;h2 id=&#34;用约束管理凌乱&#34;&gt;用约束管理凌乱&lt;/h2&gt;
&lt;p&gt;首先，如果文件没有办法按照一定的规则来存放，那么无论哪个软件管理器都只能是做掩埋，掩耳盗铃。&lt;/p&gt;
&lt;p&gt;我们来看一个例子，一个使用多年 Linux 的用户，它需要管理的配置文件到底有多乱。我就在 Github 搜索 dotfiles 找一个最高 star 的作为例子。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/8afff2990d81d862953c9acc087c1574.jpg&#34; alt=&#34;github-com-mathiasbynens-dotfiles&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;实际上它总共包含了29个文件在一级目录里面。当然平时都是隐藏的状态，但是你总是会因为需要查看文件权限，不小心被这堆「垃圾」压倒。&lt;/p&gt;
&lt;p&gt;为了避免被压倒，我们需要遵循规则，而这个规则就是 &lt;strong&gt;&lt;a href=&#34;https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html&#34;&gt;XDG Base Directory Specification&lt;/a&gt;&lt;/strong&gt; . 先来看一眼 XDG 官方的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Various specifications specify files and file formats. This specification defines where these files should be looked for by defining one or more base directories relative to which files should be located.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;XDG 给大家一份约束规范，约束了不同类型的文件的存放位置和命名规则，主要包括配置文件，缓存文件，数据文件等。它的提出能极大地改善上述配置文件太凌乱的情况，截止2021年5月，目前绝大部分的软件也已经跟进了这份规范。具体的支持情况可以看 Arch Wiki 上面的软件列表：https://wiki.archlinux.org/title/XDG_Base_Directory#Support&lt;/p&gt;
&lt;p&gt;XDG 主要定义了三个很必须的路径，它很好地告诉了你，哪些是配置文件应该保留，哪些是缓存当空间不够时可以勇敢地删除，软件依赖了哪些数据文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XDG_CONFIG_HOME
&lt;ul&gt;
&lt;li&gt;软件的配置文件存放位置&lt;/li&gt;
&lt;li&gt;默认：&lt;code&gt;$HOME/.config&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;XDG_CACHE_HOME
&lt;ul&gt;
&lt;li&gt;软件的缓存应该存放的位置&lt;/li&gt;
&lt;li&gt;默认：&lt;code&gt;$HOME/.cache&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;XDG_DATA_HOME
&lt;ul&gt;
&lt;li&gt;软件的依赖数据存放的位置&lt;/li&gt;
&lt;li&gt;默认：&lt;code&gt;$HOME/.local/share&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;XDG_CONFIG_HOME 就是我们这里需要定义约束的统一配置文件存放位置。&lt;/p&gt;
&lt;h5 id=&#34;实践一让不支持也变得支持&#34;&gt;实践一：让不支持也变得支持&lt;/h5&gt;
&lt;p&gt;一般来说，配置文件默认的在为 &lt;code&gt;~/.config/&amp;lt;software name&amp;gt;/&amp;lt;config file&amp;gt;&lt;/code&gt;，只有第一级目录前面有 &lt;code&gt;.&lt;/code&gt; 的前缀。以 neovim 为例，它的配置文件就是 &lt;code&gt;~/.config/nvim/init.vim&lt;/code&gt;. 你只需要保存这份文件，就可以在不同的机器上得到相同的软件行为。&lt;/p&gt;
&lt;p&gt;另一方面，对于那些还不在 support list 的软件，这里就需要小窍门了。&lt;/p&gt;
&lt;p&gt;技巧一：通过环境变量指定配置文件。以 npm 为例，可以设置 &lt;code&gt;export NPM_CONFIG_USERCONFIG=&amp;quot;$XDG_CONFIG_HOME/npm/npmrc&amp;quot;&lt;/code&gt; ，这样就可以设置 npm 安装 package 到 &lt;code&gt;$XDG_DATA_HOME/npm&lt;/code&gt; 下面，而不需要 sudo 权限。啊不是，就可以把配置文件放在 XDG_CONFIG_HOME 下面。&lt;/p&gt;
&lt;p&gt;技巧二：通过命令别名指定配置文件。以 tmux 为例，可以设置 &lt;code&gt;alias tmux=&amp;quot;tmux -f ~/.config/tmux/tmux.conf&amp;quot;&lt;/code&gt;， 这样启动 tmux 的时候就会使用XDG_CONFIG_HOME 下面的配置文件。&lt;/p&gt;
&lt;h2 id=&#34;云为先&#34;&gt;云为先&lt;/h2&gt;
&lt;p&gt;云存储在现在已经比较普及了，而 Github 就是 Linux 用户一般习惯存储 dotfiles 的地方。对于 yadm 这款新的管理器来说，它选择支持的就是 git 的协议。因此，理所当然的可以用 Github 作为云存储。也方便了分享自己的配置文件给别人，共同进步。&lt;/p&gt;
&lt;p&gt;git 协议要求整个仓库都在同一个文件夹下面，文件夹下面所有的文件都是潜在跟踪目标。但 yadm 改进了这一点，它会创建一个 barebones repository，只追踪用户主动添加的文件。相比老前辈 &lt;code&gt;GNU stow&lt;/code&gt; 依赖软链接来维护一个仓库目录，yadm 的做法更简洁干净。它很好地反映了你当前 Home 目录下的文件布局。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/cc32942feae46ac9e7cd4cb699677607.png&#34; alt=&#34;image-20210527213229208&#34;  /&gt;
&lt;/p&gt;
&lt;h5 id=&#34;实践二新增仓库和日常的维护更新工作&#34;&gt;实践二：新增仓库和日常的维护更新工作&lt;/h5&gt;
&lt;p&gt;它的使用方法很简单，把 git 命令替换成 yadm 命令即可，上手完全没有难度。同时，它也会使用你 git 配置好的 ssh key 。&lt;code&gt;yadm init/add/commit/push&lt;/code&gt;一套操作行云流水，就能轻易地把文件上传到 Github 中了。&lt;/p&gt;
&lt;p&gt;技巧三：快速添加所有修改。在传统 git 仓库中，我们可以通过 &lt;code&gt;git add .&lt;/code&gt;一次性添加文件夹下全部文件到暂存区。但是在 yadm 中，需要使用 &lt;code&gt;git add -u&lt;/code&gt; 来添加所有已经被追踪到文件。&lt;/p&gt;
&lt;p&gt;关于其他的使用方法，可以参考&lt;a href=&#34;https://yadm.io/docs/install&#34;&gt;官方手册&lt;/a&gt;，写得非常地详细。&lt;/p&gt;
&lt;h2 id=&#34;求同存异&#34;&gt;求同存异&lt;/h2&gt;
&lt;p&gt;在实际的使用中，我们往往会遇到不同的平台使用的配置文件不尽相同。但是又不希望那些小小的不同点对整体的管理产生太大的变化，比如额外管理两份不同的文件，每次手动修改等等。yadm 中有两个很实用的功能很好的解决了这个问题。&lt;/p&gt;
&lt;p&gt;技巧四：不同平台下安装同一个软件。举个栗子，安装 neovim 这个软件。在 Linux 下我习惯使用 AppImage 软件包，而在 macOS 下却只能使用传统的 tar 包解压。我可以创建两个文件 &lt;code&gt;install_neovim.sh##os.Linux&lt;/code&gt;和&lt;code&gt;install_neovim.sh##os.Darwin&lt;/code&gt;分别对应上述的两个平台，但是在相应的平台就会有软链接指向相应的文件，👍。&lt;/p&gt;
&lt;p&gt;技巧五：根据平台创建命令别名。如果说在 CLI 中 macOS 和 Linux 最大的不同，那就是一个是基于 BSD 的而后者基于 GNU，这使得命令的软件参数有很大的不同。这个问题可以创建 &lt;code&gt;aliases##template&lt;/code&gt;文件产生不同的别名。它能根据不同的平台生成不同内容的 &lt;code&gt;aliases&lt;/code&gt;文件，文件中的其余部分内容相同，👍。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ~/.config/zsh/aliases##template&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;% &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; yadm.os &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Darwin&amp;#34;&lt;/span&gt; %&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
alias ls&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ls -G&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;% &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; %&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
alias ls&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ls --color=auto --group-directories-first&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;% endif %&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
alias rm&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rm -i&amp;#34;&lt;/span&gt;
alias mv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mv -i&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;自动化&#34;&gt;自动化&lt;/h2&gt;
&lt;p&gt;如果说还有什么不足，那就是并不是有配置文件就行，还得有相应的软件，而一个一个安装软件实在是太麻烦了。能不能用一个脚本完成安装呢？&lt;/p&gt;
&lt;p&gt;技巧六：自动化安装软件。创建&lt;code&gt;~/.config/yadm/bootstrap&lt;/code&gt;文件，它可以是任意可执行文件，不过一般为 bash 脚本。把你想要自动化安装的软件写到里面，记得判断一下是否已安装避免重复执行。剩下的就是点火，“挞着佢”(bootstrap)&lt;/p&gt;
&lt;p&gt;技巧七：过滤仓库中不必要的文件。一般仓库都会放一个README来说明仓库的作用，但我们并不想把这个文件污染我们的 HOME 目录。那么你可以借助 sparse-checkout 来做这个过滤，把以下内容放到 &lt;code&gt;~/.config/yadm/hooks/post_clone&lt;/code&gt;中，当你克隆完仓库后它就会自动执行了。是的，yadm 支持钩子！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# remove yadm readme&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; ! -f &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;YADM_HOOK_REPO&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/info/sparse-checkout&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  yadm gitconfig core.sparseCheckout true
  cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; &amp;#34;${YADM_HOOK_REPO}/info/sparse-checkout&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;# Generated by $0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;!README.md
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;!UNLICENSE
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
  yadm checkout --quiet
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;实践三快速部署一台新机器&#34;&gt;实践三：快速部署一台新机器&lt;/h5&gt;
&lt;p&gt;思路也很简单，下载 yadm 并执行 &lt;code&gt;yadm clone &amp;lt;your url&amp;gt;&lt;/code&gt;，所有的配置文件就会被下载好，而且是可以根据不同的机器配置的。然后 post_clone 自动执行钩子，bootstrap 被调用，同时过滤掉不必要的文件。&lt;/p&gt;
&lt;p&gt;然后就真的就是一行命令部署了, awesome&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -fsSL https://git.io/JL3ZE | bash -s clone &amp;lt;your git url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里我把 yadm 提供的链接给缩短了，原始链接为 &lt;a href=&#34;https://github.com/TheLocehiliosan/yadm/raw/master/yadm&#34;&gt;https://github.com/TheLocehiliosan/yadm/raw/master/yadm&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;你的小秘密&#34;&gt;你的小秘密&lt;/h2&gt;
&lt;p&gt;但是 dotfiles 并不尽然都是配置文件，它也可以是一些别的重要的文件，比如你的 ssh key 等，这种文件我们并不想把它公开，因为它藏着我们的「秘密」。&lt;/p&gt;
&lt;p&gt;技巧八：加密你的秘密。yadm 支持使用 gpg 来加密你的文件，默认地它使用对称加密，也可以配置使用非对称加密。将 &lt;code&gt;.ssh/id_rsa&lt;/code&gt;添加到&lt;code&gt;~/.config/yadm/encrypt&lt;/code&gt;中，然后执行 &lt;code&gt;yadm encrypt&lt;/code&gt;，将生成的 &lt;code&gt;~/.local/share/yadm/archive&lt;/code&gt;和刚才的 encrypt 文件一起加入到 yadm 的跟踪列表中即可。&lt;/p&gt;
&lt;h5 id=&#34;实践四多机器共用-ssh-key&#34;&gt;实践四：多机器共用 SSH KEY&lt;/h5&gt;
&lt;p&gt;首先生成一对公钥和私钥，把公钥上传到自己 Github 账号的后台。然后把私钥用 yadm 加密管理，在不同的机器上都会同步好，只需要执行解密这个步骤就可以了。这样，你就可以把一份 ssh key 同步在你不同的机器上，而不用每次一台新机器都配置一遍 ssh，那个真的很麻烦喔。如果一旦泄露了，只需要把 Github 账号后台的公钥删掉就好，泄漏的私钥也没什么作用了。&lt;/p&gt;
&lt;p&gt;不过正如官方所建议的一般，我也强烈建议如果你使用这个功能，请务必使用私有仓库以减少风险。&lt;/p&gt;
&lt;p&gt;以上，就是我使用 yadm 作为 dotfiles 管理器的全部心得，如果有什么想交流的，欢迎在评论区留言～&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 Airtable 构建个人单词本</title>
      <link>https://blog.wsine.top/posts/airtable-as-personal-lexicon/</link>
      <pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/airtable-as-personal-lexicon/</guid>
      <description>&lt;p&gt;词到用时方恨少，这句话说的就是第一次写论文的时候的我。口语表达需要用到的词，真的比书面表达的词少很多。但是，在平时的论文阅读的过程中，总能发现一些「陌生词」，而这些陌生词往往用得非常的巧妙，在英语语境中，是更能precisely 地表达语义。我就是一直在思考这个问题，如何才能收藏起来以便以后为我所用呢？&lt;/p&gt;
&lt;p&gt;本文就是提出这么一个免费的解决方案，来帮助我们摘抄陌生词，形成自己的词典，并能方便地查看和温故。当然，我们的目标还是希望能够多平台覆盖和同步的，不然实用意义就变少了。&lt;/p&gt;
&lt;h2 id=&#34;airtable-as-a-database&#34;&gt;Airtable as a Database&lt;/h2&gt;
&lt;p&gt;首先要解决的第一个问题，就是如何把想要的单词摘抄并存储起来。这里，很多的单词翻译软件都有自己的单词本功能，但是同步功能基本上都是付费的功能。对我这种低频使用者而言，不太实惠。&lt;/p&gt;
&lt;p&gt;我考虑了使用在线表格作为后端的存储，Airtable 就是这个领域的佼佼者了，并且它提供的基于 HTTP 的 API 接口方便和其他的软件交互完成存储和访问，就非常地符合我们的需求。&lt;/p&gt;
&lt;p&gt;你需要做的准备有以下的几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;准备一个 Airtable 的账户，新建一个 Table，并将主 sheet 命名为 Main&lt;/li&gt;
&lt;li&gt;根据以下的 scheme 建立表头&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Name - Field Type
Query - Long text
Translation - Single line text
isWord - Check box
Explains - Long text
US-Phonetic - Single line text
UK-Phonetic - Single line text
Count - Number - Integer
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;最后，你需要获取 Airtable 相关的 API Token。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;访问 &lt;a href=&#34;https://airtable.com/api&#34;&gt;https://airtable.com/api&lt;/a&gt;，点击对应的 Table，选择左侧的 AUTHENTICATION，点击右上角的 show API key，你就能找到对应的 &lt;code&gt;&amp;lt;your table id&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;your app token&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/be43f6cae2b8bfe861c079839a5e484f.png&#34; alt=&#34;image-20210418170007299&#34;  /&gt;
&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;(可选) 在 Airtable 里增加 Gallery View，制作你自己的单词卡片，点击 Share View 可获取访问链接&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;youdao-as-a-translator&#34;&gt;Youdao as a Translator&lt;/h2&gt;
&lt;p&gt;当选择了「陌生词」后，我们需要做的是存储它原词的同时，存储其对应的中文翻译。当然，这个版本也可以离线完成，通过 Airtable Automation 或者 Serverless Function 可以做到。但是前者需要付费订阅 Pro，后者使得平台更复杂化了。后来实际考虑，其实这个也放在本地完成就是可以的，从某种程度上来说也更简单一些。&lt;/p&gt;
&lt;p&gt;首先，要做的获取有道智云 AI 开放平台的接口密钥。你需要访问：https://ai.youdao.com/doc.s#guide ，根据上述的指南注册开发者账号并获取密钥，上述官方有详细的图解步骤，我在这里就不重复了。关于价格，有道云文本翻译服务是48元/百万字符，每月调用量清零。换句话说，每月100万字符以下翻译免费，对于我们翻译几个单词来说，实在是绰绰有余。更详细的价格可以参考&lt;a href=&#34;https://ai.youdao.com/DOCSIRMA/html/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E7%BF%BB%E8%AF%91/%E4%BA%A7%E5%93%81%E5%AE%9A%E4%BB%B7/%E6%96%87%E6%9C%AC%E7%BF%BB%E8%AF%91%E6%9C%8D%E5%8A%A1/%E6%96%87%E6%9C%AC%E7%BF%BB%E8%AF%91%E6%9C%8D%E5%8A%A1-%E4%BA%A7%E5%93%81%E5%AE%9A%E4%BB%B7.html&#34;&gt;官方定价文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最终你获得的有两个关键的字符串：&lt;code&gt;&amp;lt;your app key&amp;gt;&lt;/code&gt; and &lt;code&gt;your app scret&lt;/code&gt;, 这里的 app 指的是有道智云 AI 开放平台上面的一个实例。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/4a795606d3a43f92ce84c18e620967ed.png&#34; alt=&#34;image-20210418163029079&#34;  /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;jsbox-as-a-client&#34;&gt;JSBox as a Client&lt;/h2&gt;
&lt;p&gt;好了，万事俱备，只欠东风。接下来，就是通过 HTTP 接口，把「陌生词」存储到 Airtable 中。&lt;/p&gt;
&lt;p&gt;这里，由于选择了本地调用有道云的接口，因此需要比较复杂的 JS 代码才能构建出 API 访问的参数，否则其实可以使用更轻量级的 捷径app 来完成这样的动作的。所以，我终于不得不选择 JSBox 作为 Client 调用接口。对于读者来说的好消息是，JSBox 免费下载且 1.x 版本的功能免费且我们只需要用到 1.x 版本的功能。对于我来说，我开发这个 workflow 专门买了JSBox，—_—&lt;/p&gt;
&lt;p&gt;关于调用的代码，我已经全部开源并放到这个 &lt;a href=&#34;https://gist.github.com/Wsine/4d68c4c0a06cc9219a79fc9d169b07ab&#34;&gt;Gist&lt;/a&gt; 里面了，文末我也放置了一份相同的作为附录，以便不方便访问 Gist 的读者们访问。&lt;/p&gt;
&lt;p&gt;在 JSBox 里面，选择 New Project，名称可以自定义，Type 选择 JSBox script 即可，把开源的代码粘贴到里面，并替换其中的对应的密钥即可。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;your app key&amp;gt; -&amp;gt; 你的有道云应用ID
&amp;lt;your app secret&amp;gt; -&amp;gt; 你的有道云应用密钥
&amp;lt;your table id&amp;gt; -&amp;gt; 你的Airtable的表格ID
&amp;lt;your app token&amp;gt; -&amp;gt; 你的Airtable的API Token
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了在调用菜单里简化一级跳转逻辑，我们还需要借助 捷径APP 调用 JSBox&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/4b9f5491dfbe2b491043598ba06d2a4f.jpeg&#34; alt=&#34;IMG_67ECF7225B1E-1&#34;  /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;workflow-demo&#34;&gt;Workflow Demo&lt;/h2&gt;
&lt;p&gt;由于我阅读论文的设备是 iPad，因此这里用 iPad 做个演示。在你喜欢的论文阅读软件中选中相应的单词/短语，通过系统分享菜单选择对应的捷径。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/73fbf90a6725cf9bb97918582be0d916.gif&#34; alt=&#34;ezgif-3-a15650ace542&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;对应的 Gallery View 的单词卡效果是这样子的，而且对响应式网站有适配，写论文的时候它给了我很大的帮助。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/2f2fd4042d29293dd78df86a9653b11c.png&#34; alt=&#34;image-20210418173436005&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;理论上，这个 worflow 也支持句子摘抄和翻译，新增一个 Gallery View 和 Filtering 就可以，只不过我没有这个需求而已。&lt;/p&gt;
&lt;p&gt;好了，以上就是全部的内容。感谢阅读。&lt;/p&gt;
&lt;h2 id=&#34;附录&#34;&gt;附录&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/Wsine/4d68c4c0a06cc9219a79fc9d169b07ab#file-lexicon-js&#34;&gt;&lt;strong&gt;lexicon.js&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CryptoJS&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;crypto-js&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;uuidv4&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&amp;#39;&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;replace&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;/[xy]/g&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;random&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;);
  });
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;entrance&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;$context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;text&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;$context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;text&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;entrance&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jsbox&amp;#39;&lt;/span&gt;
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Object.&lt;span style=&#34;color:#a6e22e&#34;&gt;keys&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;$context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;$context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;word&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;entrance&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shortcut&amp;#39;&lt;/span&gt;
} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Please execute via share sheet&amp;#39;&lt;/span&gt;)
  &lt;span style=&#34;color:#a6e22e&#34;&gt;$context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;()
  &lt;span style=&#34;color:#a6e22e&#34;&gt;$app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;()
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;query&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;appkey&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;your app key&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;salt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;uuidv4&lt;/span&gt;()
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;salt:&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;salt&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;curtime&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;round&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Date().&lt;span style=&#34;color:#a6e22e&#34;&gt;getTime&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)).&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;()
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;curtime:&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;curtime&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;appsecret&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;your app secret&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;)
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;input:&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;appkey&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;salt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;curtime&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;appsecret&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;concat:&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sign&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CryptoJS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SHA256&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;()
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sign:&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sign&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;formData&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;en&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;zh-CHS&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;appKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;appkey&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;salt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;salt&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;sign&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sign&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;signType&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v3&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;curtime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;curtime&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;strict&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;true&amp;#39;&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;$http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;post&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://openapi.youdao.com/api&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;form&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;formData&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ydreq&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ydreq&lt;/span&gt;)
      &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;field&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;Query&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ydreq&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;query&amp;#39;&lt;/span&gt;],
        &lt;span style=&#34;color:#a6e22e&#34;&gt;Translation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ydreq&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;translation&amp;#39;&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;join&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;),
        &lt;span style=&#34;color:#a6e22e&#34;&gt;isWord&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ydreq&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;isWord&amp;#39;&lt;/span&gt;],
        &lt;span style=&#34;color:#a6e22e&#34;&gt;Count&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
      }
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;ydreq&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;isWord&amp;#39;&lt;/span&gt;]) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;field&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Explains&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ydreq&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;basic&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;explains&amp;#39;&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;join&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#a6e22e&#34;&gt;field&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;US-Phonetic&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ydreq&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;basic&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;us-phonetic&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#a6e22e&#34;&gt;field&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UK-Phonetic&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ydreq&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;basic&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uk-phonetic&amp;#39;&lt;/span&gt;]
      }
      &lt;span style=&#34;color:#a6e22e&#34;&gt;$http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;post&lt;/span&gt;({
        &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.airtable.com/v0/&amp;lt;your table id&amp;gt;/Main&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Bearer &amp;lt;your app token&amp;gt;&amp;#39;&lt;/span&gt;,
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;
        },
        &lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
          &lt;span style=&#34;color:#a6e22e&#34;&gt;records&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [{
            &lt;span style=&#34;color:#a6e22e&#34;&gt;fields&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;field&lt;/span&gt;
          }]
        },
        &lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;) {
          &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;atreq&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;
          &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;atreq&lt;/span&gt;)
          &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;display&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Created: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;atreq&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;records&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;
          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;entrance&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shortcut&amp;#39;&lt;/span&gt;) {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;$intents&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;finish&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;display&lt;/span&gt;)
          } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;entrance&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jsbox&amp;#39;&lt;/span&gt;) {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;$ui&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;preview&lt;/span&gt;({
              &lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AirTable API Response&amp;#34;&lt;/span&gt;,
              &lt;span style=&#34;color:#a6e22e&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;display&lt;/span&gt;
            });
          }
        }
      });
    }
  })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>疫情之下提升心情的方法</title>
      <link>https://blog.wsine.top/posts/improve-mood-under-covid19/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/improve-mood-under-covid19/</guid>
      <description>&lt;p&gt;2020 年，在疫情的笼罩之下，对我而言最大的课题就是情绪管理。当然，这也跟我的经历相关。产生低落的情绪并不可怕，可怕的是自己无法打败这样的情绪。本篇文章就是我在 2020 年的实践中总结的一些调节心情的方法。&lt;/p&gt;
&lt;p&gt;千言万语总结成一句话:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;让自己开心最重要&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;背景介绍&#34;&gt;背景介绍&lt;/h3&gt;
&lt;p&gt;我是一名 2019 年秋季入学的香港博士生。不幸的是，由于座位紧张，我入学被分在一个地下办公室。没办法和师兄师姐在同一个办公室，也就没办法产生更多的联系。&lt;/p&gt;
&lt;p&gt;没多久，香港社会暴乱，学校率先停课/推出网课，这一动乱就是两个月之久。缺少的线下授课使得认识同级小伙伴的数量变得更加少。&lt;/p&gt;
&lt;p&gt;2020年初，Covid-19 席卷全球，由于是一年级生，出于稳定的网络环境考虑，赶在封关之前回到香港继续课业，没想到和朋友的断联到现在也还没恢复。&lt;/p&gt;
&lt;p&gt;但是，无论生活如何糟糕，还是要笑对人生。&lt;/p&gt;
&lt;h3 id=&#34;给情绪找一个出口&#34;&gt;给情绪找一个出口&lt;/h3&gt;
&lt;p&gt;在我们的现代观念中，生活往往要求人们积极乐观向上，大家总是报喜不报忧，尤其是面对家长，不想家长担心；但自己的朋友圈中，也需要顾虑到面子，不能畅所欲言。在最近的氛围中，也提出了高情商vs低情商这样的对比，使得人们说一句话反而要考虑得更多了。&lt;/p&gt;
&lt;p&gt;但是，人总是会有悲欢离合。那些失落的情绪被掩埋了，它就真的不在了吗？&lt;/p&gt;
&lt;p&gt;在 20 年 4 月的时候，少数派有一位作者提出了 「b言b语」的想法，作者初始的想法是保卫表达欲的同时避免社交兴奋。有兴趣的可以详细阅读这篇文章：https://sspai.com/post/60024 。但是对我而言，更重要的是给情绪一个出口，让知己能够聆听。&lt;/p&gt;
&lt;h4 id=&#34;我的搭建方案&#34;&gt;我的搭建方案&lt;/h4&gt;
&lt;p&gt;遵循类似的架构设计，我使用了Github Page + Airtable，我的方案改进了一下的几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 Airtable 替代 Leancloud 作为后端，避免了Leancloud一定时间内没使用会归档应用的限制，避免被迫营业，毕竟我的希冀是这个自留地发得越少越好，说明自己的心境在提高甚至走了出来。&lt;/li&gt;
&lt;li&gt;使用 Material Design 作为设计语言，良好的视图也能影响心情。&lt;/li&gt;
&lt;li&gt;发布方式增加了更加易用的网页端，密钥本地保存。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/B409AD5F4CB5520011A92C25D6D64EFC.png&#34; alt=&#34;页面展示&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;但由于私密性相关，我不打算开放给非亲密好友。源代码可以从该链接获取 &lt;a href=&#34;https://gist.github.com/Wsine/00cd48e8a266e78ff988adde87fd401b&#34;&gt;Gist&lt;/a&gt;. Airtable 自身提供的API已经考虑了翻页的功能，且可访问频率高，不限制过长时间的访问，非常适合这个系统。你只需根据自己的API token 替换对应的位置即可部署。最重要的是把入口只告诉给你信赖的亲密好友。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# airtable base scheme&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;Created&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Date&lt;/span&gt;
  - &lt;span style=&#34;color:#f92672&#34;&gt;Date format&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Local&lt;/span&gt;
  - &lt;span style=&#34;color:#f92672&#34;&gt;Time format&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;hour&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;Do not use the same time zone&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;Content&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Long text&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;Do not enable rich text formatting&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;Index&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Autonumber&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果有更多的问题，也欢迎和我讨论。&lt;/p&gt;
&lt;h3 id=&#34;用暗示鼓励自己&#34;&gt;用暗示鼓励自己&lt;/h3&gt;
&lt;p&gt;上面的方法解决了把负能量从自己的身上释放出去，接下来的方法想要解决的是从外部把正能量引入自身，而最好的方法还是朋友。&lt;/p&gt;
&lt;p&gt;在疫情的环境中，我们可能因为不能跨省跨市地和朋友们见面，但是我们对于朋友的情谊其实也不会因为这个而减少。大家都思念朋友，但是碍于情感也不好太过于直白地表达。因此，我们需要一些含蓄一点的方法。&lt;/p&gt;
&lt;p&gt;同时，2020 年也是桌面文化流行的一年，需要互联网人也在不断分享自己日益丰富的桌面。从节省的角度上来考虑，我打算顺便拯救一下吃灰的 Kindle 设备。相信大家都有一台吃灰的 Kindle 吧（笑）。&lt;/p&gt;
&lt;p&gt;我的方案很简单，就是打算利用 Kindle 设备来作为载体变成一本翻页日历，这本日历就是一本书籍，上面有朋友们给你的鼓励话语，你每天翻一页日历就能看到一句来自自己朋友的激励，也能在工作的眼睛余光中瞥见它形成鼓舞。&lt;/p&gt;
&lt;p&gt;网络上一些方案依赖于 Kindle 内置的浏览器，通过联网来更新每日日历，操作繁琐还费电。同时地址栏也关闭不了，我这个方案会显得更友好一些。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/4C9456FAE609EF20EE6E0BCBC07B2925.png&#34; alt=&#34;Presentation2&#34;  /&gt;
&lt;/p&gt;
&lt;h4 id=&#34;我的构建方案&#34;&gt;我的构建方案&lt;/h4&gt;
&lt;p&gt;首先第一步，你需要收集来自自己朋友们的励志语。这里，我选择使用传播更为方便的腾讯问卷来进行收集。同时，我也在线征集给 2021 年做一个少数派网友们专属的日历，以此作为演示，最后我会把生成的日历放在评论区供下载。问卷入口：https://wj.qq.com/s2/7997978/79df/&lt;/p&gt;
&lt;p&gt;问卷只包含两个简单的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你的网络 ID ？(14个字以内)&lt;/li&gt;
&lt;li&gt;你想对日历用户说的正能量话语？(60字以内)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;问题1的回答会显示在昵称中，问题2的答案就是正能量语录了，由于Kindle屏幕有限，因此只能包含60个字以内，太长了不好瞥见不是。&lt;/p&gt;
&lt;p&gt;收集到足够 365 条鼓励话语后，就可以导出 CSV 格式的文件，供下一步处理使用了。如果没法收集这么多也是可以的，程序会自动 duplicate 一份，其实每个人也可以写多条，建议收集一半以上，这样重复率不会太高。&lt;/p&gt;
&lt;p&gt;打开该项目的地址：https://github.com/Wsine/kindle-calendar&lt;/p&gt;
&lt;p&gt;你可以 Clone 下来在本地操作，也可以使用 README 里面的链接，在 Google Cloud Shell 中使用。整个操作流程都可以在网页端完成，不用在自己机器上配置环境。Awesome！&lt;/p&gt;
&lt;p&gt;这里我用一个动图给你演示一下，整个操作的流程。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/2ACCEF5B5A9670F8DB77D8FE354F73A3.gif&#34; alt=&#34;一键使用&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;最后，很简单的步骤，就是用自己设定的白名单邮箱把日历作为附件发送到 Kindle 的邮箱中即可，注意，不要在标题栏加入 “Convert” 这个关键词。Kindle 关闭睡眠模式只需要在搜索栏中输入&lt;code&gt;~ds&lt;/code&gt;即可。&lt;/p&gt;
&lt;p&gt;同样的，如果有更多的问题，也欢迎和我讨论。&lt;/p&gt;
&lt;h3 id=&#34;多出去走走&#34;&gt;多出去走走&lt;/h3&gt;
&lt;p&gt;最后的方法，我还是鼓励大家多出去走走。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;感受阳光&lt;/strong&gt;：结合我自己的情况来看，因为常年在地下办公室，全靠灯光来供应光源，没有办法感受阳光，因此一天中如果长时间工作了，不妨出去走10分钟回来，对心情的调节有意想不到的效果。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多运动&lt;/strong&gt;：同时，运动也是解决心理压力的重要途经。在保持合适的社交距离的情况下，还是要运动，否则就算没有生理疾病，反而积压了心理疾病，也是得不偿失的一件事情。&lt;/p&gt;
&lt;p&gt;这个疫情年里，很多博士生可能都或多或少出现了抑郁情绪（非抑郁症），我只想说去它的论文，先暂时放一放，调节好心情才能有更大的能量科研，硬着头皮做实验写论文，也不会有很大的产出的。&lt;/p&gt;
&lt;p&gt;最后，祝 2021 年的疫情都能消散，我们都能恢复以往的自由交流。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>我的科研软件流分享</title>
      <link>https://blog.wsine.top/posts/my-research-software-solution/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/my-research-software-solution/</guid>
      <description>&lt;p&gt;在少数派2019的年度征文里，我分享了我积累的「&lt;a href=&#34;https://sspai.com/post/58386&#34;&gt;科研方法论&lt;/a&gt;」。经过一年多的对科研软件的使用，我也逐渐积累了一套自己的软件流程，现整理为文章，希望对你有用。&lt;/p&gt;
&lt;p&gt;在科研的过程中，我经常经历的过程大概只有这几个：阅读论文，讨论 idea，实验记录。所以本文主要还是以这 3 点作为切入点来聊聊，如何将这3个过程变成一个电子化的，系统化的软件流程。&lt;/p&gt;
&lt;h2 id=&#34;阅读论文&#34;&gt;阅读论文&lt;/h2&gt;
&lt;p&gt;首先科研离不开的是阅读论文，而一个好的文献管理工具能让你快速的收纳和回顾你所看过的文章。我使用过的文献管理工具有主流的 3 大工具，Mendeley，Endnote 和 Zotero，最后选择的是 Zotero。下面先来说说我为什么喜欢它的独特理由，其他的功能其实都大同小异。&lt;/p&gt;
&lt;h3 id=&#34;桌面端管理&#34;&gt;桌面端管理&lt;/h3&gt;
&lt;p&gt;在桌面端，我的需求是筛选论文并且可以快速入库；当论文阅读完觉得值得保留，从 Inbox 转移到特定的 Collection 时，我能够快速编辑相应的字段；当我想起来某篇论文，能够快速找到并查看 PDF 上面的标记。这就是我在桌面端会使用到的最常用的功能了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文章编号导入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个算是 Zotero 里比较让我眼前一亮的功能了。我们知道，出版商发行出版的书籍会有一个对应的ISBN号，这个编号是唯一的。在文献的领域里面，一般会使用 Digital Object Identifier (DOI) 来作为文章的唯一编号。但是在生命和医学等领域，他们会使用 PubMed Unique Identifier (PMID) 来作为唯一编号。哪怕是对于未发表的文章，比如 arxiv 这种平台的编号，在 Zotero 中通通都支持自动导入。&lt;/p&gt;
&lt;p&gt;但是值得注意的是，这种导入功能还是会跟你的出口 IP 有关系的。因为只有你所在的学校或机构购买对应出版商的访问资格权限，才能直接使用该导入功能，而服务器是根据你的请求所在的 IP 来判断你所在的机构的。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/7d9fbb3aad49338f7b937d244fba4e24.gif&#34; alt=&#34;iShot2020-11-29 21.10.51&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字段管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另一个让我比较喜欢的功能就是简洁的字段管理了。因为 Zotero 本身虽然可以通过 Group 的方式来区分不同子领域的文章，但是实际上当你加入的文章比较多的时候，你的眼睛其实很难检索你脑海中的一篇文章。&lt;/p&gt;
&lt;p&gt;但是，实际上我们对文章记忆比较深的，除了 idea 本身以外，更多的是文章的 short title/short name。这个 short title 在 Zotero 中有专门一个字段「Short Title」，相比于其它的软件，确实更加符合实际的使用需求。&lt;/p&gt;
&lt;p&gt;另一个记忆比较深刻的字段应该属于 Publication 的 short name . 比如机器学习领域的顶会是 ICML，总比记忆 International Conference on Machine Learning 来得实在吧。这个字段在 Zotero 中被称之为 「Series」. 一般情况下对于出名的顶刊 / 顶会都是可以自动填充的。偶尔不能填充的时候，就需要靠自己手动管理了。&lt;/p&gt;
&lt;p&gt;第三个我的使用习惯会对阅读完的文献打上一些标签。那么根据什么来打这个 Tag 呢？我的实战经验是根据论文中约定俗成的分类来打标签。举个例子，假如你的研究课题是模型压缩，那么常见的方法有模型剪枝、模型量化、模型蒸馏等。当你习惯性地打好标签，在实际撰写自己的论文的时候，写 Related Work 的时候基本上就是得心应手。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分离的存储系统&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Zotero 作为一款开源的产品，使用上是免费的。但是同时，它也有提供有限的免费云存储额度，作为一个轻中度使用的我来说（精挑细选入库），这个额度也是不够的。以我自己的情况举例，Zotero 免费额度为 300M，一年的时间内收纳的论文空间大约为 200M+，基本上不足以承担更长时间的科研学习。&lt;/p&gt;
&lt;p&gt;在 Zotero 的设计中，它允许 Library 中的 Metadata 和文件分开存储计算。由于 Metadata 只是一些结构化的文本信息，存储在 Zotero云 上基本不会占用多大的存储空间，十分充足。对于文件类的存储，Zotero 允许通过 WebDAV 的方式外部存储。&lt;/p&gt;
&lt;p&gt;在这里我选择的是 &lt;a href=&#34;https://koofr.eu/&#34;&gt;Koofr&lt;/a&gt; 作为我的存储服务，目前的提供 WebDAV 服务的云盘选择已经不多了，Koofr 对于免费用户能默认提供 2G 的存储空间，不限制流量。对于文献管理这一需求来专用已经足够了。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/55cf8435ea0ad6d893afd536f4e7b57d.png&#34; alt=&#34;image-20201129213729416&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;平板端管理&#34;&gt;平板端管理&lt;/h3&gt;
&lt;p&gt;平常情况下，我的阅读都是在 iPad 端完成的。我最大的需求，就是能够在 iPad 上配合 Apple Pencil 书写，然后将我的标记和手写笔记都同步到云端，就足够了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;流畅的书写体验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，第一点我追求的就是书写体验，主要有两点，流畅性和笔尖连续。由于编辑的对象是一个通用的 PDF 格式，而不是笔记应用常见的矢量格式。因此完全支持 Apple Pencil 全部功能的 iPad PDF 应用，其实也不多，但是要是再加一个云存储的特性，我能筛选下来的就只剩下 PDF Expert 和 Papership 两款应用了。&lt;/p&gt;
&lt;p&gt;我有大半年的时间都在使用 PDF Expert，在转订阅制前付费购买，在 PDF 编辑领域，它真的可以说是Expert。书写感觉，手势缩放，快速切换自己选择好的笔，基本没有比它更好的选择了。但是它开始转订阅制后，无论是和Onedrive双向同步的云端文件还是纯iPad本地端的，都出现了明显的卡顿，也正是此契机，我才会开始寻找下一款能支撑我需求的软件。&lt;/p&gt;
&lt;p&gt;而我找到的就是 Papership，这也是一款内购应用。开发者甚至非常用心，内置了一份开放的 PDF 文件给用户试用标注和笔记等功能，然后再决定是否付费内购。我认为这种开发模式非常值得借鉴。在书写体验方面，Papership 我认为做到了和 PDF Expert 一样的体验，切换笔这方面有所缺失，我也致信开发者提了该建议。但是选择它更重要的下面的这个特性。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/21e1ca086b4d64d987ca3a70b79e3533.png&#34; alt=&#34;fluent-writing&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WebDAV 同步&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Papership 在我的理解中，更像是一款为适配 Zotero 的第三方应用，但是它做得很棒。首先，它的登陆账号直接就是 Zotero 的账号，用于下载和同步论文的结构化数据。另一方面，也配合 Zotero 的方式，提供 WebDAV 外部存储方式。因此，只要和桌面端填写的内容是一致的，就是同步的，体验非常棒。&lt;/p&gt;
&lt;p&gt;这里有一个小插曲，Papership 对于WebDAV 的Zotero空白存储文件夹同步有一点问题，需要自行加入&lt;code&gt;lastsync.txt&lt;/code&gt;文件。详情解决方案可以看这里：https://koofr.eu/blog/posts/using-papership-with-zotero-and-koofr-on-your-mobile-devices&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you are receiving an error and are not able to &lt;strong&gt;Verify Server&lt;/strong&gt;, check if you have a &lt;em&gt;lastsync.txt&lt;/em&gt; file in the &lt;strong&gt;zotero folder&lt;/strong&gt; in Koofr. Sometimes the connection doesn&amp;rsquo;t work without this file. You can create the text file in your &lt;strong&gt;zotero folder&lt;/strong&gt; in Koofr yourself. The file can be empty and the connection will still work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;草稿本&#34;&gt;草稿本&lt;/h2&gt;
&lt;p&gt;在日常的科研工作中，我们经常需要构思 idea，一边写一边构思，能十分有效地帮助你进行思考。这个需求我推荐两种工具。&lt;/p&gt;
&lt;p&gt;第一种是货真价实的笔记本+签字笔。很多时候，你不仅仅是只有自己在科研，当你和别人讨论的时候，其实大家都需要在纸上表达自己正在说的思路。我也尝试过把 iPad 和 Apple Pencil 一起带上，也递给别人用，但是对方毕竟不是长期用户，并不习惯，总是打断了思维的碰撞。因此和别人讨论的时候，我还是建议使用一个传统的工具，有利于沟通的进行。&lt;/p&gt;
&lt;p&gt;另一方面，对于自己的思维构建，我推荐的是少数派上的自荐的一款应用「无限草稿 InfDraft」，它很简单，就是一款使用了苹果官方 ApplePenKit 开发的无限画布类的纯本地应用。但也正是因为简单，它比起大厂比如微软的 WhiteBoard 和谷歌的 Jamboard 的体验都要好，主要就是在流畅这点上。大牌的应用对于手掌识别或者是笔的套件的适配我认为都还没达到理想的状态，但是我也会持续观察。&lt;/p&gt;
&lt;p&gt;总而言之，有了便利的草稿本，日常就能为地球环保节省下很多的纸张，也能快捷地修改自己写错的地方，这就是电子草稿的优势。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/08bbfbcbc3bbebbab52253682dfcf064.png&#34; alt=&#34;inf-draft&#34;  /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;笔记记录&#34;&gt;笔记记录&lt;/h2&gt;
&lt;p&gt;最后一项想聊聊的是，实验数据的记录整理。我的选择是 Notion，一款标称 All-in-one 的笔记 Web 应用。可以做快速的图片混合排版，记录你对自己 Research Problem 的 Timeline。包括在这个 Topic 中你的 target 是什么，遇到的问题，你当前思考的解决方案，next step 要尝试什么，都可以快速记录在案并得到一个相对赏心悦目的页面，而不用花太多时间。&lt;/p&gt;
&lt;p&gt;我比较喜欢它的一点是笔记内嵌了一个 Database，正好适合用来做实验数据的记录，少数派网站上面有很多的关于 Notion 的高级用法，用于科研生活中真的挺顺手的。因为在实际的需求，你不仅仅只用一个表格记录数字，你还需要做统计，Notion Database 自带的 Formula 真的特别方便，不用管理 EXCEL 文件了。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/bd1a166da542c0b094db49dbd329a45e.png&#34; alt=&#34;Snipaste_2020-12-02_13-22-30&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;另一点，我喜欢的是它的分享功能，作为一个网页，不需要注册登陆也能看到。当你最终做完实验的时候，分享实验数据给老板，说服 Supervisor 信服你的实验结果也是一个很重要的科研过程。你的数据越完整，支撑的信息越多，潜在地更有说服力。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以上，就是我在科研工作中日常使用的软件了，也欢迎在评论区留言分享互相学习。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>给你的静态博客带来 RSS 订阅</title>
      <link>https://blog.wsine.top/posts/bring-rss-to-your-blog/</link>
      <pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/bring-rss-to-your-blog/</guid>
      <description>&lt;p&gt;最近对于千篇一律的科技新闻，感到了一丝的阅读疲倦。因此，想要寻找一些有有趣的灵魂或者独立思考的博文，打发平时无聊的摸鱼时光。但是，随着在互联网上探索有意思的博客，发现绝大部分都没有提供相关的订阅链接，这将很难追踪新博客的发布。这其中，相当一部分博客是通过静态方式发布博客的。&lt;/p&gt;
&lt;p&gt;因此，本文的内容就是通过我的实践展示一下如何给静态博客增加 RSS 订阅。&lt;/p&gt;
&lt;h2 id=&#34;什么是-rss&#34;&gt;什么是 RSS&lt;/h2&gt;
&lt;p&gt;首先我们来看一下维基百科上面对 RSS 的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;RSS&lt;/strong&gt;（全称：&lt;a href=&#34;https://zh.wikipedia.org/wiki/Resource_Description_Framework&#34;&gt;RDF&lt;/a&gt; Site Summary；Really Simple Syndication），中文译作&lt;strong&gt;简易信息聚合&lt;/strong&gt;，也称&lt;strong&gt;聚合内容&lt;/strong&gt;，是一种&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%B6%88%E6%81%AF%E4%BE%86%E6%BA%90&#34;&gt;消息来源&lt;/a&gt;格式规范，用以&lt;strong&gt;聚合经常发布更新资料的网站&lt;/strong&gt;，例如&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%83%A8%E8%90%BD%E6%A0%BC&#34;&gt;博客&lt;/a&gt;文章、新闻、&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%9F%B3%E8%A8%8A&#34;&gt;音频&lt;/a&gt;或&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%A6%96%E8%A8%8A&#34;&gt;视频&lt;/a&gt;的网摘。RSS文件（或称做摘要、网络摘要、或频更新，提供到频道）包含全文或是节录的文字，再加上发布者所订阅之网摘资料和授权的元数据。简单来说 RSS 能够让用户订阅个人网站个人博客，当订阅的网站有新文章是能够获得通知。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;仔细阅读第二个英文全称，它表达的是 RSS 是一个十分简单的聚合技术，最主要的目的就是给个人网站和博客提供信息聚合，并通知所有订阅的阅读者，使信息能够更高效的传播。这正是我们想要的目的。&lt;/p&gt;
&lt;h2 id=&#34;rss-的格式&#34;&gt;RSS 的格式&lt;/h2&gt;
&lt;p&gt;RSS 的本质其实很简单，只是一份定制化的 XML 文件，我们先来看看该文件的基础定义。这份定义参考自 &lt;a href=&#34;https://www.rssboard.org/rss-specification&#34;&gt;RSSBoard&lt;/a&gt; 网站对于 RSS 2.0 版本的定义所提供的最简单的版本。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;rss&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:atom=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.w3.org/2005/Atom&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;version=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;channel&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;blog_title&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;atom:link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blog_link&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;self&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/rss+xml&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;link&amp;gt;&lt;/span&gt;blog_link&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/link&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;xxx&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;item&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;![CDATA[article_title]]&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;link&amp;gt;&lt;/span&gt;article_link&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/link&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;guid&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isPermaLink=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;article_id&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/guid&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;![CDATA[article_content]]&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;pubDate&amp;gt;&lt;/span&gt;article_date&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/pubDate&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/channel&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/rss&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，这份 XML 文件十分简单，仅包括对于需要阅读的内容的基础信息，并没有增加其他复杂的信息。其中比较特殊的可能是 &lt;code&gt;guid&lt;/code&gt; 这个标签，它提供对于文章的唯一标识，但由于文章的超链接也是唯一的，因此可以把超链接作为 GUID 的标识。&lt;/p&gt;
&lt;h2 id=&#34;如何生成-rss&#34;&gt;如何生成 RSS&lt;/h2&gt;
&lt;p&gt;由于需要根据文章内容动态生成该XML文件，因此一般的静态博客没有动态处理的能力，所以提供不了这种功能。但是，现代化的静态服务平台都提供了 Continuous Integration (CI) 的功能，我们可以利用该功能为我们的博客自动化提供该XML文件。&lt;/p&gt;
&lt;p&gt;实现的思路总体来说就4步：获取最新的文章，根据内容拼接字符串，输出生成内容到 XML 文件，发布 RSS。&lt;/p&gt;
&lt;p&gt;下面，我会以自身为例，在 Github 平台上通过 Travis CI 服务，自动化生成 RSS 文件所应该关注的点进行说明。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;获取最新的文章&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先我们会遇到第一个问题，该 XML 文件中到底需要包含多少篇文章才算是最新的文章。在这里，我的建议是 10 篇。考虑到个人博客的属性，我们的更新频率不会特别高，10篇文章足以达到人们通常阅读的频率。以 Git 协议管理的时间作为文章的发布时间，是一个不错的选项。&lt;/p&gt;
&lt;p&gt;第二个问题是，RSS 如何知道我哪篇文章是新的？这里就需要严格控制文章的生成的 &lt;code&gt;pubDate&lt;/code&gt;标签。在 RSS 2.0 的协议规范里面，规定了该时间的时间戳使用的是 &lt;a href=&#34;http://asg.web.cmu.edu/rfc/rfc822.html&#34;&gt;RFC 822&lt;/a&gt; 的规范。否则，该订阅源在阅读器中会出现混乱的排序情况，尤其注意。Git 命令中提供了 format 选项 “%aD” 可以获取该规范下的时间戳。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;根据内容拼接字符串&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里有两个标签需要特别注意一下的。&lt;/p&gt;
&lt;p&gt;其一是&lt;code&gt;link&lt;/code&gt;标签。由于部分人的文件是以中文命名的，这在RSS中并不能直接访问到正确的内容。正确的做法是自行将 URL 手动 encode 成标准的 unicode 编码，可以仅对中文部分处理，也可以对整个 URL 进行编码。一般来说，仅对中文部分处理会使最终生成的 URL 相对好看一些。&lt;/p&gt;
&lt;p&gt;另一是 &lt;code&gt;description&lt;/code&gt; 标签。由于大部分人现在都是使用 Markdown 语言来写博客，而 markdown 的纯文本并不适合直接阅读，而目前的 RSS 阅读器并不支持渲染 Markdown 语言。我们更希望将它进行解析到 Html 语言，以便后续能够更好的渲染成优秀排版。这里，我们使用万能的瑞士军刀 &lt;code&gt;Pandoc&lt;/code&gt; 软件即可解析。&lt;/p&gt;
&lt;p&gt;但是，由于 Html 语言和 Xml 的语言都是属于标记型语言，混合在一起容易产生歧义解析。因此需要使用 &lt;code&gt;&amp;lt;![CDATA[  html_content  ]]&amp;gt;&lt;/code&gt; 逃逸字符来控制 html 内容不属于 xml 的一部分。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输出生成内容到 XML 文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过不同的编程语言控制文件输出到 XML 这不难。根据自己选择的编程语言生成即可。&lt;/p&gt;
&lt;p&gt;这里，我建议大家对生成的 XML 进行校验，确保生成的 RSS 是正确并能够解析的。W3C 联盟提供了标准的 RSS 文件校验服务：https://validator.w3.org/feed/ ,可以在线输入和链接校验两种方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;发布 RSS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于静态博客，最直接的方法是将 XML 文件推送到静态服务平台，然后以 RAW 格式访问，即为一个合格的 RSS 订阅链接。&lt;/p&gt;
&lt;p&gt;更进阶一步的方法，可以利用前端框架里面的静态路由方式，解析通用的 &lt;code&gt;/feed&lt;/code&gt; 路由到生成的 RSS 文件中，配合标准的 RSS 图标 ，能够让人清晰直观的发现该博客提供了 RSS 订阅链接。&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;上述的说明只描述了我认为在这个方案中需要注意的事项，隐去了每一步的操作细节。想要抄作业的各位同学，可以移步到 &lt;a href=&#34;https://github.com/Wsine/blog/blob/master/build.sh&#34;&gt;https://github.com/Wsine/blog/blob/master/build.sh&lt;/a&gt; 查看具体的实现方法，直接复制到自己的仓库中就可以使用。&lt;/p&gt;
&lt;p&gt;具体的展示可以查看我的博客看看具体效果：https://wsine.github.io/blog ，也欢迎订阅~&lt;/p&gt;
&lt;p&gt;在这里，我也呼吁大家为自己的博客增加 RSS 订阅链接，如想分享可以在评论区留下你的订阅链接~&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NS大屏共享的小众方案</title>
      <link>https://blog.wsine.top/posts/switch-screen-to-laptop-or-pc/</link>
      <pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/switch-screen-to-laptop-or-pc/</guid>
      <description>&lt;p&gt;你是否曾经苦恼在宿舍里生活，偶尔想跟舍友来打一把大乱斗却苦于NS屏幕太小不尽兴？&lt;/p&gt;
&lt;p&gt;你是否曾经苦恼租房在外只有自己一个小房间，无法跟朋友一起欢畅地众乐乐？&lt;/p&gt;
&lt;p&gt;本文就是提供一个相对廉价的方案来解决以上的烦恼。&lt;/p&gt;
&lt;h3 id=&#34;对比方案&#34;&gt;对比方案&lt;/h3&gt;
&lt;p&gt;大家可能也看过不少的文章，现有的常见方案大概有以下几种，也有它各自的优缺点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;客厅大电视&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在客厅坐着大沙发对着大电视/投影仪来一起玩 Switch 上面的合众欢游戏，无疑是最高的游戏体验。但是这个问题也在于需要有一个大客厅，也需要有一台大电视，对于在外租房的工薪一族来说比较奢侈，而且现在很对租房把客厅也间隔成了一个房间出租以获取更高的租金。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;房间投影仪&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;投影仪是一个可以收纳但又能获得大屏幕的解决方案。但是问题一般在于，投影仪可能并不自带音响，而且摆放的位置不能给你带来类立体声的效果（很难摆在正前方）。导致实际体验中，往往体验较差。投影仪对光照的条件要求很高，也即对空间金钱的要求很高，要是在拉上窗帘漆黑的房间中，妹子可能就不愿意来了，怎么促进感情发展呢？好的投影仪，比一台电视还要贵。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;工作台显示器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不少的小伙伴都喜欢在租房/宿舍里配备一台显示器来提高工作效率，这个是一个不错的解决方案。只需要解决显示器可能不自带音响的问题就可以了，买一个蓝牙模块或者能3.5mm接口的音箱就能解决。但要是考虑到常搬家，书桌空间不够大，可能这个方案就不适合这类人。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;便携显示屏&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;自从老罗在锤子发布会上介绍了TNT后，以 GoBigger 为代表的便携式显示屏便进入到大众的眼中。Type-C接口直连，充电宝/电源反向供电等特性，都是它的加分项。如果说缺点的话，也只有1000+的起步价格和多一款设备的迁移负担。网上也有DIY的解决方案，但是对玩家要求较高，就不做评价。&lt;/p&gt;
&lt;h3 id=&#34;本文方案&#34;&gt;本文方案&lt;/h3&gt;
&lt;p&gt;如果你也有上述的顾虑，本文所推荐的是使用 &amp;lt;采集卡&amp;gt; 这个方案。&lt;/p&gt;
&lt;p&gt;我买的是 Acasis 家的采集卡，我在亚马逊上面买的，国内淘宝也有售，最低只需要 200+ 的价格即可满足 NS 大屏共享的需求。唯一的前置要求是需要你有一台自己的电脑，无论是笔记本还是台式都可以。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/640f7b287e0c26c1a60cabdbb9b94398.jpg&#34; alt=&#34;Slide1&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;对比采集卡本身的体积和鼠标，可以看出采集卡本身非常的小。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;工作方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;绝大部分的电脑配备的 HDMI 接口都是输出口，所以不能接收 NS 底座传输过来的视频信号。采集卡的作用，就是接收 NS 底座的视音频信号转换为数字信号，通过 USB 接口传输给电脑播放。用一张图来表示是这样子的：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/920173607cb6084d97dc80d7cdfa8822.png&#34; alt=&#34;Slide2&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;电脑设置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;采集卡本身是免驱的，直接连接电脑就可以使用。常用的软件都支持打开串流的，这里以 PotPlayer 为例。右击界面，依次点击「打开」，「设备设置」，「模拟TV」，选择「ACASIS」设备即可。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/4874740a0d7232ac2946e6a9e216d2da.PNG&#34; alt=&#34;Slide3&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;实际体验下来，实际的延迟只有0.1s，几乎感受不到，玩大乱斗这种对延迟要求高的游戏也没有问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;性能要求&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你只是需要播放的话，采集卡本身对电脑的性能要求极低。我使用的笔记本电脑是超极本，配备第一代酷睿m3处理器，实际体验也没有任何问题。&lt;/p&gt;
&lt;p&gt;如果设备性能真的过低，这里有一个小技巧可以教你。在软件端关掉声音的捕获，在系统端直接&amp;lt;侦听&amp;gt;采集设备。这样子设置，不需要经过软件图音同步减少处理量，用硬件直出声音对性能要求更低。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/6f784cf5f9f82aded688ddd7e2215414.PNG&#34; alt=&#34;Slide4&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;用户体验&#34;&gt;用户体验&lt;/h3&gt;
&lt;p&gt;我已经买了这个设备体验快一个月了，目前并没有遇到别的问题。这套方案的优点在于性价比高，特别适合小房间租房和在校宿舍生的人群。想跟朋友一起玩，平时也不会有特别多的小伙伴一起同屏打游戏，毕竟笔记本屏幕两个人刚刚好，再多就有点显得拥挤了。面对搬家，也不用因为多一个显示屏/电视多增添一份烦恼。&lt;/p&gt;
&lt;p&gt;最后，还有一个极客用法。通过网络分享屏幕同时跟女朋友连麦聊天互动，有时候比硬拉女朋友一起打游戏更有促进作用喔。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Windows平台下的少数派新写稿流程</title>
      <link>https://blog.wsine.top/posts/writting-for-sspai-on-windows/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/writting-for-sspai-on-windows/</guid>
      <description>&lt;p&gt;谈及写作，不少的用户都是使用 Mac 平台配合多样的 App 完成从写稿到发布的一条龙服务。但是在 Windows 平台上，往往需要很多手动的过程。比如，在少数派平台上，官方提供了专用的接口给 MWeb App 完成从写稿、插图、发布的完善服务，但是 MWeb App 仅在 Mac 平台上提供，Windows 用户常常因为插图图床问题困扰。&lt;/p&gt;
&lt;p&gt;最近，随着两大写作好伴侣 App 的更新，这一情况得以改善。PicGo 迎来了 v2.0 版本的大更新，剥离了核心功能同时支持 CLI 调用和 API 调用。Typora 集成了 PicGo 并提供一键上传图片服务。如果需要更详细的资料，请看这两篇文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sspai.com/post/52527&#34;&gt;图床「神器」PicGo v2.0更新，插件系统终于来了&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sspai.com/post/59128&#34;&gt;Typora 支持自定义图片上传服务了&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;配合上述两大神器，是否有方法能够改善少数派平台上的写作流程，下面我就来谈谈我的方案。&lt;/p&gt;
&lt;h2 id=&#34;typora-之功能增强&#34;&gt;Typora 之功能增强&lt;/h2&gt;
&lt;p&gt;首先，从 Typora 官网上能够下载 Win / Linux / OSX 对应平台的安装文件并正确安装。&lt;/p&gt;
&lt;p&gt;然后，我们需要启用图片上传功能。点击 File -&amp;gt; Preferences -&amp;gt; Image，在 Image Upload Setting 那栏，选择 PicGo-Core (command line) ，然后点击 Download and Upgrade，即可完成安装。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/628cb7601505f1aaf9d736a4f59f68a6.png&#34; alt=&#34;enhance&#34;  /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;picgo-之少数派插件&#34;&gt;PicGo 之少数派插件&lt;/h2&gt;
&lt;p&gt;得益于 PicGo 的插件系统，我们可以为少数派平台编写插件，快捷完成图片上传到少数派的服务器。那么，如何安装少数派插件？&lt;/p&gt;
&lt;p&gt;步骤一&lt;/p&gt;
&lt;p&gt;首先我们打开 PicGo 配置文件所在的目录，你可以点击上图的 Open Config File 按钮，或者手动打开对应平台的文件夹。&lt;/p&gt;
&lt;p&gt;Windows 平台位于&lt;code&gt;C:\Users\&amp;lt;your username&amp;gt;\.picgo\&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Linux 和 OSX 平台位于`~/.picgo/``&lt;/p&gt;
&lt;p&gt;然后，克隆或下载&lt;a href=&#34;https://github.com/Wsine/picgo-plugin-sspai&#34;&gt;github.com/Wsine/picgo-plugin-sspai&lt;/a&gt;仓库到该文件夹中，注意如果从网页端下载，解压后去除多余的分支名，这很重要。&lt;/p&gt;
&lt;p&gt;步骤二&lt;/p&gt;
&lt;p&gt;在 PicGo 配置文件夹下创建&lt;code&gt;node_modules&lt;/code&gt;文件夹，并在里面创建同名快捷方式/软链接，指向刚才下载的仓库文件夹。&lt;/p&gt;
&lt;p&gt;步骤三&lt;/p&gt;
&lt;p&gt;编辑`package.json``文件，修改里面的依赖项。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;picgo-plugin-sspai&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file:picgo-plugin-sspai&amp;#34;&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;步骤四&lt;/p&gt;
&lt;p&gt;创建`package-lock.json``，内容填充如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;picgo-plugins&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;requires&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;lockfileVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;picgo-plugin-sspai&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file:picgo-plugin-sspai&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;验证&lt;/p&gt;
&lt;p&gt;最终配置文件夹中的目录结构如应如下图所示&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;~/.picgo &amp;gt; tree
.
├── config.json
├── node_modules
│   └── picgo-plugin-sspai &amp;lt;soft link&amp;gt;
├── package.json
├── package-lock.json
├── picgo.log
└── picgo-plugin-sspai
    ├── index.js
    ├── License
    ├── md5.min.js
    ├── package.json
    └── README.md
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;配置个人信息&#34;&gt;配置个人信息&lt;/h2&gt;
&lt;p&gt;打开少数派官网，登陆自己的账号，然后按F12打开开发者模式，找到 Console 选项卡，输入&lt;/p&gt;
&lt;p&gt;`document.cookie.split(&#39;; sspai_cross_token=&#39;).pop().split(&#39;;&#39;).shift()``&lt;/p&gt;
&lt;p&gt;该命令会返回一串字符串，记住该字符串，并重新在 Typora 中打开 PicGo 的配置文件，替换下面样例的 token 占位符，保存&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;picBed&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;current&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sspai&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;uploader&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sspai&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;transformer&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;base64&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;sspai&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;cross_token&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;replace here&amp;gt;&amp;#34;&lt;/span&gt;
    }
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;picgoPlugins&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;picgo-plugin-sspai&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;好了，至此为止，你已完成了全部的配置，那么来看看效果如何吧。&lt;/p&gt;
&lt;h2 id=&#34;样例效果&#34;&gt;样例效果&lt;/h2&gt;
&lt;p&gt;我们就以本文作为目标图片展示一下该写作流程的优化吧，通过菜单栏的 Format -&amp;gt; Image -&amp;gt; Upload All Local Images 能够一键上传该文章下面的全部图片，也可以通过右击图片的方式单张图片上传&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/4472f6471191c61072d1e54de3f941d9.gif&#34; alt=&#34;example&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;最后，打开少数派网站的编辑器，复制全文富文本格式进去，即可完成发布流程。&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;该插件的开发仅仅是为了方便用户在少数派平台上写作而创作。图床，一直是流量消耗的大户，目前少数派的图床仅能在 sspai.com 域名下显示，也即启用的防盗链技术，如有别的用途的用户就不用折腾啦。&lt;/p&gt;
&lt;p&gt;等后续的 Typora 更新了发布功能，我会再来优化该流程。那么，希望这个插件能帮得到大家。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>单卡手机「变」双卡的使用方案</title>
      <link>https://blog.wsine.top/posts/single-sim-to-dual-sim/</link>
      <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/single-sim-to-dual-sim/</guid>
      <description>&lt;p&gt;今天想来聊聊的是一个单卡手机也能媲美双卡手机的使用方案。如果你正好在使用中国移动的套餐计划也有使用双卡的需求，那么就请往下看吧。&lt;/p&gt;
&lt;h2 id=&#34;手机号码的需求&#34;&gt;手机号码的需求&lt;/h2&gt;
&lt;p&gt;首先我们需要明确我们对于副卡的常用场景有哪些，如果你还有除了下面有更多的使用场景，可能本套方案并不合适你。&lt;/p&gt;
&lt;p&gt;回想一下，我们如今生活中大部分的场景，对于原生电话和短信的使用是否还只剩下这些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收快递的信息&lt;/li&gt;
&lt;li&gt;接收广告的信息&lt;/li&gt;
&lt;li&gt;接收外卖的送达电话&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自从2013年9月1日，工信部颁布了电话实名制要求后，各大互联网服务都加入了绑定手机号的功能，甚至是刚性要求。渐渐地，手机号码对我们而言，变成了一个实名身份认证入口，和新增了新的使用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收验证码的信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们使用互联网服务需要验证手机号码，我们更换新手机号码又需要付出巨大的迁移成本，那倒不如将这个旧号码转换为一个实用的手机 App，来帮你管理上述的场景。&lt;/p&gt;
&lt;h3 id=&#34;无忧行不仅仅是出国神器&#34;&gt;无忧行：不仅仅是出国神器&lt;/h3&gt;
&lt;p&gt;「无忧行」是中国移动国际有限公司提供服务的 App，它主打的是出国旅游的服务，但由于是一家电信运营商背景的公司，因此服务更偏向于手机通讯相关的类型。&lt;/p&gt;
&lt;p&gt;接收来电与短信，是我们这次的目标功能。它的开启方法非常简单，不需要额外的申请，使用的资费也是免费，唯一的要求就是你的主卡能够连接上互联网。&lt;/p&gt;
&lt;p&gt;那么如何开启呢？首先在各大应用商场下载「无忧行」 App，将副卡插入手机中，点击一下 “设备安全认证”，App 就会读取你当前的手机卡信息。认证成功后，移出副卡，点击一下“免费接收来电和短信”按钮，就完成了整个功能开启的流程。&lt;/p&gt;
&lt;p&gt;日常的使用场景里，它会使用系统推送给你发送短信通知和来电提醒，跟真实使用原生的电话和短信功能没有太大的差别。该服务甚至还提供了来电号码显示的功能，要知道一般来说这可是作为套餐的收费点来宣传的。要说唯二的差别是，来电没有全屏强制占用屏幕，以及失去了系统级别的复制验证码功能。但是作为一个免费的服务，我觉得已经很良心了。&lt;/p&gt;
&lt;p&gt;当你把副卡重新连接基站的时候，这个 App 的接听短信功能就会关闭。当你再次关机或移出sim卡的时候，就能够手动再次开启该功能，我觉得是非常贴心的设计。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/1330edde4a43554b1e1f65c16872804f.PNG&#34; alt=&#34;Slide1&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;无忧行还真是出国神器&#34;&gt;无忧行：还真是出国神器&lt;/h3&gt;
&lt;p&gt;当然，无忧行本身主打的功能也是很不错的。&lt;/p&gt;
&lt;p&gt;出国流量：基本上如果你只需要出国几天，那么这是最方便的服务。你可以在 App 中购买跨境流量，以香港为例，很多人都有香港一日游的需求，但又怕无法上网迷路或代购聊天比价不方便。&lt;/p&gt;
&lt;p&gt;在 App 中最低只需要8元/天，基本满足查询信息的流量需求。开启手机的漫游选项，当你到达香港的时候会自动开启，这样也不用担心购买的时间点与开始使用的时间点不吻合的各种问题。&lt;/p&gt;
&lt;p&gt;跨境通话：基本上，无忧行每个月都会赠送100分钟的拨打至中国内地的免费通话分钟数。如果有什么紧急需求可以直接拨打，也是十分的省心。同样的也可以购买对应地区的通话时长，以美国地区为例，12元/100分钟的资费确实不贵。&lt;/p&gt;
&lt;p&gt;境外当地号：无忧行会随机分配一个境外号码，拨打电话会显示该号码。用来联系当地的酒店、租车和餐饮等服务都是非常实用的功能，有国外旅行经验的人就懂了。资费根据不同国家会有所不同。&lt;/p&gt;
&lt;h2 id=&#34;适用人群&#34;&gt;适用人群&lt;/h2&gt;
&lt;p&gt;我认为无忧行 App 本身挺适合以下几类需要用到双手机号码的人的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手上只有单卡手机的用户&lt;/li&gt;
&lt;li&gt;更换了新手机号码，但需要保留旧号码一段时间的用户&lt;/li&gt;
&lt;li&gt;不喜欢两台手机要反复充电的用户&lt;/li&gt;
&lt;li&gt;有大量国外语音通讯需求的用户&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;好物分享&#34;&gt;好物分享&lt;/h2&gt;
&lt;p&gt;最后，分享一个实用的小神器。从此快速换卡真的方便了很多很多，对于经常出入海关的人来说太方便了。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/f2253357952ee19c0e6b1999ae1340ef.PNG&#34; alt=&#34;Slide2&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;方法总比困难多，我们下篇文章再见~&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>我的资料存储方案分享</title>
      <link>https://blog.wsine.top/posts/my-file-storage-solution/</link>
      <pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/my-file-storage-solution/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;今天打算来聊一下存储相关的事情，分享一下我现在所使用的方案。&lt;/p&gt;
&lt;p&gt;相信有不少的小伙伴都经历过数据丢失的事情，比如经典的如下场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我换/丢手机了，手机号码都丢失了，大家发我一下手机号码呀&lt;/li&gt;
&lt;li&gt;我写了几个月的毕业论文，电脑硬盘就坏了，没有备份……&lt;/li&gt;
&lt;li&gt;我以前拍了好多照片，换手机后没有，好怀念啊&lt;/li&gt;
&lt;li&gt;我以前做过这个，但是很久以前了，现在找不到了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;机器有价，数据无价，本文的目的就是希望能够给大家一个视角分享一下我是如何规避这些问题的。&lt;/p&gt;
&lt;h2 id=&#34;数据策略&#34;&gt;数据策略&lt;/h2&gt;
&lt;p&gt;相比起单纯的分享我使用了什么软件，更重要的我认为是分享如何约束指导自己选择这些方案。&lt;/p&gt;
&lt;p&gt;整体来说，我考察一个软件/服务是否适合我，我看重这3个方面。&lt;/p&gt;
&lt;p&gt;便携性：2014年3月27日，微软CEO纳德拉提出了 【移动为先云为先】的战略指导方针，基本上预告了后面5年网络世界的发展，同时也成为了我数据存储的重要考虑因素——云存储。这个概念相信大家已不陌生。在2020年的今天，数据流量和随时随地访问互联网已经不再成为大多数人的瓶颈，所以云存储也就顺势地成为了一个特别方便的工具。&lt;/p&gt;
&lt;p&gt;易用性：用云存储连接一切，已经成为了我生活方式的一部分。它能充当一个桥梁的作用，在不同的应用和设备间进行访问。协议和文件格式是其中比较重要的部分。磨刀不误砍柴工，研究效率的人常爱挂在嘴边的话，我很享受高效率的感觉。&lt;/p&gt;
&lt;p&gt;持久性：除了云存储本身带来的持久化存储，更重要的我觉得是不能够太轻易被一个平台/工具所绑定。虽然我在这方面也没办法100%做到，但是尽量去做总归是好的。最后，有一份自己的本地拷贝，虽然云存储服务商做了很多容灾工作，但是事故发生的时候谁也不希望的，历史上也发生过。你可能会得到赔偿，但你的数据还是不见了。&lt;/p&gt;
&lt;h2 id=&#34;用云存储连接一切&#34;&gt;用云存储连接一切&lt;/h2&gt;
&lt;p&gt;多说无益，下面就直接开始我现在的方案。&lt;/p&gt;
&lt;h3 id=&#34;文件&#34;&gt;文件&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/9EA9FB10AB81276E2D7F5039A85863B6.PNG&#34; alt=&#34;Slide1&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;文件，应该是云存储看起来比较直观的存储形式了。在这里，我关注的有三个要素。&lt;/p&gt;
&lt;p&gt;一，是能够快速便捷的访问。如果你不能随存随用，那么这个云存储带给你的体验感会大幅度下降。也即要求你访问网盘的直连速度充足。&lt;/p&gt;
&lt;p&gt;二，是容量足够。它没必要是一个超巨大的网盘，只需要满足你的需求即可，定时整理归档文件也是很重要的。&lt;/p&gt;
&lt;p&gt;三，是真实的存储容量。相比百度云，微云之类的超大云盘，我更推荐使用固定有限的容量。因为它是真实拷贝一份数据到云端，而不是多存一个哈希值。&lt;/p&gt;
&lt;p&gt;在这里，我的日常使用的网盘有两个，其一是 OneDrive，我有30G的固定配额+1T的Office 365空间，光是前者就满足了我的需要了，它作为我多文件存储访问的桥梁，链接着我不同的设备，比如我在 PC 设备上写好了一份文件能够在 iPad 上读取并快速展示。其二，是坚果云，这里我仅使用免费账户，主要是使用其中的 WebDAV 协议同步很多应用的数据，比如 Keepass 的密码库和 Zotero 的文件。&lt;/p&gt;
&lt;h3 id=&#34;邮箱联系人待办事项日历事件&#34;&gt;邮箱/联系人/待办事项/日历事件&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/B4C0CD1F65B0636F9F7254EEF4DF9575.PNG&#34; alt=&#34;Slide2&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;「Microsoft Exchange ActiveSync」是我现在使用的服务，直白点来说，其实就是注册了一个微软账号。&lt;/p&gt;
&lt;p&gt;在 Windows 设备中，当我登陆了我的微软账号，它会同时登陆了 Mail、People、To Do、Calendar 这四个应用，你可以正常的收发邮件，管理你的 GTD 流程。&lt;/p&gt;
&lt;p&gt;同时在你的移动设备，Android / iOS 你也可以相应得添加账号，以 iOS 为例，你可以在 Mail、Contacts、Reminders、Calendar 找到对应的数据。安卓系统上可能会根据不同的系统有不同的情况，这里就不阐述了，Android 是原生支持这个服务的。&lt;/p&gt;
&lt;p&gt;更重要的时候，数据本身是保存在云端数据库中的，无论哪天手机被盗/丢失/损坏，也不会丢失珍贵的联系人，包括联系人头像（这个我很喜欢）。服务本身是双向同步的，在任意一台设备上更新了数据，都会同步到其他所有的数据中，十分方便。我的整个 GTD 流程都是依托这服务展开的，轻量够用~&lt;/p&gt;
&lt;h3 id=&#34;照片存储和分享&#34;&gt;照片存储和分享&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/E7576D11E3C6CE8FF7DA3F1D3968E11D.PNG&#34; alt=&#34;9EA9FB10AB81276E2D7F5039A85863B6&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;照片应该是我们当今生活中产生的最大量的数据信息了。每个人都会或多或少的积累照片，而且会因为历史进程的推进而不断增大。无论它是一张美丽的风景照片，还是一个屏幕截图，都代表着背后你的一段回忆。比如，我很喜欢我初三的那个课室的那个座位的照片，可能它平平无奇，但是它印证着我人生思想的一个蜕变。&lt;/p&gt;
&lt;p&gt;「Google Photos」是一个如今比较优秀的在线图片存储服务。它提供有限压缩的无限存储，付费可升级无压缩无限存储。对我而言，保存下来照片背后的那一刻回忆，比起一味追求高画质要重要得多。它同时提供了 Web端/iOS平台/Android平台三个客户端，它在多设备后台同步是无感的，也就是当你突然想起来某张照片你可以随时在任一设备访问，无论当时用哪一台移动设备拍摄的。一次共同出游，上传照片后也能建立相册快捷分享。在国内，也有一个类似的服务叫「一刻相册」，是百度技术团队出品。&lt;/p&gt;
&lt;p&gt;这里，我还想补充一点，照片需要定时整理，否则照片一多在巨大的信息流里寻找一张特定的照片，是很困难的。在这种大规模的图片服务，绝对不要将个人隐私照片上传，既是为了自己好也是为别人好。软件代码是人写的，难免会有出错的时候。我身边有不少人贪图方便全量同步，这是只要使用 iOS 相册的隐藏相册功能就不会被同步到云端喔。&lt;/p&gt;
&lt;h3 id=&#34;手写笔记电子笔记&#34;&gt;手写笔记/电子笔记&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/CD7F7A143D6E68C825DAD7318DCC38FD.PNG&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;笔记分为两种，一种是手写式电子笔记，一种是富文本电子笔记。&lt;/p&gt;
&lt;p&gt;对于手写式电子笔记，我常用的是 Notability。原因无它，因为它支持第三方云存储，我一般将它和 OneDrive 存储连接起来，可以很轻松的在 PC 上访问我在 iPad 中记录的课堂笔记，在快速复习的时候很有用。存储形式我选择的是 PDF + Recording。&lt;/p&gt;
&lt;p&gt;另一方面，富文本电子笔记，我从 OneNote 转到 印象笔记，目前在用的是 Notion。对于高校用户，Notion免费提供了无限Block的存储，它提供了很多新的功能特性比如Database。电子笔记领域近两年涌现了不少新兴之秀，除了上述三个还有语雀、Coda、为知笔记、有道云笔记等。我个人试用过后选定的Notion，少数派有不少 Notion 的文章，推荐你去阅读了解一下。在这里，我建议的是，试用并选择够用的就好。&lt;/p&gt;
&lt;h3 id=&#34;代码个人博客个人网站&#34;&gt;代码/个人博客/个人网站&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/DE1EF9EB021ABBCB65660C30E147FA12.PNG&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;代码库方面，我相信绝大部分人的选择都是 Github。它除了能存储代码还能作为一个优秀的静态网站展示一些内容，比较大众的使用方式是 个人博客、个人网站和开发文档等。&lt;/p&gt;
&lt;p&gt;代码库方面，我有几点比较推荐的。&lt;/p&gt;
&lt;p&gt;第一点是只保存自己需要的代码。它可以是你自己产生的代码，也可以是Fork后修改的代码，但不会是不断Fork的纯拷贝，你既不会阅读又增加了自己的检索的时间，还会使得面试官错误认为你热衷抄代码。&lt;/p&gt;
&lt;p&gt;第二点是优化项目结构，只上传有用的信息。很多 IDE 生成的信息用 &lt;code&gt;.gitignore&lt;/code&gt;过滤掉会使你的代码仓库更简洁，增加一个README说明页面哪怕只是一个短短几句，都能让你的仓库显得更大气更实用。&lt;/p&gt;
&lt;p&gt;第三点是巧用分支和管理commit记录。每一个分支都有其特定的功能需求，分别进行开发和测试会更高效；而巧妙得拆分commit和合并commit也是很重要的，而不是稍微改两个字符也产生一个commit。&lt;/p&gt;
&lt;p&gt;对于静态个人博客方面，我个人推荐 docsify，它能够让你的文件结构十分整洁，所有的文件都是有用的信息而非因为使用了某一框架增添了很多索引文件。而且，它本身支持 Markdown ，非常适合博客的书写。有兴趣的可以阅读这篇文章：&lt;a href=&#34;https://sspai.com/post/55786&#34;&gt;个人博客的方案推荐，你只负责编写&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;密码管理和同步&#34;&gt;密码管理和同步&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/ACECFBFBF0B16921BB4ACECC44EF7C95.PNG&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;密码管理，是我认为在生物认证技术没有普及之前是十分有必要的。现在我们使用的互联网服务越来越多，每一个都需要你有独立的账号密码，一般人是无法记忆如此多的密码的。而加密技术趋于同质化，操作运营的服务商的能力水平却并不都在统一高水准。一旦发生密码泄露，是一件很可怕的事情。&lt;/p&gt;
&lt;p&gt;现在比较流行的密码管理器是 1Password、Lasspass 等。我个人选择的是 Keepass 这一比较小众的无服务商服务。通过简单的搭建，你可以自由的掌握密码库、密钥、密码等多个重要的东西，而且数据也是保存在你自己指定的地方。加密方式是现代的最高标准，而且开源有保证。&lt;/p&gt;
&lt;p&gt;有兴趣的可以阅读这篇文章：&lt;a href=&#34;https://sspai.com/post/55403&#34;&gt;一次解决 5 个痛点，我搭建了一套免费且科学的密码管理方案&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;思维导图文献管理和同步&#34;&gt;思维导图/文献管理和同步&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/8037D0B2E00457884697A3763D63759D.PNG&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;思维导图是我在日常工作学习中使用得比较频繁的工具。XMind 是一个良心的软件，它允许你一直无限期试用该产品，除了一些高级功能需要订阅。在电脑端可以使用 XMind Zen，它独有的禅模式能让你沉浸式地发散思维，完成结构后稍加美化，将文件保存在 OneDrive 的同步目录中；在 iPad 可以下载 XMind 的应用，它支持访问文件app直接打开 OneDrive 上的文件，这样就能高效地跟老板 Meeting 整体的结构了。&lt;/p&gt;
&lt;p&gt;文献管理也是研究生活中重要的一部分。在试用了Zotero、Endnote、Mendeley 这三款软件后，我的最终选择是 Zotero 。它也能够自定义存储位置，而不是强制性的使用服务商的云存储，因此将所有的文献存储在 OneDrive 上就是我的需求，尤其是那些经过自己的阅读有了大量的专属标注的PDF文件。后面有时间我会专门讲讲文献管理这一topic。&lt;/p&gt;
&lt;h3 id=&#34;聊天记录&#34;&gt;聊天记录&lt;/h3&gt;
&lt;p&gt;最后，这可能是我至今还没有满意解决的数据。聊天记录承载着我们很多美好的对话，那些难忘的、动人的情话，那些激动的、开心的分享，都一点一滴地记录在聊天软件中。然而，目前绝大多数的 IM 都不具备体验良好的导出功能。&lt;/p&gt;
&lt;p&gt;以微信为例。目前我的方案是一年一次的归档整理。一般我会保存两份数据，一份是全量备份，包括所有我认为有用的对话，另一份是重点备份，仅包括我认为有意义的珍惜的对话。然后，通过微信桌面客户端的备份功能导出为单一文件，保存到云端。&lt;/p&gt;
&lt;p&gt;但我还是很希望它能够像云端照片一样，随时能够访问得到，在我思念的时候搜索并定位得到。&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;从上面的方案你可以很容易的发现一些共通点，找一款趁手的云存储网盘，尽可能使用文件形式的存储和通用的协议。那么，你就可以像我一样，就算任一设备被掰成了两截，我的数据也不会受到任何的损失。这种安心感和使用中不需要传输的高效感，能使你的工作生活的幸福感大大提高。&lt;/p&gt;
&lt;p&gt;祝大家都能找到合适自己的方案~&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>从 iOS 13 到 ColorOS 6 的用户体验</title>
      <link>https://blog.wsine.top/posts/from-ios13-to-coloros6/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/from-ios13-to-coloros6/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;2020年到了，国内厂商不断迭代进化的安卓手机用户体验到底如何呢？抱着这个疑问，我也十分好奇。适逢单卡手机不太适合我的现状，且最近双11、双12都没怎么买买买，手痒痒之下决定换到 Android 平台体验一下。不过最近适逢 5G 快速普及的时代，我也曾十分纠结买哪一款手机比较好，也写下了如下小杂文，记录了我的思考过程。&lt;/p&gt;
&lt;p&gt;关联阅读：&lt;a href=&#34;https://sspai.com/post/58193&#34;&gt;2019年末是选购手机最难的时刻&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由于最近在少数派平台看到大量 ColorOS 相关推广，抱着尝鲜的心态，购入了 OPPO Reno Ace。在我购买之时，鲜有文章或视频详细介绍系统之间的差异，所以今天就打算来就着新手机快一个月的主力机体验来好好聊一聊这个话题。&lt;/p&gt;
&lt;p&gt;本想着描述这个话题为《从 iOS 到 Android 的用户体验》，后来发现在安卓阵营之间也有不少的鸿沟，哪怕是同一个厂商的不同机型，所以这个更细致地描述这个话题，以免争议。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一些条件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然我也是一个 CS 背景的从业人员，也曾是手机的发烧玩家。但是随着年龄的增长，也折腾不动了。本文也只会从普通消费者的角度，去主观地给大家说说我感受到的用户体验，文章不会涉及任何的刷机行为等操作。由于所在地区不同，本文的体验不会考虑网络因素的限制。&lt;/p&gt;
&lt;p&gt;下面就开始来说说我的体验吧。&lt;/p&gt;
&lt;h2 id=&#34;软件细节的放大镜&#34;&gt;软件细节的放大镜&lt;/h2&gt;
&lt;p&gt;在平时的玩手机的时候，也特别关注一些细节的地方，我觉得这个特别能体现工匠精神，也是我很喜欢的地方。&lt;/p&gt;
&lt;h3 id=&#34;缺失的基础账号同步服务&#34;&gt;缺失的基础账号同步服务&lt;/h3&gt;
&lt;p&gt;拿到新手机的第一时间，我猜大部分的人的第一步操作都是想着如何把旧手机的资料导入到新手机里面。但是，由于我所有的数据都在云端，我更需要做的是如何从云端导入数据到新手机里。&lt;/p&gt;
&lt;p&gt;在 iOS 平台，你可以登陆微软账号，借助 Exchange 服务，你可以快速地同步你的通讯录、记事本、待办列表和日历事件。哪怕在一个相对封闭的苹果生态里，Apple 也不至于封杀所有的开放协议，将用户锁定在这个平台。&lt;/p&gt;
&lt;p&gt;可是，在 ColorOS 6 中，我找不到同等的设置。在 Android 平台上，一般情况下是通过 设置 - 账户 选项卡来添加一个 &lt;code&gt;Microsoft Exchange ActiveSync&lt;/code&gt; 服务来添加同样的事情的。但是，在 ColorOS 6 中，连一个普通的邮箱 app 也没有，我怀疑系统顺便把这个同步设置也砍掉了。这让我很痛苦。&lt;/p&gt;
&lt;p&gt;诚然，邮箱 App 的缺失可以通过下载第三方来解决，但我认为这不属于一个一线大厂可以省略的事情。虽然，我现在找到了不少方法去 work around，但是这些操作都是反直觉的。你能想象你需要打电话给某个联系人的时候不是打开联系人而是打开一个叫 Outlook 的 App 再多层跳转吗？更不必说，少了这套对日常的 GTD 管理产生了不少的困扰。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/7B28716735306A1B4CD64ED46BD5FA6E.PNG&#34; alt=&#34;1&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;依旧糟糕的权限管理&#34;&gt;依旧糟糕的权限管理&lt;/h3&gt;
&lt;p&gt;在购买手机之前，我也曾打听安卓系统现在的权限管理到底怎么样了？朋友跟我说，比以前进步很大了，能单独设置不同的权限，也不至于不给权限就完全不能用。我的实际体验又如何呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;烦人的权限阻止&lt;/strong&gt;：事实上，你也确实可以不给一些非必要的权限，比如支付宝HK，希望读取手机状态，读取位置信息。你可以选择不给，但是每一次打开 App，它都会好心提醒你一次 For your security 希望你授权以上权限。难道出卖我的权限能让我更安全吗？&lt;/p&gt;
&lt;p&gt;同样的，每一次系统帮忙阻止了 App 索取某一项权限，它也会好心地弹小窗告诉用户它帮你阻止了，可是你吵到我看屏幕了好吗？后来，我知道了在 Phone Manager App 中可以取消这个 Toast，但是，为什么不是在 Settings 中？我本来不想打开任何的鸡肋系统 App 以及授予任何权限的，你让我破戒了。&lt;/p&gt;
&lt;p&gt;**摸不着头脑的 Storage 权限：**绝大部分的 App 都申请权限访问存储权限，理由有很多缓存需要，下载需要等。不给这个权限就不让用了: (  可是，为什么有部分 App 就可以不需要该权限就能正常使用呢？我知道的，Android 没有相册权限，授予了 Storage 权限也等同于授予了整个相册可读了。&lt;/p&gt;
&lt;p&gt;**无效的不再打扰：**当你想阻止某些权限的时候，可以直接选择 Cancel 且勾选 Don&amp;rsquo;t ask again。但是，不是每一次这个选项都有效的。比如，Bose Connect 这个 App，每当我连接蓝牙的时候，都有弹窗显示希望授权 Contacts 权限，无论你上一次是否让它 Don&amp;rsquo;t ask again。我看过的，Bose Connect 的索取权限列表并没有 Contacts，可能是系统嫁祸你索取的这个权限，也有可能是一个你是一个假的乖宝宝。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/A971B421F2D21462D9475CBA97A97BE5.PNG&#34; alt=&#34;1&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;但是，总的来说，安卓手机在权限管理这一块给了我很大的改观，进步非常明显，甚至高于我的预期。授权的方式细化了很多，优质的 App 们也不再过多地索取权限了，各司其职其乐融融相处地还算是挺愉快的。不过呢，再吐槽一句，为什么 OPPO+ App 默认有全部权限~  : )&lt;/p&gt;
&lt;h3 id=&#34;严重不足的小红点&#34;&gt;严重不足的小红点&lt;/h3&gt;
&lt;h4 id=&#34;通知数量的小红点&#34;&gt;通知数量的小红点&lt;/h4&gt;
&lt;p&gt;不知道人类（OPPO 产品经理们）是否被曾经的满屏幕的小红点恐惧所笼罩，在 ColorOS 6 中的小红点功能分为了三级，分别为“Don&amp;rsquo;t Show Badge”、“Dot Badge”、“Number Badge”。但是呢，不是所有的 App 都有资格拥有这三级程度通知的，也不是所有的 App 都对这三级设置有效的，而且我至今搞不懂它们的分类。&lt;/p&gt;
&lt;p&gt;我理解至少应有有数字权限的软件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wechat：老大哥，拥有 Number Badge 权限&lt;/li&gt;
&lt;li&gt;WhatsApp：二哥，拥有 Number Badge 权限&lt;/li&gt;
&lt;li&gt;Messenger：三哥，拥有 Number Badge 权限&lt;/li&gt;
&lt;li&gt;Telegram：小弟1号，不配拥有  Number Badge 权限&lt;/li&gt;
&lt;li&gt;Gmail：小弟2号，不配拥有  Number Badge 权限&lt;/li&gt;
&lt;li&gt;Outlook：小弟3号，不配拥有  Number Badge 权限&lt;/li&gt;
&lt;li&gt;陌生人社交应用们：更加不配拥有  Number Badge 权限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我真的不能够理解，对于开放的安卓系统，一视同仁给用户自由的选择权力不好吗？上述这些举例里面，缺失了的通知数量的功能，给我增加了不少的麻烦，不是特别重要的软件还好，邮箱 App 的缺失是最难受的，越是重要的事情越是通过正式邮件发送的。尤其是，课程调整、社会安全、会议邀请等事宜。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/69A31389A0C9C44B3855262324C1552E.PNG&#34; alt=&#34;1&#34;  /&gt;
&lt;/p&gt;
&lt;h4 id=&#34;低效或无效的小红点&#34;&gt;低效或无效的小红点&lt;/h4&gt;
&lt;p&gt;何谓低效？在 ColorOS 6 系统中的 Dot Badge 功能，并不是以【小红点】的形式提醒你有新通知的，而是通过当前 App 的图标颜色均值通知你的。颜色的基调更偏向于图标底色，而且圆点的大小和图标的大小比例悬殊，在这样的情况下其实没有办法起到有效的通知作用。&lt;/p&gt;
&lt;p&gt;何谓无效？在 Gmail 和 Outlook 中，Dot Badge 功能直接失效，哪怕功能是开启的。缺少数字通知已经让我很难受了，连最后的小圆点通知也没有了，真的不合适。如果我没有主动轮询通知中心，我是不会知道有新邮件到来的。&lt;/p&gt;
&lt;h4 id=&#34;软件更新的小红点&#34;&gt;软件更新的小红点&lt;/h4&gt;
&lt;p&gt;准确的来说，这个也不是【小红点】，而是【小蓝点】。我习惯性打开应用商场软件自动更新，但一个软件更新了之后提醒用户，真的这么重要吗？我没有办法关掉桌面的小蓝点，这只是在变相地让我回归“满屏幕的小红点的恐惧”。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/C02FC48070A685A71838C0DDB7F6D097.PNG&#34; alt=&#34;1&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;breeno-要你何用&#34;&gt;Breeno 要你何用&lt;/h3&gt;
&lt;h4 id=&#34;breeno-space&#34;&gt;Breeno Space&lt;/h4&gt;
&lt;p&gt;一个底部快捷方式，通过同时短按 电源键和音量加 来触发。在我购入机器的第一天我试用了这功能，触发没有问题；但是一个月后的今天，只剩下我在冰冷的风中摁了好多遍，也没有反应。&lt;/p&gt;
&lt;h4 id=&#34;breeno-voice&#34;&gt;Breeno Voice&lt;/h4&gt;
&lt;p&gt;小布小布你在哪里？但我还在用 iOS 的时候，我常用的比较多的一个功能就是当我找不到手机的时候，高呼一声 “Hey Siri” 它能有所反应。但是，哪怕面对面喊 “小布小布”，成功率也不到 1/3，同样的情况也出现在我家人的 “小爱同学” 上面。我不太清楚安卓旗舰里是否有协处理器的存在，还是以小核心配合时钟替代了协处理器，无论是抬腕唤醒，双击屏幕亮屏抑或是语音助手，在这个手机上的表现都太奇怪了。&lt;/p&gt;
&lt;h4 id=&#34;breeno-feed&#34;&gt;Breeno Feed&lt;/h4&gt;
&lt;p&gt;俗称，负一屏，是 ColorOS 智慧场景识别中的主打功能。首先，这个负一屏无法关掉，你可以选择不启用，但是没有办法让屏幕不存在负一屏。在我长期往来深港的过程，汇率换算、当地实用信息、跨境服务、旅游服务，一个也没有触发。反倒是通过热更新，帮助我将支付宝集五福的功能集成到负一屏中，可是你有问过我需要吗？还好，它可以关闭。&lt;/p&gt;
&lt;p&gt;其他的 Breeno 功能，我不太敢用或没有需求，没有深度体验，就不评价了。有很多功能不断丰富着人们的场景，是一件好事情，也期望下一个版本能打磨更好一些吧。&lt;/p&gt;
&lt;h3 id=&#34;图库管理逻辑成谜&#34;&gt;图库管理逻辑成谜&lt;/h3&gt;
&lt;p&gt;我还是没有办法搞懂图库的逻辑，先说明我从未打开过任何文件管理 App。首先从 Photos 栏目并不是显示所有图片的，比如我从 App 中下载了一张图，它会存在于 图库/Albums/App 里面，但是如果我需要从微信扫码或分享该张照片，我并不能快速找到它，因为它似乎需要一会儿才会被微信的图库管理给索引到。但是呢，某些 App 中非主动下载的图片，却有可能出现在 Photos 栏目中。&lt;/p&gt;
&lt;p&gt;重复出现的图片问题也比较困扰我，写文章的拍照图片在我图库里出现了两重备份。截图功能没有主动保存功能，但我触发截图时往往需要编辑区域和加标注等，但是编辑完没有保存功能，返回就是保存=。=，我多害怕辛苦编辑的图片丢失重来。同时，它还造成了原截图和二次编辑截图在图库中各存一份。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/A03F176BCF4F8184754E7865AC045659.PNG&#34; alt=&#34;1&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;其他的一些杂项&#34;&gt;其他的一些杂项&lt;/h3&gt;
&lt;p&gt;一些比较小的事项，我就在这里简单说一下吧，通过 + 代表我得到了一些正面的体验，- 代表我失去了一些体验，但这些都是在我预期之中的。&lt;/p&gt;
&lt;p&gt;+可更换的桌面主题（收费）&lt;/p&gt;
&lt;p&gt;+应用跳转基本正常&lt;/p&gt;
&lt;p&gt;+两种单手模式（全局+键盘）&lt;/p&gt;
&lt;p&gt;+全功能NFC&lt;/p&gt;
&lt;p&gt;+系统级美颜（在第三方 App）&lt;/p&gt;
&lt;p&gt;-全局的第三方密码管理接口&lt;/p&gt;
&lt;p&gt;-相机的4800万像素需要每次手动开启&lt;/p&gt;
&lt;p&gt;-桌面下拉全局搜索（无法关闭+广告）&lt;/p&gt;
&lt;p&gt;-微小的逻辑交互混乱（下拉-&amp;gt;右侧弹出）&lt;/p&gt;
&lt;p&gt;-系统支持的VPN协议太少（通过 App 弥补）&lt;/p&gt;
&lt;p&gt;-失去灵性的屏幕自动调节&lt;/p&gt;
&lt;p&gt;-关键的优质小应用&lt;/p&gt;
&lt;p&gt;-应用内提示新版本（应用的逻辑问题）&lt;/p&gt;
&lt;h2 id=&#34;硬件加持的黑魔法&#34;&gt;硬件加持的黑魔法&lt;/h2&gt;
&lt;p&gt;得益于硬件的加持，这台安卓手机有着惊喜般的黑魔法体验，虽然也是一些老生详谈。&lt;/p&gt;
&lt;h3 id=&#34;90hz-刷新率&#34;&gt;90Hz 刷新率&lt;/h3&gt;
&lt;p&gt;有些人认为，高刷新率只有在快速滚动屏幕的时候才有对比。从我的个人主观感受来说，不是这样的。我日常也只是慢慢浏览 RSS 文章。从 60 Hz 到 90 Hz，它没有给我任何的惊喜，真的只有在快速滚动时才能感受到。但是从 90 Hz 用回 60 Hz，它给我的感受是一时无法适应的&amp;quot;卡慢&amp;quot;。这种感觉，就像是我第一次长时间佩戴降噪耳机在人群中摘下来一样的强烈。&lt;/p&gt;
&lt;h3 id=&#34;4000-mah--65w-的快充&#34;&gt;4000 mAh + 65W 的快充&lt;/h3&gt;
&lt;p&gt;我更愿意将这两个放在一起讲。先举一个日常的场景，跟朋友两个人去香港逛吃逛吃买买买的场景下，大量依赖地图导航+美食评价+代购沟通软件，一整天下来我出门 100% 的电量回家是 51% 的电量。它对于我每一天的日常情况下是富足有余的。&lt;/p&gt;
&lt;p&gt;作为目前手机阵营最快的充电速度，半小时完全充满电会比其他 18~22W快充 有更好的体验吗？还真的有。生活中，我们往往想起来需要充电时是出门前的10分钟，而往往你也有可以动态调节稍微再晚10分钟出门的可能性，配合不一定非要充满就能满足一整天的实际情况，它能给你带来莫大的安全感。&lt;/p&gt;
&lt;p&gt;所以，从我的视角来看，4000 mAh 配合 40W+ 的充电速度，是一个在生活中相对灵活的电充比组合。当然，这也要系统和软件配合不那么耗电才行。而这个组合，能让你在更多的实际场景中得到比较好的体验。&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;那么，最后我该给出怎样的综合体验评论呢？说实话，我也很纠结。&lt;/p&gt;
&lt;p&gt;但是，如果硬要有一个结论，我的结论是，我依然要放弃 Android 回到 iOS 的阵营。生产力和生产效率是我对手机的第一要求，我认为它不可用金钱来衡量。&lt;/p&gt;
&lt;p&gt;最后，感谢大家的阅读，不同的手机系统都有其合适的用户群，存在即合理。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>我的科研方法论</title>
      <link>https://blog.wsine.top/posts/my-research-methodology/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/my-research-methodology/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;去年9月份开学，一只脚正式踏进了科研圈。经过了一个多学期的学习，现在也总结了一些经验。所以今天就打算来聊聊，我在科研上面的一些方法和经验。但是，我的这些思考也只是经过了半年的迭代而已，可能还需要完善，但希望对你有用。&lt;/p&gt;
&lt;h2 id=&#34;科研新人&#34;&gt;科研新人&lt;/h2&gt;
&lt;h3 id=&#34;幸运的课程&#34;&gt;幸运的课程&lt;/h3&gt;
&lt;p&gt;初来乍到，我其实对科研实际是干什么的，也不太懂。但是，所有现成的方法都是有迹可循，而这个就是应该被传承的经验与方法。我很庆幸，学校有两门 PhD 新生的必修课，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comprehensive Studies in Selected Topics in Computer Science&lt;/li&gt;
&lt;li&gt;Research in Computer Science&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先来说说第一门课，课程的主要组织内容是 每周一门课请 Department 里面的 Professors 或者 Visiting Scholar 来给大家讲述一下他们对科研的理解与他们的研究课题。它没有太大的 Work load 给到学生，但是对学生拓宽他们对别的领域的理解，去除对科研的迷雾很有帮助。&lt;/p&gt;
&lt;p&gt;诚然，有不少从本科直接读博士的学生，他们对行业或对某个领域的理解不深，仅仅是对某一名词觉得比较热门，感兴趣就选择了当前的导师做着一些未知的事情。但是，如果真的可以听一下自己导师做一遍现场 Presentation 你会有更好的理解自己要做什么。或者发现，自己真正感兴趣的反而是别的课题，也有方法与途径去协商转换，从而实现双赢。&lt;/p&gt;
&lt;p&gt;这门课的另一个线下任务是要求学生去参加一些 Seminar 交流，然后写不少于 2000 个词的 Report。这其实很痛苦的，2000 个单词真的好多啊，也不属于自己的研究课题，但是在这其中，你学会了如何聆听别人的 Talk，学会了如何组织文字和语言去表达你听到了什么。毕竟，带着任务去听，和没有压力去听，那种认真程度是不一样的（笑）。&lt;/p&gt;
&lt;p&gt;然后另外一门课，它的本质是一个 Mini Project，它不是一门常规的组织学生到课堂的课程，而是要求导师跟学生每周有不少于 2 个小时的 Meeting 交流，指导学生如何进行 Research，包括但不限于如何提出一个合格的 IDEA，如何组织实验，如何写一篇研究型的文章。&lt;/p&gt;
&lt;p&gt;在这一门课程里，由于课程有截止时间，你会快速地大量学到自己的导师的一些技能和技巧，这将是一笔巨大的财富。而且，由于有强制性的要求，你将不会遇到一周都见不到导师一面的尴尬放羊状态，浪费时间。而在每一步的 Step by Step 的过程中，你逐渐掌握了 what is Research in actual（笑），然后你就可以在某些场合自如地交流，“I am a new researcher on xxx, and bla bla&amp;hellip;”&lt;/p&gt;
&lt;p&gt;我很幸运，作为一个新人，能有这样一个完善的流程指导我进入这个大门。也因为这是一个流程，所以它本质上是强制性的，减少了很多不必要的麻烦。同时，也给了导师一个更好认识你的机会。&lt;/p&gt;
&lt;h3 id=&#34;两个微小的建议&#34;&gt;两个微小的建议&lt;/h3&gt;
&lt;p&gt;当你初入江湖，迷茫不知道该干什么的时候，不妨认真地跟导师沟通一番，寻求一些经验。如果不能从导师那获得一些有用的经验，不妨主动去探索一些顶尖的大学是怎么教导学生去做科研的，模仿他们的方式总是比自己在黑暗中探索高效一些。&lt;/p&gt;
&lt;p&gt;而另一方面，一个导师能教给你的东西，总是少于两个导师能教给你的东西。所以，please feel free to contact other supervisor for advise。尤其是一些较为年长的博士导师，我发现他们的思维里更加蕴藏着丰富的财富。一般情况下，导师们也是很乐意给学生帮助的。&lt;/p&gt;
&lt;h2 id=&#34;科研方法&#34;&gt;科研方法&lt;/h2&gt;
&lt;p&gt;正如一千个读者就有一千个哈姆雷特一样，我认为每个人的方法都是不一样的，所以我的方法和观点可能不一定有普遍性，但也请希望不要过度指责。&lt;/p&gt;
&lt;h3 id=&#34;区分概念&#34;&gt;区分概念&lt;/h3&gt;
&lt;p&gt;刚入门的时候，我一直在跟老板 argue 各种问题，也被折磨地死去活来，他总是在用各种看似不奇怪的概念但又极度抽象的概念来问我，在没有搞懂他们的区别之前，并不允许我做课题和相关的实验。&lt;/p&gt;
&lt;p&gt;那他们是什么呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Research Topic&lt;/li&gt;
&lt;li&gt;Research Domain&lt;/li&gt;
&lt;li&gt;Research Problem&lt;/li&gt;
&lt;li&gt;Research Challenge&lt;/li&gt;
&lt;li&gt;Research Novelty&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这几个名词，看似相近但又不尽相同，实在是折磨人的小妖精们。我花了快一个月的时间才搞懂它们真正的区别。但是在这里，我并不打算向读者去阐述我对它们的理解，一来是它们确实很难在文字/中文的语境下表达，二来是这个探索的过程也是一笔无形的财富。&lt;/p&gt;
&lt;p&gt;所以我的建议是，如果你觉得自己还没有办法区分它们，不妨认真思考一下，在日常读 Paper 的过程中找出答案。当你有办法确定性得区别并找到真正的 Challenge 的时候，某些情况下，与之相应的 Solution 也随之浮现在你的脑海中了。&lt;/p&gt;
&lt;h3 id=&#34;从新到更新-回顾旧&#34;&gt;从新到更新 回顾旧&lt;/h3&gt;
&lt;p&gt;我相信很多人都听说过一个学习领域的经典模型。由于没有找到出处，所以我随手画了一张意思意思。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/3B4B2EF7A58AA69AB2B33D8BC049E3F8.jpg&#34; alt=&#34;photo6114106870840011279&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;假设我们以一个黑色的圆形代表这整个世界现有的知识，你刚出生的你处于圆心的位置，对一切的东西都是未知。经历小学阶段的学习，你学会了浅绿色的知识；紧接着，中学阶段，掌握了黄色部分的知识；大学阶段，选择了自己喜欢的专业，朝着一个大方向继续学习这个领域内的知识；研究生阶段，你会自主地去探索当前比较前沿的知识，在某一个小小的子领域内触碰到当前知识的边界；而博士生阶段，你将面对孤独在这个子领域更进一步，扩展现有的知识，成功这个子子领域的专家。&lt;/p&gt;
&lt;p&gt;但是引入了这个模型后，如果从历史的长河里面来看，如果每次都需要从圆心开始探索到边界，你将要耗费大量的时间才能真正开始属于你的 Research。所以更加常规的办法是关注最近两年内在顶会发表的相关文章，仔细阅读并跟上前沿的研究。然后你在逐步扩大知识边界的同时，也必会需要回顾前人当时为什么这么做去创新出一些特定的东西，所以研究的过程反而是前进和后退同时进行的。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/C029ADE261D7FC6D8A5009733EFF3530.jpg&#34; alt=&#34;photo6113789520001477080&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;然而，万事开头难，如果没有科研经历，要搞懂第一篇 Paper，也是比较吃力的。我这里给出的建议是，尽量先看 Technical Report 和 Survey 。这是两种比较特殊的 Research Paper。前者能够很好的告诉你目前技术的瓶颈是什么，从而让你思考和寻找真正的 Challenge 是什么；后者已经帮你总结了一个特定子领域的问题是什么以及目前的研究者们的 idea 和 solution，快速搞懂它能帮助你铺垫 Background 知识以及有了一个总览的全局观，但是如果要在这个子领域继续探索，深入阅读相关的每一篇论文还是必不可少的，然而它能使你事半功倍。&lt;/p&gt;
&lt;h2 id=&#34;科研神器&#34;&gt;科研神器&lt;/h2&gt;
&lt;p&gt;说到科研，不得不提一下你肯定需要一款趁手的 论文管理 工具。目前来说比较流行的有：&lt;a href=&#34;https://www.mendeley.com/&#34;&gt;Mendeley&lt;/a&gt;、&lt;a href=&#34;https://endnote.com/&#34;&gt;Endnote&lt;/a&gt; 和 &lt;a href=&#34;https://www.zotero.org/&#34;&gt;Zotero&lt;/a&gt; 这三款工具。不管用什么软件，你都需要有一定的准则去使用和管理他们。&lt;/p&gt;
&lt;h3 id=&#34;inbox&#34;&gt;Inbox&lt;/h3&gt;
&lt;p&gt;首先不要过分追求阅读论文的数量，论文在精不在多。从 GTD 法则里面迁移来的经验，在这里也适用。你要思考的是，挑选合适的有深度的论文加入你的待阅读列表里面，而且建议这个列表的长度不要超过个位数。每一篇加入进去的 Paper，都应该被你快速阅读过 Abstract 然后判断它可能有价值的。&lt;/p&gt;
&lt;h3 id=&#34;classification&#34;&gt;Classification&lt;/h3&gt;
&lt;p&gt;这个其实相对比较好理解，就像文件管理和书签管理一样，每个 Researcher 都不会仅有唯一一个子子领域的，不然真的遇到瓶颈，如果没有办法切换思路，那可能一辈子都无法绕过这个坎。多涉猎一些东西，它反而可能帮助你拓展思路去解决你的主研究领域的问题。对了，记得应该按一定的规则重命名文件，不然看到 &lt;code&gt;p909-sivathanu.pdf&lt;/code&gt; 你真的能想起来它是什么吗？&lt;/p&gt;
&lt;h3 id=&#34;tags&#34;&gt;Tags&lt;/h3&gt;
&lt;p&gt;对于同一个问题，往往有不少不同的方法去解决，在文章结构里面一般会有一章 Related Work，而人们传播性地用同一个类别名称去分类这些方法。参考他们，在论文管理软件里面，依据这些类别名称给 Paper 打上标签，能够帮助你快速索引被遗忘的某一技术，更重要的是在你自己需要写 Paper 的时候，Related Work 这一章几乎就是信手拈来的事情，只要你有好好维护这个 Tags。同样的，统一的 Highlight 颜色和符号也能帮你快速索引，比如红色高亮代表关键点，蓝色代表实验设置，&lt;code&gt;+ - ?&lt;/code&gt; 分别代表某些信息点等。&lt;/p&gt;
&lt;h3 id=&#34;comment&#34;&gt;Comment&lt;/h3&gt;
&lt;p&gt;我个人喜欢写一些总结性的东西，对于每一篇深度有思想的文章，我都喜欢给它们写上一些短小的话来 Summarize 文章里面的 idea，可能只有一句话，也可能像微博一样有 140 词的短文，只要它能正确描述就好了，毕竟人类总是健忘的。每当你没有太多想法的时候，一篇一篇看这些 Idea Summary 也能使你提起斗志，去投入到枯燥的科研中，亦或者偶然发现某个 Idea 正好能解决你当前的困境。&lt;/p&gt;
&lt;p&gt;真正的科研神器并不是某一款好得不得了的软件，而是如何指导你使用它们的方法论，在我的世界观里，工具永远在变，不变的是在背后支撑这套工具的理论。后面有机会我再专门写一篇文章来介绍我的工作流吧，用最趁手的工具尽可能自动化这一切。&lt;/p&gt;
&lt;h2 id=&#34;科研好物&#34;&gt;科研好物&lt;/h2&gt;
&lt;p&gt;最后，分享一个超好用的科研好物，帮助你解决颈椎病问题（笑）。其实就是一个平面支架，但是它有可调节的活动支点，可以变换出不同的模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;坐姿阅读模式&lt;/li&gt;
&lt;li&gt;站姿阅读模式&lt;/li&gt;
&lt;li&gt;书写模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;稳定性和外观都无可挑剔，不用每天长时间低着头写字真的太棒了~~~&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/9AF6E8BD3A39C7FF4FAC8A1606505328.png&#34; alt=&#34;Presentation1&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;以上，就是我在科研路上提高效率的一些方法感悟，感谢阅读。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Microsoft Terminal 颜值在线的终端模拟器</title>
      <link>https://blog.wsine.top/posts/beautiful-microsoft-terminal/</link>
      <pubDate>Mon, 09 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/beautiful-microsoft-terminal/</guid>
      <description>&lt;p&gt;在 Microsoft Build 2019 的大会上，微软给我们带来了一款全新设计的终端模拟器 Microsoft Terminal. 虽然过度好看的宣传片和实际的效果有着巨大的落差，但是也不影响它在 Windows 阵营里取得最高的颜值称号。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/1746B559BC9685F1E4D9BFFF9F5F9EAC.png&#34; alt=&#34;terminal&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;从 Preview v0.2 版本开始我就试用了这款工具，到今天的 Preview v0.6 版本最后关键的问题修复后我才想说来跟大家分享一下这个工具。&lt;/p&gt;
&lt;h2 id=&#34;安装-terminal&#34;&gt;安装 Terminal&lt;/h2&gt;
&lt;p&gt;Microsoft Terminal （下称 Terminal） 明确要求了系统版本至少需要 “Windows 10 version 18362” 或以上才能使用。&lt;/p&gt;
&lt;p&gt;而现在的安装方法也很简单，从 Microsoft Store 里面搜索 “Microsoft Terminal” 就可以直接安装和卸载了。&lt;/p&gt;
&lt;p&gt;但是到目前为止，Terminal 还是处于一个 Preview 的阶段，功能上来说不会囊括所有的用户的期望，如果想要有自己期望的功能，可以在官方的开源仓库的 &lt;a href=&#34;https://github.com/microsoft/terminal/issues&#34;&gt;Github issue&lt;/a&gt; 上发 Feature Request 哟~&lt;/p&gt;
&lt;h2 id=&#34;全新配置管理方式&#34;&gt;全新配置管理方式&lt;/h2&gt;
&lt;p&gt;Terminal 采用了 JSON 文件作为它的配置文件，这就意味着你可以将整个配置文件备份，然后在别的地方下载下来快速使用，十分的方便。&lt;/p&gt;
&lt;p&gt;实际使我眼前一亮的点是，当我用 Sublime 修改该配置文件保存的时候，已经打开了的 Terminal 的样式能实时发生改变，这大大提高了用户调整配置的便捷程度，而很多工具要做到这点都是将设置界面做成软件的一部分才能实现的，这点给 Terminal 大大的加分。&lt;/p&gt;
&lt;p&gt;由于是 JSON 纯文本配置文件，总是有可能出现手抖或者配置出错的问题，这时候保存配置文件会被提示文件哪里的配置有问题，而该次的保存不会生效，实际调试样式还是十分方便的。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/52104FB432B5BCF495FA7E7C056DBA6C.gif&#34; alt=&#34;vim&#34;  /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;less-is-more-的配置项&#34;&gt;Less is More 的配置项&lt;/h2&gt;
&lt;p&gt;Terminal 提供的配置项不多，但我觉得 98% 的人也只需要修改到这些配置项就足够了，下面来跟大家陈列一下它提供的配置项吧（我只挑重点的来展示）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;defaultProfile：默认启动的方案，可以为 CMD，PowerShell，Azure 等&lt;/li&gt;
&lt;li&gt;keybindings：快捷键映射&lt;/li&gt;
&lt;li&gt;acrylic：透明度&lt;/li&gt;
&lt;li&gt;background：背景颜色或者背景图片 &lt;del&gt;动漫女神&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;colorScheme：配色方案，可以自定义配色&lt;/li&gt;
&lt;li&gt;commandline：默认启动的程序，一般为 cmd.exe 等&lt;/li&gt;
&lt;li&gt;cursorColor：光标颜色&lt;/li&gt;
&lt;li&gt;cursorShape：光标形状&lt;/li&gt;
&lt;li&gt;fontFace：字体方案&lt;/li&gt;
&lt;li&gt;fontSize：字体大小&lt;/li&gt;
&lt;li&gt;icon：该方案的代表图标&lt;/li&gt;
&lt;li&gt;name：该方案的名称&lt;/li&gt;
&lt;li&gt;padding：外边距&lt;/li&gt;
&lt;li&gt;historySize：保留的历史输出大小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般情况下，当你调整好了显示的字体和大小，调整背景和透明度，还有配色方案，基本上就把一个终端模拟器的外观给定义好了。&lt;/p&gt;
&lt;p&gt;由于是 JSON 配置文件，文件里面也不能像以前的方式一样给出选项，微软将一份配置文件说明放在了仓库中 =&amp;gt; &lt;a href=&#34;https://github.com/microsoft/terminal/blob/master/doc/cascadia/SettingsSchema.md&#34;&gt;Settings Schema&lt;/a&gt; . 但是却没有在配置文件里面提供链接，我觉得这点还是需要改进的。&lt;/p&gt;
&lt;h2 id=&#34;功能的最后一块拼图&#34;&gt;功能的最后一块拼图&lt;/h2&gt;
&lt;p&gt;谈及终端模拟器，一般情况下我会从一些特定的功能去考察它是否功能完备，以及它的加分点有哪些&lt;/p&gt;
&lt;h3 id=&#34;gpu加速&#34;&gt;GPU加速&lt;/h3&gt;
&lt;p&gt;这个就属于新时代的终端模拟器的代表功能了，之前在 Manjaro 下面使用 Alacritty 终端模拟器时才体会到在GPU加速的这一功能。在大量的文本打印的时候，得益于GPU的加速，丝毫没有那种播放PPT的卡顿感，这个对于长时间在终端下工作的我来说还是十分舒服的。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/CC87571D29A2461C0502CF5A3C9268A9.gif&#34; alt=&#34;vim&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;多标签&#34;&gt;多标签&lt;/h3&gt;
&lt;p&gt;诚然，很多的终端模拟器都自带了多标签，比如 xshell，mobaxterm 和 cmder 等。前两者在工作用途上是收费的，后者总是占用了太多的 Linux 快捷键。之前我不得不使用 CMD 代替它们（发现意外的好用），现在 Terminal 来将 CMD 缺失的多标签功能给补齐了。&lt;/p&gt;
&lt;h3 id=&#34;emoji支持&#34;&gt;Emoji支持&lt;/h3&gt;
&lt;p&gt;虽然微软平台的Emoji真的很丑，但是有总比没有好不是嘛，我还是很喜欢在Git commit里面加点emoji让它好看一点的。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/E56D8ABFB6EA3F8AF3782EC3B0DBFF0B.png&#34; alt=&#34;vim&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;ncurses的支持&#34;&gt;NCURSES的支持&lt;/h3&gt;
&lt;p&gt;对于重度使用终端的人来说，基本上离不开两个重要的工具，文本编辑器（Vim / Emacs）和终端复用器（Tmux / Screen）。而它们的底层，其实都是由 ncurses 来提供支持的。这个库可以让你的终端除了不断打印出新的东西，还能后退擦除一些东西，从而造成屏幕不断刷新的效果。&lt;/p&gt;
&lt;p&gt;通过我两周以来的实际体验，在我的日常使用中完全没有问题，因此才会想推荐给大家。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/63A4C2739333EFDD11711E7F9D791BA8.png&#34; alt=&#34;vim&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/C85D32FC99D632208A9B029AAD6E2FB3.png&#34; alt=&#34;tmux&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;复制与粘贴&#34;&gt;复制与粘贴&lt;/h3&gt;
&lt;p&gt;这个就是我指的最后的一块拼图。在 v0.6 版本之前，Terminal 的复制粘贴功能一直有很大的问题。在 Github issue 中搜索 “copy / paste” 等关键字就可以知道。开发团队为了兼容微软长期以来的 Ctrl + C 的复制快捷键做了大量的工作。&lt;/p&gt;
&lt;p&gt;v0.6 版本以前，复制多段文字的时候，在别的地方粘贴总是会出现超长的一行，比如&lt;code&gt;a\nb&lt;/code&gt;可能会被粘贴成&lt;code&gt;a \space*555 b&lt;/code&gt;的情况，十分影响正常的工作，可惜我已经展示不了了。之前总是需要借助 tmux + http 才能绕过这个问题。现在这个恼人的问题终于被修复了，也就是说可以被大家广泛使用了。&lt;/p&gt;
&lt;h3 id=&#34;基础的功能&#34;&gt;基础的功能&lt;/h3&gt;
&lt;p&gt;Terminal 本身还支持 xterm-256 color ，UTF-8 和 unicode 编码，这些我认为都是必要的功能，这里就不细说了。&lt;/p&gt;
&lt;h2 id=&#34;我的使用分享&#34;&gt;我的使用分享&lt;/h2&gt;
&lt;p&gt;我最近使用的是微软为开发者打造的一款字体 Cascadia，开源仓库在这里 =&amp;gt; &lt;a href=&#34;https://github.com/microsoft/cascadia-code/releases&#34;&gt;Cascadia Code&lt;/a&gt; . 我很喜欢它，得益于对 unicode 编码的支持，在GPU加速的情况下，它总能给我很多很好看的小惊喜，比如&lt;code&gt;=&amp;gt;&lt;/code&gt;会被渲染成一个完整的箭头，并且跟随进度条移动。更多的就等你们使用发掘啦。&lt;/p&gt;
&lt;p&gt;我用的是里面默认的 &amp;ldquo;One Half Dark&amp;rdquo; 配色，我觉得很好看，搭配 70% 的透明度和 5 pixel 的外边距，整体效果很不错。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/8480A1CD36C62A350D33E5F09904EDAC.png&#34; alt=&#34;configuration&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;最后放上我的配置图，剩下的就大家去尝试一下吧~&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chrome在Windows找回熟悉的Alt &#43; Num切换标签页</title>
      <link>https://blog.wsine.top/posts/alt-num-switch-tab-in-chrome-on-windows/</link>
      <pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/alt-num-switch-tab-in-chrome-on-windows/</guid>
      <description>&lt;p&gt;在不同的系统和软件中，我都喜欢尽可能用同一套快捷键方案去完成相同的功能，以减少自己的学习和记忆成本，最大化效率。但是，哪怕是同一个应用，由于不同平台的默认快捷键不一样，频繁切换平台的迁移学习也很辛苦。&lt;/p&gt;
&lt;p&gt;比如 Chrome 浏览器中，切换标签页的方式在不同的平台上不一样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows：Ctrl + Num&lt;/li&gt;
&lt;li&gt;Linux：Alt + Num&lt;/li&gt;
&lt;li&gt;Mac：Cmd + Num&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后两者由于键位所处的位置大致相同，所以哪怕没有记忆也不会造成多大的割裂感。但是，Windows 下面的这套快捷键实在是太难受了，本文就是教你如何找回熟悉的感觉。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/FF5B74693EE093B3A0810E93810F336D.png&#34; alt=&#34;FF5B74693EE093B3A0810E93810F336D&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;这里我们需要借助的软件是 Vimium，相信已经有不少文章介绍过它了。在这里我们需要用到它 Custom key mappings 的功能。Vimium 本身提供很多优秀的内建功能。而我们这里需要用到的是 &lt;code&gt;firstTab&lt;/code&gt; 的功能。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/72B87484BA371209846EF02C6B381FE9.png&#34; alt=&#34;72B87484BA371209846EF02C6B381FE9&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;你可能会觉得这个功能并不足够完成 &lt;code&gt;Alt + 2&lt;/code&gt;或 &lt;code&gt;Alt + 3&lt;/code&gt; 等映射，其实不然，仔细阅读它的开源代码你会发现它本身还提供 option 的功能，简单点来说配置方案是酱紫的。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/939C6CA558E0E7230390D3763ED98731.png&#34; alt=&#34;939C6CA558E0E7230390D3763ED98731&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;这里我把映射也一并附上。我个人只习惯用前面几个固定的标签页，你可以根据自己习惯增减。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;map &amp;lt;a-1&amp;gt; firstTab
map &amp;lt;a-2&amp;gt; firstTab count=2
map &amp;lt;a-3&amp;gt; firstTab count=3
map &amp;lt;a-4&amp;gt; firstTab count=4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有了这套方案，我可以很容易的快速回到长期放在第一个标签的 Gmail 页面或者从 Jupyter Notebook 的编程页面中跳出去快速搜索一些东西，而不用借助鼠标，从而提高效率。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>国产优质搜索引擎Dogedoge多吉搜索</title>
      <link>https://blog.wsine.top/posts/dogedoge-search-engine/</link>
      <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/dogedoge-search-engine/</guid>
      <description>&lt;p&gt;今天想跟大家聊聊的是一个新晋的搜索引擎。&lt;/p&gt;
&lt;p&gt;自从百度加入了竞价排名，对于搜索的成本无形中增加了很多；使用浏览器插件去除广告，也是道高一尺魔高一丈，搜索成本不断在波动，而且也对不起一些优秀的小型网站；使用谷歌搜索，每次想快速搜索一些东西，总是需要多花点时间做前期 setup，这时间成本高于我手动筛选的百度搜索结果；使用 DuckDuckGo 一段时间后，也无法使用了；而必应搜索引擎给我感觉并没有跟前者拉开明显的差距。&lt;/p&gt;
&lt;p&gt;因此，通过不断的尝试，也让我遇到了今天的主角 —— 多吉搜索。下面仅从用户体验方面介绍一下这款搜索引擎。&lt;/p&gt;
&lt;h2 id=&#34;第一印象&#34;&gt;第一印象&lt;/h2&gt;
&lt;p&gt;多吉搜索的网址是：&lt;a href=&#34;https://www.dogedoge.com/&#34;&gt;https://www.dogedoge.com/&lt;/a&gt;，从首页中可以看到项目的 Slogan 是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「不追踪，不误导」。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;言下之意，我理解它的初衷，前者更接近 DuckDuckGo 的宗旨，保护用户的隐私，后者是拒绝无用信息涌入引擎，不误导用户。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/FC8B48B38EA35963C7745570491353E3.png&#34; alt=&#34;FC8B48B38EA35963C7745570491353E3&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;不过，作者本人说明前端的页面就是像素级借鉴 duckduckgo。 毕竟对于有限的精力来说，优先做好搜索引擎的核心功能比优化一个精美的界面来说有用得多。在这一点上，我还是很理解开发者的。希望这个项目能够持续的优化发展下去。&lt;/p&gt;
&lt;h2 id=&#34;即时结果搜索&#34;&gt;即时结果搜索&lt;/h2&gt;
&lt;p&gt;作为一个好的搜索引擎，支持 Instant Result 是其必备的条件之一。&lt;/p&gt;
&lt;p&gt;Instant Result 背后的本质其实也是百度提出的 Box Computing。首先可以先看看它的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;框计算为用户提供基于互联网的一站式服务，是一种最简单可依赖的互联网需求交互模式，用户只要在框中输入服务需求，系统就能明确识别这种需求，并将该需求分配给最优的应用或内容资源提供商处理，最终返回给用户相匹配的结果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用直白一点的话来说就是，搜索引擎预先跟优秀的数据源达成合作，根据用户的搜索关键词匹配应用，然后直接在结果页的首条结果以 Box 的形式展示该交互式应用，使用户能够快速找到最匹配的内容。&lt;/p&gt;
&lt;p&gt;下面是我发现的一些 多吉搜索 支持的 Instant Result：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;天气预报&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/254167A71CF648F992CF1B615002AD7F.png&#34; alt=&#34;254167A71CF648F992CF1B615002AD7F&#34;  /&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我的 IP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/29A8FFFACFDC9A1ED5FD1B8EFF99EF23.png&#34; alt=&#34;29A8FFFACFDC9A1ED5FD1B8EFF99EF23&#34;  /&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;汇率兑换&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/36B8F05D655ADB851191403B95CD96F1.png&#34; alt=&#34;36B8F05D655ADB851191403B95CD96F1&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;目前根据我的测试，也只发现了这 3 个搜索结果，但我相信后面会有更多的数据源合作，然后给用户最快捷且优质的用户体验的。&lt;/p&gt;
&lt;h2 id=&#34;特殊关键词搜索&#34;&gt;特殊关键词搜索&lt;/h2&gt;
&lt;p&gt;相信不少读者都看过「搜索引擎的奇技淫巧」相关的文章，就是在搜索框中多加入一下特殊的关键词，告诉搜索引擎过滤或搜索指定类型/范围的搜索结果，善加利用，确实能够大幅度提供搜索效率。&lt;/p&gt;
&lt;p&gt;下面我就来测试一下 多吉搜索 支持的特殊关键词有什么（这里就借用一下我喜爱的周董啦）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搜索结果过滤&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/8A0B7A5968F04C05811F038F68656631.png&#34; alt=&#34;8A0B7A5968F04C05811F038F68656631&#34;  /&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指定网站搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/57DD9C101E4D702497F5885E944B60C4.png&#34; alt=&#34;57DD9C101E4D702497F5885E944B60C4&#34;  /&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指定文档类型搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/0CE986FCB89E0DC3C0D5B67FB03F95E3.png&#34; alt=&#34;WeChat Screenshot_20190825175331&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;虽然不知道为什么第二第三条搜索结果不是 PDF 类型的，但是页面后面的搜索结果都是 PDF 类型的，说明指定文件类型还是生效的。&lt;/p&gt;
&lt;p&gt;一般情况下我常用的特殊关键词也只有这 3 个，看起来都是支持的，所以在这一点上我认为是达到理想的标准的。&lt;/p&gt;
&lt;h2 id=&#34;广告搜索对比&#34;&gt;广告搜索对比&lt;/h2&gt;
&lt;p&gt;相信这个是很多人关心的地方，但我觉得从 2019年8月的情况来看，这个结果是毫无疑问的。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/F9AD646883B9A4D4D32274D35F78585B.png&#34; alt=&#34;F9AD646883B9A4D4D32274D35F78585B&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/C4D63E797BE7D9A56EE95BA71C0B04EB.png&#34; alt=&#34;C4D63E797BE7D9A56EE95BA71C0B04EB&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;多吉搜索 在搜索结果中没有广告，而且也没有右边侧边栏的一些冗余信息，我认为还是比较简洁与高效的。&lt;/p&gt;
&lt;p&gt;希望 多吉搜索 在后面考虑盈利的同时，也别忘了初衷。感恩。&lt;/p&gt;
&lt;h2 id=&#34;其他方面的对比&#34;&gt;其他方面的对比&lt;/h2&gt;
&lt;p&gt;从搜索的结果上看，多吉搜索 对于目前的热门网站的收录比较齐全，比如 少数派、知乎、豆瓣、百度百科、微博等的热门社区，对于新文章的搜索情况也不错，这点我还是很喜欢的，不再局限于被多年来搜索次数堆积高的结果。&lt;/p&gt;
&lt;p&gt;从搜索的类别上看，多吉搜索 还支持 图片、视频和新闻搜索，但是真正点开这些 tab 的时候，就会有浏览器弹窗提示你：“ Coming soon. ” 相信未来会支持的。&lt;/p&gt;
&lt;p&gt;从搜索的功能上看，搜索引擎常见的一个功能——网页快照，多吉搜索目前也是不提供的，毕竟这个功能十分消耗服务器的存储空间。&lt;/p&gt;
&lt;p&gt;但是，于我而言，后者这两个功能我极少用到，所以无论有无，它也不影响我将它设置为默认搜索引擎。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最后，如果你对这个新的搜索引擎也有兴趣，不妨尝试一下使用一周，相信你会喜欢上它的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Switch移动TV模式杂谈</title>
      <link>https://blog.wsine.top/posts/switch-tv-mode/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/switch-tv-mode/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;今天想要谈谈的是 Switch 游戏主机的 TV 模式。&lt;/p&gt;
&lt;p&gt;Switch 最美好的地方，除了能够 Play Anywhere 之外，还有分享的快乐。但是要分享得够快乐，除了手柄以外，如果只通过 Switch 的桌面模式来打游戏，游戏体验大打折扣。TV 模式才是正确打开多人游戏的方式。它能使你在客厅的大电视，宿舍的显示器，&lt;del&gt;办公室的显示器&lt;/del&gt; 上和不同的小伙伴分享快乐。由于 Switch 的底座太大太重了，携带很不方便，然后你就会想能不能通过 typc to hdmi 的拓展坞来实现。&lt;/p&gt;
&lt;p&gt;但是，当我实际在这个方案上探索的时候，我就发现了有挺多的坑，本文就是来分享一下我的一些经验。（如果有不对的地方请友好地指正）&lt;/p&gt;
&lt;h2 id=&#34;充电器&#34;&gt;充电器&lt;/h2&gt;
&lt;p&gt;首先你需要的是一个支持 NS 充电标准的充电头。Type-C 接口输出，支持USB PD充电协议。&lt;/p&gt;
&lt;p&gt;根据 NS 的电源适配器上标注的供电要求，NS 的支持两种供电功率段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;低压模式：5V / 1.5A&lt;/li&gt;
&lt;li&gt;快充模式：15V / 2.6A&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;低压模式是一直以来许多电子设备使用的充电电压和电流大小，但是由于 NS 本身的芯片性能不算低，它的耗电速度其实是大于 7.5W 的。换句话说，也就是当只能握手 5V 协议的时候，不能一边充电一边玩。&lt;/p&gt;
&lt;p&gt;快充模式是能够触发 NS 的 TV 模式的唯一方式，它大约要求 39W 运行功率。但是，并不是充电头的功率大于 39W 了就能触发 TV 模式。下面我以联想 ThinkPlus 口红电源为例来说明。&lt;/p&gt;
&lt;p&gt;根据联想 ThinkPlus 口红电源上面标注的参数，我们可以看到它支持如下的输出：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5V / 3A&lt;/li&gt;
&lt;li&gt;9V / 3A&lt;/li&gt;
&lt;li&gt;12V / 3A&lt;/li&gt;
&lt;li&gt;15V / 3A&lt;/li&gt;
&lt;li&gt;20V / 3.25A&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中，前者的伏特代表的是电源适配器支持的电压输出，在实际连接时跟用电器握手，根据协议来判断最大能够握手电压是多少，也就是说&lt;strong&gt;购买的充电头必须能够自身支持 15V 的电压输出&lt;/strong&gt;；然后，后面的安培代表的是电源适配器在该电压下最大能够支持的电流输出大小，也就是说&lt;strong&gt;购买的充电头在 15V 的电压下最大电流大于等于 2.6A&lt;/strong&gt; 就好了。&lt;/p&gt;
&lt;p&gt;关于充电器的实际支持充电协议如何，我推荐看 &lt;a href=&#34;http://www.chongdiantou.com/&#34;&gt;充电头网&lt;/a&gt; 上面的评测，基本上能购买到的都有详细的评测，很专业。&lt;/p&gt;
&lt;h2 id=&#34;充电线&#34;&gt;充电线&lt;/h2&gt;
&lt;p&gt;万万没有想到，这个反而是我遇到的最大的一个坑。&lt;/p&gt;
&lt;p&gt;有了充电头，你需要的是一根 c to c 的充电线，但是这里有一个认证就是这跟&lt;strong&gt;充电线是否带 E-marker 认证&lt;/strong&gt;。关于 E-marker 认证，比较推荐的是阅读这篇文章：&lt;a href=&#34;http://www.chongdiantou.com/wp/archives/32798.html&#34;&gt;一张图看懂USB-C E-marker线缆区别&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;简单的总结一下就是，带有 E-marker 认证的线缆可以允许超大电流通过。但是在实际的应用场景中，超过 3A 电流的充电场景，在轻薄便携中并不常见，所以可有可无的情况下其实选择没有的更省事。&lt;/p&gt;
&lt;p&gt;我曾经尝试过用（联想口红电源 / 小米电源 / 原装 的电源）+（C-Force / 鑫魔王 / 原装底座 的Hub）+（口红电源自带充 / 紫米 / 原装 的充电线）各种组合，结果发现问题并不在电源本身。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（C-Force / 鑫魔王 / 原装底座 的Hub）+ 原装充电线均能触发 TV 模式。&lt;/li&gt;
&lt;li&gt;（C-Force / 鑫魔王 的Hub）+（口红电源自带充 / 紫米 的充电线）均不能触发 TV 模式。&lt;/li&gt;
&lt;li&gt;原装底座 的Hub +（口红电源自带充 / 紫米 的充电线）均能触发 TV 模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以问题的本质其实在于，C-Force / 鑫魔王 的Hub 本身并不支持 E-marker 认证的线缆，换一根便宜的线缆反而可以了。我猜测原装充电线是不带 E-marker 认证的。但是至于 Hub 是否支持认证的线缆，一般商品详情页都不会写清楚，我想问店家是最清楚的，因为有很多顾客就会有很多经验。或者找找网络上已知成功的组合。&lt;/p&gt;
&lt;h2 id=&#34;拓展坞&#34;&gt;拓展坞&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://www.chongdiantou.com/wp/archives/14717.html&#34;&gt;任天堂Switch HDMI扩展盒子被国内团队破解&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里其实并不是真的“破解”，详情可以看原文。多亏了 C-FORCE 团队的努力，让我们可以摆脱原装底座的依赖，让便携成为可能。&lt;/p&gt;
&lt;p&gt;但是由于 NS 原装的底座并没有遵循标准的 USB-IF 的协议规范，导致 NS 的 Docking 和常见的 Apple、Google、Microsoft 等厂商的 Docking 不一样。换句话说就是需要拓展坞的厂商额外去兼容 NS 的视频输出。因此，&lt;strong&gt;购买拓展坞需要买明确指出兼容 Switch 的拓展坞&lt;/strong&gt;。而这个绝大部分的商品详情页都有说明兼容情况，就凭君喜好选择合适自己的那款就好。&lt;/p&gt;
&lt;p&gt;由于 NS 的 TV 模式需要在供电情况下才能触发，所以&lt;strong&gt;拓展坞必须自带 type-c 接口且支持 USB PD 充电&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;hdmi线&#34;&gt;HDMI线&lt;/h2&gt;
&lt;p&gt;这部分其实我没有遇到太多的坑，现在的 HDMI 线通用性都很强了。我认为唯一要考虑的你&lt;strong&gt;是否需要 4k 分辨率的 HDMI 线&lt;/strong&gt;，现在能买到的基本都能支持到 1080p 60Hz 的情况了。&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;h3 id=&#34;我目前在用的组合&#34;&gt;我目前在用的组合&lt;/h3&gt;
&lt;p&gt;平时在我的 NS 收纳包中躺着的是这些配件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;联想 ThinkPlus 口红电源：65W，下至手机上至便携电脑都可充电~&lt;/li&gt;
&lt;li&gt;C-FORCE CF003S 拓展坞：4k，usb hub，既能给电脑用又能给 ipad 用还能给 Switch 用~&lt;/li&gt;
&lt;li&gt;C-FORCE 的 c-to-c 充电线：无奈之下的选择&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上，不是硬广，但是确是一套能够已成功试验的方案组合，仅供参考。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>我的Vim配置</title>
      <link>https://blog.wsine.top/posts/my-vim-configuration/</link>
      <pubDate>Tue, 23 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/my-vim-configuration/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;h4 id=&#34;为什么选择vim&#34;&gt;为什么选择vim？&lt;/h4&gt;
&lt;p&gt;曾经我也是一个小白，使用Dev-C++来学习C++语言，使用Visual Studio开发工程，它们都被称为IDE(Integrated development environment)。但是，逐渐的，我渐渐意识到，你只能遵循它制定的一系列的流程来开发程序，自定义程度不高，而且大型的IDE消耗计算资源严重。&lt;/p&gt;
&lt;p&gt;后来，我认识到了编辑和编译应该是一个分开的过程，便转战到了文本编辑器，选择Sublime Text。Sublime优秀的UI界面，优秀的快捷键，拥有插件系统，着实让我着迷。它的初始环境便可直接上手，它的默认配色Monokai让人看得很舒服。&lt;/p&gt;
&lt;p&gt;但是，离开Sublime选择Vim的原因有三点，一是Sublime依赖于图形化界面，二是Sublime移动光标需要移动右手使用方向键，三是Sublime编辑远程文件要么借助工具要么经常传输。至此，我终于理解了那个古老的梗。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;世界上只有三种程序员，一种是使用Vim的，一种是使用Emacs的，还有一种是其他&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而这篇博文也是放置于效率分类下&lt;/p&gt;
&lt;p&gt;*加个小彩蛋：*我实验室的Boss爱用Emacs，我们互视为异教徒，我说“你的手指会变形的”，他说“程序员谁的手指不变形”，我“&amp;hellip;&amp;hellip;[冷漠]”&lt;/p&gt;
&lt;h4 id=&#34;如何学习vim&#34;&gt;如何学习Vim&lt;/h4&gt;
&lt;p&gt;我的观点是，自己一行一行写自己的配置文件才会深入学会Vim。如果一开始就用配置好的，那和直接使用IDE没有太大的差别。知道配置文件每一行干了些什么，不懂就搜，想加功能想改功能就动手，最后这就是一份&lt;strong&gt;你的配置文件&lt;/strong&gt;。相信每个Vim大牛都是这样做的。同样的，我的Vim配置也会不断更新，可能会持续n年也不一定。而这也是为什么我的文章标题起名如此。&lt;/p&gt;
&lt;h2 id=&#34;原则&#34;&gt;原则&lt;/h2&gt;
&lt;p&gt;我的Vim配置有一定的原则，遵循原则才会让配置不会超出自己的控制&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;插件能用轻量级的就不用复杂的&lt;/li&gt;
&lt;li&gt;非需要的功能不会添加&lt;/li&gt;
&lt;li&gt;尽量消耗更少的资源&lt;/li&gt;
&lt;li&gt;配色一定不能忍&lt;/li&gt;
&lt;li&gt;尽可能的做到一键配置&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文&lt;/h2&gt;
&lt;h4 id=&#34;配色&#34;&gt;配色&lt;/h4&gt;
&lt;p&gt;说得多还不如先看看总体的配色，配色我采用了vim自带的desert主题，在这个基础上加了一点自定义&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/468539c3f437335584ebdfa2f8c4aa34.png&#34; alt=&#34;配色图&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;从左往右说起好了，左侧我添加了一个目录树，使用的是&lt;code&gt;scrooloose/nerdtree&lt;/code&gt;的插件，并且绑定了&lt;code&gt;&amp;lt;leader&amp;gt;q&lt;/code&gt;来启动和隐藏目录树，使用起来还是蛮方便的&lt;/p&gt;
&lt;p&gt;中间的配色我刻意挑了一个黑色的主题。我不喜欢那种惨淡的白色，函数名和命名空间是白色就和变量名看起来没有区分度了，因此搜了好久，找到了&lt;code&gt;octol/vim-cpp-enhanced-highlight&lt;/code&gt;插件能满足这个需求，修改了一下它的颜色。弹出菜单的颜色我也自己修改了。颜色都采用了暗色调的color，确保不会刺眼，同时也能将不同的元素区分出来。&lt;code&gt;set t_Co=256 &amp;quot; Enable status bar color&lt;/code&gt;很重要。&lt;/p&gt;
&lt;p&gt;顶部和底部采用的是比较出名的&lt;code&gt;vim-airline/vim-airline&lt;/code&gt;插件，以及其相应的&lt;code&gt;vim-airline/vim-airline-themes&lt;/code&gt;，主题我选择了&lt;code&gt;let g:airline_theme=&#39;luna&#39;&lt;/code&gt;，并且启用了powerline字体，也就是你能看到的三角形符号&lt;/p&gt;
&lt;p&gt;因为还在不断的修改中，未来可能会考虑把配色做成插件易于安装吧，目前的安装方式比较麻烦&lt;/p&gt;
&lt;h4 id=&#34;管理&#34;&gt;管理&lt;/h4&gt;
&lt;p&gt;插件管理上我选用了Vundle，目前一款比较流行的Vim插件管理器，基本上我只使用github上的vim插件&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/fe535df15cf240c8bc5474da7fcf1b28.png&#34; alt=&#34;插件列表&#34;  /&gt;
&lt;/p&gt;
&lt;h4 id=&#34;按键&#34;&gt;按键&lt;/h4&gt;
&lt;p&gt;一直以来我对于那种秀配置不讲按键绑定的文章比较反感，除非你一个键都没改&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模式&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;按键&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;映射&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;全局&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;,&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;leader&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;leader&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;leader键是vim中的一个特殊键&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;正常&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;j&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;gj&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;下一行&lt;/td&gt;
&lt;td&gt;视觉上往下移动(行太长导致分行时)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;正常&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;k&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;gk&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;上一行&lt;/td&gt;
&lt;td&gt;视觉上往上移动(行太长导致分行时)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;正常&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;leader&amp;gt;w&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;:w&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;快速保存&lt;/td&gt;
&lt;td&gt;没有权限保存的时候也是不行的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;正常&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;leader&amp;gt;q&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;:bd&amp;lt;CR&amp;gt;:q&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;快速退出&lt;/td&gt;
&lt;td&gt;前提所有buffer都保存了，防止意外&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;正常&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;K&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;:bnext&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;切换到右边的buffer&lt;/td&gt;
&lt;td&gt;仿照Vimuim的标签切换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;正常&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;J&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;:bprevious&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;切换到左边的buffer&lt;/td&gt;
&lt;td&gt;仿照Vimuim的标签切换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;正常&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;leader&amp;gt;bn&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;:enew&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;新开一个buffer&lt;/td&gt;
&lt;td&gt;buffer new&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;正常&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;leader&amp;gt;bd&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;:bd&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;关闭当前buffer&lt;/td&gt;
&lt;td&gt;buffer delete&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;正常&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;空格键&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;smooth_scroll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;向下平滑滚动&lt;/td&gt;
&lt;td&gt;避免思维跳跃，仿照Chrome的设定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;正常&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;减号键&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;smooth_scroll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;向上平滑滚动&lt;/td&gt;
&lt;td&gt;避免思维跳跃&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;编辑&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;Ctrl + b&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;方向键-左&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;向左移动一个字符&lt;/td&gt;
&lt;td&gt;仿照Bash的控制方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;编辑&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;Ctrl + f&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;方向键-右&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;向右移动一个字符&lt;/td&gt;
&lt;td&gt;仿照Bash的控制方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;编辑&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;Ctrl + e&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;Home键&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;跳到行首&lt;/td&gt;
&lt;td&gt;仿照Bash的控制方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;编辑&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;Ctrl + a&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;End键&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;跳到行尾&lt;/td&gt;
&lt;td&gt;仿照Bash的控制方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;编辑&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;Tab键&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;方向键-下&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选择下一个候选词&lt;/td&gt;
&lt;td&gt;可连续按&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;编辑&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;Esc键&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;Ctrl + 回车&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;清除菜单&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可视化&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;//&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;y/&amp;lt;C-R&amp;gt;&amp;quot;&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;快速搜索&lt;/td&gt;
&lt;td&gt;需要先选择内容&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;其实可以看出我是比较喜欢统一各大软件的按键方式的，主要是可以让自己不用记忆太多，快捷键是效率的主要生产力，所以终端、编辑器、浏览器这三大离不开的软件，我都会尽可能地去统一它们的按键&lt;/p&gt;
&lt;p&gt;上面提到的平滑滚动我使用了&lt;code&gt;lucasicf/vim-smooth-scroll&lt;/code&gt;的插件，其实这个插件来自出名的&lt;code&gt;terryma&lt;/code&gt;之手，但是如果连续平滑滚动，会连续触发导致控制卡死。而&lt;code&gt;lucasicf&lt;/code&gt;修复了这个bug并发送了PR，不知道为什么&lt;code&gt;terryma&lt;/code&gt;大神一直没有理=。=&lt;/p&gt;
&lt;p&gt;还有，我想要仿照Chrome使用Shift + 空格键来平滑向上滚动，然后我尝试了很多种方法，并不能捕获&lt;code&gt;Shift + Space&lt;/code&gt;的状态，如果有大神能做到求教&lt;/p&gt;
&lt;h4 id=&#34;括号匹配&#34;&gt;括号匹配&lt;/h4&gt;
&lt;p&gt;Vim毕竟是写代码的利器，自动补全括号特别实用且重要，这里我简单的使用了一个插件&lt;code&gt;jiangmiao/auto-pairs&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;多光标编辑&#34;&gt;多光标编辑&lt;/h4&gt;
&lt;p&gt;在Sublime中唯一让我留念的就是多光标编辑了，作为被这个装逼大法宠坏的我，没有它感觉断了一臂。多亏了terryma大神将这一功能移植到了vim中，据说，这还是大神在一次航班途中写出来的，我只能打出666并默默地比了一个❤~&lt;/p&gt;
&lt;p&gt;插件名称&lt;code&gt;terryma/vim-multiple-cursors&lt;/code&gt;。在Visual模式下选中所需要改的内容，按Ctrl + n可以选中下一个，然后按下c进入编辑状态，编辑完，Esc，完美&lt;/p&gt;
&lt;h4 id=&#34;快速打开文件&#34;&gt;快速打开文件&lt;/h4&gt;
&lt;p&gt;Sublime还有一个功能是Ctrl + p可以打开文件，这一方式同样也有插件在vim中&lt;code&gt;ctrlpvim/ctrlp.vim&lt;/code&gt;。更重要的是，该插件同样支持模糊搜索。&lt;/p&gt;
&lt;h4 id=&#34;快速注释&#34;&gt;快速注释&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;scrooloose/nerdcommenter&lt;/code&gt;是一个优秀的插件，默认的注释方式是&lt;code&gt;&amp;lt;leader&amp;gt;c&amp;lt;Space&amp;gt;&lt;/code&gt;，可以在注释和非注释直接切换。同时，配合Ctrl + v的块选择，能够快速选中自己想要注释的行，然后&lt;code&gt;&amp;lt;leader&amp;gt;c&amp;lt;Space&amp;gt;&lt;/code&gt;快速批量注释&lt;/p&gt;
&lt;h4 id=&#34;自动补全&#34;&gt;自动补全&lt;/h4&gt;
&lt;p&gt;在自动补全的领域下，最好的无疑是&lt;code&gt;YouCompleteMe&lt;/code&gt;插件了，然而我并没有使用。首先该插件的调用程序太多，消耗资源太多，安装也麻烦，一次安装终身受用这种借口不能作为不简化安装的理由。其次，语义化补全对我来说没有太大的需求，只需要能把变量和函数提示并补全就好了&lt;/p&gt;
&lt;p&gt;而Vim在新版中已经原生添加了自动补全的功能。利用按下Ctrl + x, Ctrl + o触发， Ctrl + n, Ctrl + p选择菜单。但是这样未免太麻烦不优雅，我利用了一款插件&lt;code&gt;vim-scripts/AutoComplPop&lt;/code&gt;，它能够自动弹出补全菜单，使用起来效果还不错。不过它偶尔有一些小bug，我自己还能忍，如果你不喜欢再寻求一款更好的自动补全吧&lt;/p&gt;
&lt;h4 id=&#34;格式控制&#34;&gt;格式控制&lt;/h4&gt;
&lt;p&gt;在格式控制的范畴下，我将制表符都转义成了空格，并且在保存的时候自动把行尾的空格都去掉了，这是符合优秀编码规范的格式，希望还是能保持。&lt;/p&gt;
&lt;p&gt;有一点，很多人没注意到的，Git管理的文件建议保留文件末尾的一个空行，特意提一下，我没有加入到vim自动添加空行，因为不是所有的文件都被Git管理，无端的空行可能会导致一些未知的错误。所有建议手动添加。&lt;/p&gt;
&lt;h4 id=&#34;其他&#34;&gt;其他&lt;/h4&gt;
&lt;p&gt;假设你都理解了vim的基础操作，其他的一些配置我也有相应的注释，参考了http://amix.dk/vim/vimrc.html，不愧是被誉为教科书般的vim配置，真是优秀。&lt;/p&gt;
&lt;p&gt;阅读.vimrc文件，能开拓你很多的思路，希望能找到你喜欢的&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;参照https://github.com/VundleVim/Vundle.vim，下载Vundle管理器到指定目录&lt;/p&gt;
&lt;p&gt;将对应的文件放置在你的家目录&lt;code&gt;~&lt;/code&gt;下&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;~
├── .vimrc
└── .vim
     ├── bundle
     │   └── Vundle.vim
     └── colors
         └── desert.vim
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/Wsine/Backup/blob/master/vim/.vimrc&#34;&gt;.vimrc文件下载&lt;/a&gt;
&lt;a href=&#34;https://github.com/Wsine/Backup/blob/master/vim/desert.vim&#34;&gt;desert.vim文件下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;打开Vim，使用&lt;code&gt;:PluginInstall&lt;/code&gt;即可&lt;/p&gt;
&lt;h2 id=&#34;配置文件&#34;&gt;配置文件&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
&amp;quot; =&amp;gt; Vundle
&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
set nocompatible              &amp;quot; be iMproved, required
filetype off                  &amp;quot; required

&amp;quot; set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

&amp;quot; let Vundle manage Vundle, required
Plugin &#39;VundleVim/Vundle.vim&#39;

Plugin &#39;jiangmiao/auto-pairs&#39;
Plugin &#39;scrooloose/nerdtree&#39;
Plugin &#39;ctrlpvim/ctrlp.vim&#39;
&amp;quot; Plugin &#39;terryma/vim-smooth-scroll&#39;
Plugin &#39;lucasicf/vim-smooth-scroll&#39;
Plugin &#39;vim-scripts/AutoComplPop&#39;
Plugin &#39;terryma/vim-multiple-cursors&#39;
Plugin &#39;scrooloose/nerdcommenter&#39;
Plugin &#39;vim-airline/vim-airline&#39;
Plugin &#39;vim-airline/vim-airline-themes&#39;
Plugin &#39;octol/vim-cpp-enhanced-highlight&#39;
Plugin &#39;vim-python/python-syntax&#39;
&amp;quot; All of your Plugins must be added before the following line
call vundle#end()            &amp;quot; required
filetype plugin indent on    &amp;quot; required
&amp;quot; Put your non-Plugin stuff after this line

&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
&amp;quot; =&amp;gt; General
&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
&amp;quot; Sets how many lines of history VIM has to remember
set history=700

&amp;quot; Set to auto read when a file is changed from the outside
set autoread

&amp;quot; ignore case when searching unless exists one upper case
set ignorecase
set smartcase

&amp;quot; Realtime searching
set incsearch

&amp;quot; hight light searching
set hlsearch

&amp;quot; No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
&amp;quot; =&amp;gt; VIM user interface
&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
&amp;quot; Set 7 lines to the cursor - when moving vertically using j/k
set so=7

&amp;quot; Turn on the WiLd menu
set wildmenu

&amp;quot; Ignore compiled files
set wildignore=*.o,*~,*.pyc

&amp;quot;Always show number
set number

&amp;quot;Always show current position
set ruler

&amp;quot; Height of the command bar
set cmdheight=2

&amp;quot; A buffer becomes hidden when it is abandoned
set hid

&amp;quot; Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=&amp;lt;,&amp;gt;,h,l

&amp;quot; Set cmd show
set showcmd

&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
&amp;quot; =&amp;gt; Colors and Fonts
&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
&amp;quot; Enable syntax highlighting
syntax enable

&amp;quot; Set colorscheme
set background=dark
colorscheme desert

&amp;quot; Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

&amp;quot; Use Unix as the standard file type
set ffs=unix,dos,mac

&amp;quot; Enable status bar color
set t_Co=256

&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
&amp;quot; =&amp;gt; Files, backups and undo
&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
&amp;quot; Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
&amp;quot; =&amp;gt; Text, tab and indent related
&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
&amp;quot; Use spaces instead of tabs
set expandtab

&amp;quot; Be smart when using tabs ;)
set smarttab

&amp;quot; 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

&amp;quot; Linebreak on 500 characters
set lbr
set tw=500

&amp;quot; Intelligence indent
set ai &amp;quot;Auto indent
set si &amp;quot;Smart indent
set wrap &amp;quot;Wrap lines

&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
&amp;quot; =&amp;gt; Moving around, tabs, windows and buffers
&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
&amp;quot; Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line(&amp;quot;&#39;\&amp;quot;&amp;quot;) &amp;gt; 0 &amp;amp;&amp;amp; line(&amp;quot;&#39;\&amp;quot;&amp;quot;) &amp;lt;= line(&amp;quot;$&amp;quot;) |
     \   exe &amp;quot;normal! g`\&amp;quot;&amp;quot; |
     \ endif
&amp;quot; Remember info about open buffers on close
set viminfo^=%

&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
&amp;quot; =&amp;gt; Status line
&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
&amp;quot; Always show the status line
set laststatus=2

&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
&amp;quot; =&amp;gt; Editing mappings
&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
&amp;quot; With a map leader it&#39;s possible to do extra key combinations
&amp;quot; like &amp;lt;leader&amp;gt;w saves the current file
let mapleader = &amp;quot;,&amp;quot;
let g:mapleader = &amp;quot;,&amp;quot;

&amp;quot; Toggle paste mode
set pastetoggle=&amp;lt;leader&amp;gt;p

&amp;quot; Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

&amp;quot; Fast saving
nmap &amp;lt;leader&amp;gt;w :w&amp;lt;CR&amp;gt;

&amp;quot; Fast quit
nmap &amp;lt;leader&amp;gt;q :bufdo bd&amp;lt;CR&amp;gt;:q&amp;lt;CR&amp;gt;

&amp;quot; Fast open file tree
map &amp;lt;leader&amp;gt;t :NERDTreeToggle&amp;lt;CR&amp;gt;

&amp;quot; Fast Tab use
noremap &amp;lt;silent&amp;gt; K :bnext&amp;lt;CR&amp;gt;
noremap &amp;lt;silent&amp;gt; J :bprevious&amp;lt;CR&amp;gt;
noremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;bn :enew&amp;lt;CR&amp;gt;
noremap &amp;lt;silent&amp;gt; &amp;lt;expr&amp;gt; &amp;lt;leader&amp;gt;bd
    \ len(filter(range(1, bufnr(&#39;$&#39;)), &#39;buflisted(v:val)&#39;)) &amp;gt;= 2 ?
    \ &amp;quot;:bp\|bd #&amp;lt;CR&amp;gt;&amp;quot; : &amp;quot;:bd&amp;lt;CR&amp;gt;&amp;quot;

&amp;quot; Smooth page scroll
nnoremap &amp;lt;silent&amp;gt; = :call smooth_scroll#down(&amp;amp;scroll, 25, 2)&amp;lt;CR&amp;gt;
nnoremap &amp;lt;silent&amp;gt; - :call smooth_scroll#up(&amp;amp;scroll, 25, 2)&amp;lt;CR&amp;gt;
nnoremap &amp;lt;silent&amp;gt; &amp;lt;Space&amp;gt; :call smooth_scroll#down(&amp;amp;scroll, 25, 2)&amp;lt;CR&amp;gt;

&amp;quot; Move in insert mode
imap &amp;lt;C-b&amp;gt; &amp;lt;Left&amp;gt;
imap &amp;lt;C-f&amp;gt; &amp;lt;Right&amp;gt;
imap &amp;lt;C-e&amp;gt; &amp;lt;End&amp;gt;
imap &amp;lt;C-a&amp;gt; &amp;lt;Home&amp;gt;
imap &amp;lt;M-f&amp;gt; &amp;lt;C-o&amp;gt;w
imap &amp;lt;M-b&amp;gt; &amp;lt;C-o&amp;gt;b

&amp;quot; Clear highlight color
nnoremap &amp;lt;Esc&amp;gt; :noh&amp;lt;Return&amp;gt;&amp;lt;Esc&amp;gt;
nnoremap &amp;lt;Esc&amp;gt;^[ &amp;lt;Esc&amp;gt;^[

&amp;quot; Popup menu select
inoremap &amp;lt;silent&amp;gt; &amp;lt;expr&amp;gt; &amp;lt;Tab&amp;gt; pumvisible() ? &amp;quot;\&amp;lt;Down&amp;gt;&amp;quot; : &amp;quot;\&amp;lt;Tab&amp;gt;&amp;quot;
inoremap &amp;lt;silent&amp;gt; &amp;lt;expr&amp;gt; &amp;lt;ESC&amp;gt; pumvisible() ? &amp;quot;\&amp;lt;C-E&amp;gt;&amp;quot; : &amp;quot;\&amp;lt;ESC&amp;gt;&amp;quot;

&amp;quot; Visual Mode Search
vnoremap // y/&amp;lt;C-R&amp;gt;&amp;quot;&amp;lt;CR&amp;gt;

&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
&amp;quot; =&amp;gt; Function, Command
&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
&amp;quot; Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
    exe &amp;quot;normal mz&amp;quot;
    %s/\s\+$//ge
    exe &amp;quot;normal `z&amp;quot;
endfunc
autocmd BufWrite * :call DeleteTrailingWS()

&amp;quot; Auto open file tree if enter a directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 &amp;amp;&amp;amp; isdirectory(argv()[0]) &amp;amp;&amp;amp; !exists(&amp;quot;s:std_in&amp;quot;) | exe &#39;NERDTree&#39; argv()[0] | wincmd p | ene | endif

&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
&amp;quot; =&amp;gt; Plugin Setting
&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
&amp;quot; NERDcommenter
let g:NERDSpaceDelims=1
let g:NERDCommentEmptyLines=1
let g:NERDDefaultAlign=&#39;left&#39;

&amp;quot; Vim Airline themes
let g:airline_theme=&#39;luna&#39;
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled=1

&amp;quot; Vim Cpp Highlight
let g:cpp_class_scope_highlight=1
let g:cpp_member_variable_highlight=1
let g:cpp_experimental_simple_template_highlight=1
let g:cpp_concepts_highlight=1

&amp;quot; Vim Python Highlight
let python_highlight_all=1
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>个人博客的方案推荐，你只负责编写</title>
      <link>https://blog.wsine.top/posts/personal-blog-writting-solution/</link>
      <pubDate>Sat, 20 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/personal-blog-writting-solution/</guid>
      <description>&lt;p&gt;今天想要谈谈的是一套我在用的个人博客解决方案，它能带给我最大的便利。&lt;/p&gt;
&lt;p&gt;首先我想先插播一个讨论，为什么要写博客？从我上大学开始，我就喜欢上了写博客。这主要是受到了一位前辈说的话而引发的思考：“当你能够将你所学的有条理地写下来成为一篇文章，那么就证明你学会了。” 当我越是实践这一点，我就越能体会到 写与不写 两者之间的差异。&lt;/p&gt;
&lt;p&gt;以我的经历来揣测，大多数人的博客方案可能经历如下几个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主流博客网站：需要考虑的因素就比较多，包括Markdown支持、CSS支持、Javascript支持等，更重要的是原始数据不能很容易地访问；&lt;/li&gt;
&lt;li&gt;私有博客服务器：维护VPS，维护域名，维护流量 是这一方案最大的成本；&lt;/li&gt;
&lt;li&gt;静态网页托管：&lt;code&gt;hexo&lt;/code&gt;、&lt;code&gt;jekyll&lt;/code&gt;、&lt;code&gt;pelican&lt;/code&gt;都是比较主流的方案，但是对客户端本身比较依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;直到我遇到了&lt;a href=&#34;https://docsify.js.org/#/zh-cn/&#34;&gt;docsify&lt;/a&gt;，我更愿意将它称为第四阶段“动态生成网页托管”。&lt;/p&gt;
&lt;h2 id=&#34;docsify是什么&#34;&gt;Docsify是什么&lt;/h2&gt;
&lt;p&gt;官方的描述是这样子的：一个神奇的文档网站生成工具&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docsify 是一个动态生成文档网站的工具。不同于 GitBook、Hexo 的地方是它不会生成将 &lt;code&gt;.md&lt;/code&gt; 转成 &lt;code&gt;.html&lt;/code&gt; 文件，所有转换工作都是在运行时进行。&lt;/p&gt;
&lt;p&gt;这将非常实用，如果只是需要快速的搭建一个小型的文档网站，或者不想因为生成的一堆 &lt;code&gt;.html&lt;/code&gt; 文件“污染” commit 记录，只需要创建一个 &lt;code&gt;index.html&lt;/code&gt; 就可以开始写文档而且直接&lt;a href=&#34;https://docsify.js.org/#/zh-cn/deploy&#34;&gt;部署在 GitHub Pages&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一次看到这样的描述的时候，我就觉得它也很适合用来构建一个博客系统，事实证明确实如此。&lt;/p&gt;
&lt;h2 id=&#34;docsify有什么&#34;&gt;Docsify有什么&lt;/h2&gt;
&lt;h3 id=&#34;markdown支持&#34;&gt;Markdown支持&lt;/h3&gt;
&lt;p&gt;在2019年写博客，几乎主流的选择都是使用 Markdown 标记性语言，它很轻量，能让关注在内容本身而不是调格式上。&lt;/p&gt;
&lt;p&gt;但是，Docsify 提供的 Markdown 是原生的美好的感觉，不需要你刻意遵循什么，想怎么写就怎么写的自由；相对的，Hexo 和 Jekyll 都需要遵循一些特殊的格式，比如 {{ 日期 }} 等。这是我很喜爱它的一点。&lt;/p&gt;
&lt;p&gt;官方内置的 Markdown 解析器是&lt;a href=&#34;https://github.com/markedjs/marked&#34;&gt;marked&lt;/a&gt;，如果不喜欢还可以参考&lt;a href=&#34;https://docsify.js.org/#/zh-cn/markdown&#34;&gt;文档&lt;/a&gt;来自定义。&lt;/p&gt;
&lt;p&gt;###CSS支持&lt;/p&gt;
&lt;p&gt;docsify 提供了内置的5款主题，分别 &lt;code&gt;vue.css buble.css dark.css pure.css dolphin.css&lt;/code&gt;，我个人是比较喜欢绿色的主题的，所以选了还是默认的 vue.css 风格。另外，Github 上还有很多优秀的第三方主题可供选择。&lt;/p&gt;
&lt;p&gt;当然作为一个开放的系统，它也允许用户自定义，如果有兴趣，撸一个符合自己审美好看的主题也蛮不错的。&lt;/p&gt;
&lt;p&gt;详细的主题 Demo 可以看&lt;a href=&#34;https://docsify.js.org/#/zh-cn/themes&#34;&gt;这里&lt;/a&gt;~&lt;/p&gt;
&lt;h3 id=&#34;javascript支持&#34;&gt;Javascript支持&lt;/h3&gt;
&lt;h4 id=&#34;流程图--序列图&#34;&gt;流程图 &amp;amp; 序列图&lt;/h4&gt;
&lt;p&gt;有 js 的支持，对我来说意味着能够加入扩展 Markdown 语法，比如流程图、序列图等的支持。我很喜欢 &lt;a href=&#34;https://typora.io/&#34;&gt;Typora&lt;/a&gt; 这款 MD 编辑器，它自身加入了流程图和序列图等的支持，这对于技术博客来说还是很有用的一大功能。而借助 docsify 的插件系统，简单的配置了一下就能加入这些功能，然后就能做到桌面端编辑和网页端展示是完全一样的效果。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/7e81db0357153a234f1ed0a8c7b80c02.jpg&#34; alt=&#34;sequence diagram&#34;  /&gt;
&lt;/p&gt;
&lt;h4 id=&#34;评论系统&#34;&gt;评论系统&lt;/h4&gt;
&lt;p&gt;docsify 官方支持 Disqus 和 Gitalk 两种评论系统，如果有需要的话也可以很轻易的配置。我个人是比较推荐使用 Gitalk 的，毕竟 Github 账号很多人都有。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/7a7280f5f68996d1cf074853a3b1c100.jpg&#34; alt=&#34;discuss&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;还有其他很有用的一下功能官方都提供了，具体可以看这里的&lt;a href=&#34;https://docsify.js.org/#/zh-cn/plugins&#34;&gt;插件列表&lt;/a&gt;。如果需要实现一些特殊的功能也可以自定义，拥有可修改能力就感觉拥有一切一样，这感觉还是很美好的。&lt;/p&gt;
&lt;h3 id=&#34;数据独立&#34;&gt;数据独立&lt;/h3&gt;
&lt;p&gt;这是我最喜欢也是最重要的一点，它不需要你像 Hexo 等系统一样，编写 md 文件，然后通过工具转化为 html 网页静态托管。在 docsify 你只需要专注编写 md 内容本身，保存的也是 md 文件本身，docsify 就会自己读取 md 文件然后渲染成网页展示。&lt;/p&gt;
&lt;p&gt;我认为这是一件很棒的事情，不用再过多的依赖工具本身，编写-&amp;gt;部署-&amp;gt;托管的三个步骤中，我只需要在意第一个步骤就好了。甚者，由于没有了中间文件，我能直接管理 md 源文件，也相当于一个很好的备份，将数据掌握在自己手中的感觉。&lt;/p&gt;
&lt;p&gt;你的整个目录将会很整洁，就像这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;.
├── index.html
├── p01.解决方案
│   ├── Markdown标题格式化.md
├── p02.效率之道
│   ├── 2019年科学的复合密码管理策略.md
│   ├── 一个5年工科生的软件解决方案与吐槽.md
│   └── 我的Vim配置.md
├── p03.生活随想
│   └── 给大学新生学子的一个思考.md
└── README.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;引入 docsify 后唯一增加的一份文件只是一个 index.html 而已，而你原来管理数据的方式还是完全没变化(๑•̀ㅂ•́)و✧&lt;/p&gt;
&lt;h2 id=&#34;docsify缺什么&#34;&gt;Docsify缺什么&lt;/h2&gt;
&lt;p&gt;事实上，docsify 也不是完美的，它也有一些小缺点，但是我们可以通过自定义来修补它。&lt;/p&gt;
&lt;h3 id=&#34;侧边栏目录&#34;&gt;侧边栏目录&lt;/h3&gt;
&lt;p&gt;由于 Web 技术本身的限制，docsify 想要读取你服务端的文件需要用户主动提供路径，否则随便就能读取文件，想想还是很可怕的。&lt;/p&gt;
&lt;p&gt;要想增加侧边栏显示目录，docsify 需要用户自行提供 &lt;code&gt;_sidebar.md&lt;/code&gt; 文件，里面用 List 记录着你的目录结构。&lt;/p&gt;
&lt;p&gt;但是，很明显，你只想好好写文章，并不想管理这些部署的事情，每新增一篇文章都要同步修改一遍 &lt;code&gt;_sidebar.md&lt;/code&gt; 文件，还是很麻烦的一件事情。因此，我想到了请一个佣人来帮我完成这件事情，那就是 &lt;a href=&#34;https://travis-ci.com/&#34;&gt;Travis CI&lt;/a&gt;，一个比较流行的 Github 上的自动化部署服务。然后再花 30s 写一行脚本来生成这个目录。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;find . -mindepth &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.md&amp;#34;&lt;/span&gt; | awk -F&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BEGIN {RS=&amp;#34;.md&amp;#34;} {arr[$2]=arr[$2]&amp;#34;\n    - [&amp;#34;$3&amp;#34;](/&amp;#34;$2&amp;#34;/&amp;#34;$3&amp;#34;)&amp;#34;} END { num = asorti(arr, indices); for (i=1; i&amp;lt;=num; ++i) if (indices[i]) print &amp;#34;- &amp;#34;indices[i], arr[indices[i]]}&amp;#39;&lt;/span&gt; &amp;gt; _sidebar.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;具体如何配置 Travis CI 与 Github 之间的联动我这里就不放教程了，官网上有教程，也可以参考仓库里的这个配置：&lt;a href=&#34;https://github.com/Wsine/blog/blob/master/.travis.yml&#34;&gt;.travis.yml&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;目录折叠&#34;&gt;目录折叠&lt;/h3&gt;
&lt;p&gt;这是一个在 docsify 的仓库 issue 中呼声比较高的一个功能，很遗憾这个功能现在还没有，所以就自己做一个吧。&lt;/p&gt;
&lt;p&gt;得益于 docsify 预留了接口给用户自定义插件，借助钩子（hook）的功能，就可以实现目录折叠，文档多了没有折叠功能，浏览起来还是很不方便的。具体的实现可以参考仓库里的这个文件：&lt;a href=&#34;https://github.com/Wsine/blog/blob/master/index.html&#34;&gt;index.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;我的写作流程&#34;&gt;我的写作流程&lt;/h2&gt;
&lt;p&gt;首先我的写作工具其实有很多地方，我会用手机随时记录灵感，用 iPad 在咖啡厅稍微写点东西，用笔记本电脑在图书馆认认真真写文章，晚上在家里享受机械键盘的声音~~~；无论我用什么工具编写，写完后我都可以通过 Github 网页上传新建一份 md 文件到一个新分支上；借助 Github  的功能，我可以很好地和朋友一起协作；当终稿完成的时候，只需要发一个 Pull Request 合并到 master 分支上即可；这时候会触发 Travis CI 的自动化，帮我生成一个目录到 gh-pages 分支上；然后文章就展示到博客中了。&lt;/p&gt;
&lt;p&gt;如果要用一个流程图来表达会是这个样子的：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-flow&#34; data-lang=&#34;flow&#34;&gt;st=&amp;gt;start: 开始
ed=&amp;gt;end: 结束
write=&amp;gt;operation: 写作
cooperation=&amp;gt;operation: 协作
upload=&amp;gt;operation: 上传
merge=&amp;gt;operation: 合并到主分支
generate=&amp;gt;operation: 生成目录
deploy=&amp;gt;operation: 发布
last=&amp;gt;condition: 终稿？

st-&amp;gt;write-&amp;gt;upload-&amp;gt;last
last(yes)-&amp;gt;merge-&amp;gt;generate-&amp;gt;deploy-&amp;gt;ed
last(no)-&amp;gt;cooperation-&amp;gt;upload
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;样例demo&#34;&gt;样例Demo&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/0f23072a7635d7f9925d75b94461b0b0.jpg&#34; alt=&#34;Demo&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;博客地址：https://wsine.github.io/blog&lt;/p&gt;
&lt;p&gt;至此，正文部分就结束了，如果还有兴趣的话可以继续阅读下面的部分。docsify 是一块面向文档设计的工具，但是能做成什么取决于使用工具的人，它也不仅仅只能用于说明文档。&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;实际上，我所经历的博客建站总共分为三个阶段，我也曾经不断摸索最后才找到最合适自己的方案。&lt;/p&gt;
&lt;h3 id=&#34;主流博客网站&#34;&gt;主流博客网站&lt;/h3&gt;
&lt;p&gt;我最开始的写作是在&lt;a href=&#34;https://www.cnblogs.com/&#34;&gt;博客园&lt;/a&gt;平台上。它本身很不错，我最开始选择它的理由是相对小众，以及它的slogan&lt;code&gt;代码改变世界&lt;/code&gt;很抓我的心，博文页完全没有广告阻挡正文，这些都是我选择它的初衷。&lt;/p&gt;
&lt;p&gt;还有两点我想说，可定制化的页面与可定制化的插件。我很喜欢其中的一款主题：&lt;code&gt;Less is more&lt;/code&gt;，它基本完全没有样式，但正是如此才最方便地定制一个符合自己审美的CSS，能让写作更加充满动力。其次，博客园平台允许用户申请 JavaScript 权限，这就相当于你可以自由地动态改变页面的内容，比如增加官方不支持的 flowchart 、隐藏彩蛋、&lt;del&gt;删除页面广告(划掉)&lt;/del&gt; 等。&lt;/p&gt;
&lt;p&gt;后来，它很早开始支持Markdown也是我喜欢它的一点之一。但是，正值移动端崛起，网站本身对移动端的适配不足且我自定义了UI加大了难度，哪怕我辛苦得做了一版本移动端适配，效果也只是差强人意。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/038adfb2b0b6b9233d75dd323c018cc4.png&#34; alt=&#34;Old&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;私有博客平台&#34;&gt;私有博客平台&lt;/h3&gt;
&lt;p&gt;我花了一年的时间折腾在Azure上面搭建了自己的博客平台，我很享受这个过程，完全自定义的过程也能让我学到很多。从购买域名，选择技术栈，搭建测试，维护数据库等，这些其实都是无与伦比的经验。专业相关的也建议折腾一番。&lt;/p&gt;
&lt;h3 id=&#34;静态网页托管&#34;&gt;静态网页托管&lt;/h3&gt;
&lt;p&gt;我尝试过用Github Page托管&lt;code&gt;pelican&lt;/code&gt;构建的静态博客，我选的主题很简洁，也能做到clone即可运行，最低的依赖仅仅是python运行环境，不需要安装package。&lt;/p&gt;
&lt;p&gt;好了，回应初心，要不要写博客？我认为是一件值得思考的事情，如果你在犹豫，不妨先写一篇看看~&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>给大学新生学子的一个思考</title>
      <link>https://blog.wsine.top/posts/a-thought-for-freshman/</link>
      <pubDate>Thu, 04 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/a-thought-for-freshman/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;笔者是一个多年前已毕业的老师兄，也已经历完了大学4年的学习。作为一个过来人，想把我个人的一些经验分享一下。&lt;/p&gt;
&lt;p&gt;很多时候你们能接触到比自己高 1～2个年级的师兄师姐们，他们能够帮助你们很好很快地适应大学生活；但是从我的经验上来说，光有这些似乎还不够，这也是我想写这篇文章的目的，希望能对你们有所帮助。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文&lt;/h2&gt;
&lt;p&gt;高中毕业（高考）和本科毕业 （GPA/简历）是我认为在学生生涯中最重要的两个点（p.s 我更愿意将深造和考职称归为一类）。当你们看到这篇短文的时候，我想你们应该已经选择好了自己心仪的大学。换句话说，你们已经完成了1/2的目标。而我的建议是你们从现在开始就准备剩下的1/2.&lt;/p&gt;
&lt;p&gt;当然我的意思并不是让大家开始拼命刻苦学习，预习大学4年的课程，我并不是一个这么“残忍”的师兄。尽管高三那年，每个老师都不约而同地告诉大家：“考完高考，你们就解放啦。” 这句话放在当时对于需要激励的你们是没有错的。但是，如果现在完全停下脚步，我觉得可能就真的错了。&lt;/p&gt;
&lt;p&gt;在本科时，我有幸跟一位优秀的人一起学习，一起完成毕业设计（现役T大的博士生），而我今天想跟大家分享的就是从ta身上学到的优秀的观念。首先我想引用一下ta的原话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一直觉得，在迷茫不知道干什么的时候，就努力干好当下的每一件事，这样未来的时候选择面会大一些。但是，好的成绩只能作为敲门砖，让你在保研或者申请或许能在简历关脱颖而出，至于后面的路，看缘分。
若是只有好的成绩，并没有认真仔细地思考过自己喜欢什么、想要什么、适合什么，我认为，这是一件很悲哀的事情。
本科四年，我觉得最重要的两件事，一件是&lt;strong&gt;好好努力&lt;/strong&gt;，另一件是&lt;strong&gt;认真思考&lt;/strong&gt;。前者让你能在众多选项中有选择的资本与权力，后者能让你做出最适合自己的选择，热爱并享受。
可能看完这段话，没有经历，你们没有太多的感悟。下面，我想以一些例子来进一步阐述，但我的看法可能会有一点点的不一样。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;在你还处于迷茫的时候，努力学习，认真对待每一科，在绝大多数情况下都是一个不会错的选择。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;对于大多数人来说，大一的感觉是新鲜，沉浸在很多事物中不断尝试，直到大三才开始思考下一步的方向，但这时候就容易陷入迷茫陷入焦虑。特别是当你想要继续读研或申请一个好的公司岗位的时候，你会意识到学分已经修完一大半，时间不可倒退，这，是迷茫的主因。而本科阶段，我们的身份毕竟还是一个学生，优异的学习成绩是今后绝大多数选择的敲门砖，因此努力学习才能让你在需要做出选择的时候拥有选择的权力。&lt;/p&gt;
&lt;p&gt;认真对待每一科是你拥有优异学习成绩的基石，而下面的一些点希望能引起你的思考：本科阶段的评价一般采用GPA绩点的方式，学分越高的科目对绩点的影响越高；一般来说，基础的学科（如高数、大学英语等）占的学分很高，而基础科目一般都设置在大一阶段；特殊的学科（如军事理论、大学体育等）可能会成为影响你选择的关键。私以为，在大学你会遇到新的一群人，无论你原本的“人设”如何，建立一个新的努力学习的“人设”，刚进入大学的时候是你阻力最小的时候。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;当你经过认真思考的时候，你就不会感到迷茫，将100%的努力投入到最适合自己的道路上。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;大学阶段与高中阶段不一样的其中一个点，在于高中你只需要朝着高考这个既定的目标冲刺，然后再思考方向，而大学从来没有给你设定目标，把这个问题留给了你。在我的观念中，无论是你想成为一个深入研究的科研人员，一个特定行业的大牛，一个人脉丰富的商人，还是一个技巧高深的游戏人，我认为你都是一个十分幸运的人儿，因为你找到了你想要努力的方向。&lt;/p&gt;
&lt;p&gt;大学给了你无限种可能，但你的时间精力是有限的，你需要学会根据自己的目标制定合适的方案。为了成为研究生，了解加分政策，多参加比赛追求额外加分；为了成功高技能人才，不断磨练技能，接点私活；为了成功优秀的商人，大部分时间投入到社团活动；为了成功游戏大触，只保证毕业要求而花时间熟练游戏技巧。无论你想成为什么样的人，只要你认真思考，热爱享受且无悔，并为之付出努力，这种选择都是最正确的选择。&lt;/p&gt;
&lt;p&gt;我曾思考过，最重要的两件事之一是“好好努力”而不是“好好学习”，个中原因可能就是在此吧。&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;希望以上的内容能引发你的一点点思考。在这个超长的暑假，一边放松释放压力的同时，也能一边收集信息，并认真思考。&lt;/p&gt;
&lt;p&gt;祝愿大家有一个愉快的暑假和能够经历一段不悔的大学4年时光。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2019年科学且免费的复合密码管理策略</title>
      <link>https://blog.wsine.top/posts/2019-scientific-overlapping-password-policy/</link>
      <pubDate>Wed, 26 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/2019-scientific-overlapping-password-policy/</guid>
      <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;今天想要谈谈的是一套我在用的密码管理方案，我认为还是比较安全又易用的。&lt;/p&gt;
&lt;p&gt;回想一下，大多数人的密码管理策略可能有如下几个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;纯大脑记忆所有的密码&lt;/li&gt;
&lt;li&gt;几乎使用一套密码来注册所有网站&lt;/li&gt;
&lt;li&gt;分重要等级用几套密码来注册所有网站&lt;/li&gt;
&lt;li&gt;使用记忆因子，实时大脑计算出正确密码&lt;/li&gt;
&lt;li&gt;使用流行的密码管理工具，如1password、Lastpass、Keychain等&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一种情况，无疑这样的解决方案十分痛苦，这种情况很常见于不常使用互联网服务的父辈或祖父辈；第二种情况，基本上遇到密码泄露事件，撞库攻击，危险性是最高的；第三种情况，也是我上一种使用策略，虽然减轻的第二种情况的危险性，但还是有一定的危险；第四种情况，我陪朋友去ATM取款的时候，在他旁边陪了10多分钟，才算好密码取出现金🙂；第五种情况，要么太贵，要么平台限制，还不拥有密码的存储权。&lt;/p&gt;
&lt;p&gt;本文要解决的就是现有的这些痛点。在2019年的今天，我还是很推荐你尝试一下这套密码管理策略的。&lt;/p&gt;
&lt;h2 id=&#34;我的解决方案&#34;&gt;我的解决方案&lt;/h2&gt;
&lt;h3 id=&#34;密码安全--便携&#34;&gt;密码安全 &amp;amp;&amp;amp; 便携&lt;/h3&gt;
&lt;p&gt;**首先要解决的第一个痛点是密码安全的问题。**我找的解决方案是&lt;a href=&#34;https://flowerpassword.com/&#34;&gt;花密&lt;/a&gt;，引用一下官方的宣传语&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不一样的密码管理工具：可记忆、非存储、更安全&lt;/p&gt;
&lt;p&gt;跨平台应用支持：桌面版、移动版，随处方便使用&lt;/p&gt;
&lt;p&gt;无需存储密码：计算获得最终密码，没有存储过程，更安全&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;它的工作原理大概是这样子的：输入一个&amp;quot;记忆密码&amp;quot;+“区分代号”，然后经过一个特定的Hash算法，获得一个“最终密码”。这个Hash算法主体是由多个md5算法混淆而来，重复概率极其低，而且具有不可逆推导的特性。由于不同的网站使用不同的密码，因此安全性大大提高。&lt;/p&gt;
&lt;p&gt;但是，花密本身还有一定的缺陷。首先，它的网页版工具没有做移动端适配，而我并不想在每个平台多装一个软件来实现这个小的功能。其次，它的密码输出位数强制为16位，仅包含英文字母和数字，很多时候会超出网站的密码位数限制，而且评估的密码强度只能达到中等。&lt;/p&gt;
&lt;p&gt;因此，我决定自己写一个小工具来改进这些问题。&lt;/p&gt;
&lt;h4 id=&#34;觅密&#34;&gt;觅密&lt;/h4&gt;
&lt;p&gt;受到花密的启发，我实现的工具名为&lt;a href=&#34;https://github.com/Wsine/seekpassword&#34;&gt;觅密&lt;/a&gt;，并且开源在Github中，在此再次感谢花密的idea。&lt;/p&gt;
&lt;p&gt;该工具的整体思路如下：第一部分，基本上是复刻花密的思路，在此就不再复述了。第二部分，我加入了特殊字符进行混淆，基本上评估的密码强度能够达到强级别。第三部分，我将密码长度默认10，暂时没遇到密码长度限制不包含10的网站。第四部分，考虑到部分网站的密码内容限制，我增加了选项去除特殊字符的加入。一键复制密码也有实现，但是由于精简体积和不同的浏览器特性不一样，并没有加入弹窗功能提示复制成功，知道有复制功能就行了。&lt;/p&gt;
&lt;p&gt;因此该工具拥有如下的特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完全开源&lt;/li&gt;
&lt;li&gt;移动端适配&lt;/li&gt;
&lt;li&gt;高强度密码&lt;/li&gt;
&lt;li&gt;更友好的密码长度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个只是一个小网页，依托Github Page运行，采用纯本地端计算，不涉及与服务器的交互，因此密码安全有保证，且开源。网页链接：&lt;a href=&#34;https://wsine.github.io/seekpassword/&#34;&gt;https://wsine.github.io/seekpassword/&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;P.S. 如果你也会编程的话，完全可以fork一份后修改来定制自己的安全策略。普通用户直接使用这个网页也完全没有问题。&lt;/p&gt;
&lt;p&gt;这里顺便提醒一下，&amp;ldquo;记忆密码&amp;quot;和“区分代码”并不一定要恒定。记忆密码还是很推荐使用等级策略来记忆，简单分2~3级我觉得就足够了，毕竟安全性已经大大提高了，也就是说你仅需要记忆2~3个短密码即可。区分代码其实可以根据自己对网站的第一反应来记忆，比如昵称、别称、域名、拼音缩写等等，按照自己的喜欢即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这个网页其实也解决了一个便携性的痛点&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;不知道各位有没有这样的痛苦，当你临时来到一个新的机器想要登陆一个账号，但是由于是复杂的强密码完全无法记忆，所以你得要么得重新安装密码管理软件同步过来，或者用手机查看密码后手动输入，这种体验本身都不友好。由于觅密它本身只是一个网页，保存为浏览器书签即可快速使用查看，或直接在新电脑打开网页输入一下就得到最终密码了。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/001cbe85e3702d136293e4e2df25b9f9459.jpg&#34; alt=&#34;seekpass&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;密码存储&#34;&gt;密码存储&lt;/h3&gt;
&lt;p&gt;密码的安全性是提高了，&lt;strong&gt;下一个点要解决的是所有权的问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;无论是笔记还是其他东西，我都希望我的数据能够掌握在我的手里。我来讨论一下极端的几种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;哪天我发疯了，将整个软件仓库删了，你不记得算法的流程了怎么办&lt;/li&gt;
&lt;li&gt;哪天Github服务被block了或者倒下了，你不知道我将新的网站部署在哪了怎么办&lt;/li&gt;
&lt;li&gt;哪天1password / Lasspass等服务倒下了，你的高强度密码都丢失了怎么办&lt;/li&gt;
&lt;li&gt;哪天你更换了常用平台不用Apple的硬件了，你存储在keychain的密码怎么导出呢&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;虽然这些情况都比较难达到，但我依然将这种情况考虑进去了&lt;/p&gt;
&lt;h4 id=&#34;keepass&#34;&gt;KeePass&lt;/h4&gt;
&lt;p&gt;我采用的密码管理软件是&lt;a href=&#34;https://keepass.info/&#34;&gt;KeePass&lt;/a&gt;，首先引用一下的它的官方介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;KeePass is a free open source password manager, which helps you to manage your passwords in a secure way. You can put all your passwords in one database, which is locked with one master key or a key file. So you only have to remember one single master password or select the key file to unlock the whole database. The databases are encrypted using the best and most secure encryption algorithms currently known (AES and Twofish). For more information, see the &lt;a href=&#34;https://keepass.info/features.html&#34;&gt;features page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;我知道部分人可能看不懂，没关系，我大发慈悲来做一下简短的翻译：&lt;/p&gt;
&lt;p&gt;KeePass是一个开源的密码管理器。你可以存储你的密码到一个数据库中，并通过一个主密码或密钥文件加密（或一起用），同理解锁也需要他们。该数据库是使用当今已知最安全的加密算法AES和Twofish来加密的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先安全性，采用的是最好的算法加密，只需要记忆一个主密码就好了，各大密码管理器均需要用户记忆主密码。&lt;/p&gt;
&lt;p&gt;其次所有权，所有密码都存储在一个数据库文件中，而这个文件完全掌握在你自己手中。&lt;/p&gt;
&lt;p&gt;然后可持续性，开源的算法及软件，完全不用担心服务提供商倒下，你总能找到方法从数据库文件中提取出你自己的密码。&lt;/p&gt;
&lt;p&gt;还有多样性，Keepass不仅能存储密码，还能存储notes和文件等等，像我将数字密码锁和路由器管理密码丢到这里真的好实用，我经常不用就忘记了。&lt;/p&gt;
&lt;p&gt;最后但也是最重要的一点是，它是免费的。无论1password还是Lastpass，价格基本都是3刀每个月，两百多一年吧，作为密码数据存储服务提供商，承担的风险不小，这个价格其实也合理。&lt;/p&gt;
&lt;p&gt;KeePass的官网下载为：&lt;a href=&#34;https://keepass.info/download.html&#34;&gt;https://keepass.info/download.html&lt;/a&gt;，通过一步一步创建一个本地数据库，我个人推荐同时使用 主密码 (Master Password) 和密钥文件 (Key File) 来加密，十分不推荐启用微软账户 (Windows User Account) 来加密。然后你就能得到如下两个文件：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;~
├── PasswordDatabase.kdbx
└── PasswordDatabase.key
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;主密码建议记忆在你的大脑中，或通过纸质方式存储；密钥文件建议存储多份，至少有一份在云盘有一份在移动硬盘中。&lt;/p&gt;
&lt;h4 id=&#34;webdav&#34;&gt;WebDAV&lt;/h4&gt;
&lt;p&gt;但是，KeePass仅是一个算法/软件，并不包含云服务，不像1Password / Lasspass等提供多平台密码同步功能。但这明显是刚需啊，因此我找到的方案是WebDAV，惯例引用一下它的官方描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Web Distributed Authoring and Versioning (&lt;strong&gt;WebDAV&lt;/strong&gt;) is an extension of the Hypertext Transfer Protocol (HTTP) that allows clients to perform remote Web content authoring operations. &lt;strong&gt;WebDAV&lt;/strong&gt; is defined in RFC 4918 by a working group of the Internet Engineering Task Force.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单点来说WebDAV仅是一个扩展的HTTP协议，允许客户端授权并远程访问和修改服务端的内容。这正是我们所需要的功能。&lt;/p&gt;
&lt;p&gt;2019年的各大网盘服务提供商中，支持WebDAV协议仅有&lt;a href=&#34;https://www.jianguoyun.com/&#34;&gt;坚果云&lt;/a&gt;和&lt;a href=&#34;https://www.dropbox.com/&#34;&gt;Dropbox&lt;/a&gt;两家，后者由于众所周知的原因，本文仅讨论前者。&lt;/p&gt;
&lt;p&gt;坚果云的官网为：&lt;a href=&#34;https://www.jianguoyun.com/&#34;&gt;https://www.jianguoyun.com&lt;/a&gt;，注册并登陆后，通过下面如下的步骤，添加一个授权的应用密码&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/001cbe85e3702d136293e4e2df25b9f9460.jpg&#34; alt=&#34;WebDAV&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;然后创建你喜欢的路径，并将刚刚得到的两份文件上传到坚果云中，文件路径和文件名都可以自定义&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/001cbe85e3702d136293e4e2df25b9f9461.jpg&#34; alt=&#34;jianguo_file&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;顺带一提，坚果云的免费版本每个月限制上传和下载流量，如图片左下角显示，但如果你看我实际的数据库大小其实也只有几kb（当然如果你要用keepass存储大文件当我没说），所以我认为流量是完全不用担心的，而且由于服务器在国内且没有限制可以跑满带宽，作为常用云存储也不错。&lt;/p&gt;
&lt;h3 id=&#34;密码易用&#34;&gt;密码易用&lt;/h3&gt;
&lt;p&gt;如果仅仅保证安全不考虑方便使用，我觉得也是很痛苦的一件事情。&lt;strong&gt;所以该章节要介绍的就是如何提高易用性。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之所以引入WebDAV，就是希望我们的数据库存储在云端，可以通过客户端随时访问并新增新密码，但又可以多平台同步。&lt;/p&gt;
&lt;h4 id=&#34;windows官方客户端keepass&#34;&gt;Windows官方客户端KeePass&lt;/h4&gt;
&lt;p&gt;在windows下面的话使用官方的客户端是比较好的选择。有下面的参数你是需要注意的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URL：这个URL是根据坚果云提供的服务器地址+你存储数据库的相对路径而来的，对比这图和上面的两幅图你就能发现规律了&lt;/li&gt;
&lt;li&gt;User name：就是上上图中的账号&lt;/li&gt;
&lt;li&gt;Password：注意这个并不是你登陆坚果云的密码，而是上上图中的显示密码里面的密码&lt;/li&gt;
&lt;li&gt;Remember：这个看你的喜好，我在我常用电脑上都是选择记住的，这样每次打开就只需要输入Master Password即可&lt;/li&gt;
&lt;li&gt;Master Password：根据自己设定的密码填写即可&lt;/li&gt;
&lt;li&gt;Key File：保存在本地的密钥文件路径&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;填好这5个参数后你就可以直接打开远端的数据库了，每次编辑完之后记得点保存就好，它就会同步到远端的数据库了~&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/001cbe85e3702d136293e4e2df25b9f9462.jpg&#34; alt=&#34;Keepass&#34;  /&gt;
&lt;/p&gt;
&lt;h4 id=&#34;web客户端tusk&#34;&gt;Web客户端Tusk&lt;/h4&gt;
&lt;p&gt;介绍链接：&lt;a href=&#34;https://subdavis.com/Tusk/&#34;&gt;https://subdavis.com/Tusk/&lt;/a&gt;，支持Chrome和Firefox，也是支持WebDAV的，非常棒(๑•̀ㅂ•́)و✧，不过我自己没有需求没用过就不截图了。&lt;/p&gt;
&lt;p&gt;####iOS客户端Fantasy Pass&lt;/p&gt;
&lt;p&gt;好了，接下来就到这篇的其中一个重点了！我尝试过官方推荐下载列表中的多个iOS平台的客户端，并没有一个是支持WebDAV协议的，这意味着我将不能跟远端的数据库双向同步。但是，在2019年我很幸运地在V2EX上面发现了一款新应用&lt;a href=&#34;http://www.fantasypass.cn&#34;&gt;FantasyPass&lt;/a&gt;，首先也是引用一下它的官方简介：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个功能强大、便捷的Keepass的IOS客户端。&lt;/p&gt;
&lt;p&gt;简介的UI和流畅的动画，支持多密码文件、自动填充、附件添加和查看、JS自定义功能、常用通知栏插件和自定义键盘。让一切尽可能的奇幻!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这款应用应该也是在2019年才上线的，而我也算是它的早期用户了，加入了官方的QQ群讨论。开发者是利用自己的业余时间独立开发的这款应用，也很积极听取用户的各种反馈。由于是业余时间独立开发，因此各种东西包括官网也还在建设中，所以介绍会略显不足。&lt;/p&gt;
&lt;p&gt;但是没关系，我来总结一下现有的一些优秀的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;精美的UI设计，对刘海屏和2018版iPad Pro均有适配，常见网站的图标支持&lt;/li&gt;
&lt;li&gt;多种云平台同步，包括但不限于WebDAV，iCloud，Onedrive，Dropbox，GoogleDrive&lt;/li&gt;
&lt;li&gt;支持iOS12的AutoFill功能&lt;/li&gt;
&lt;li&gt;支持FaceID和TouchID&lt;/li&gt;
&lt;li&gt;支持附件的预览&lt;/li&gt;
&lt;li&gt;支持备份通讯录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述的每一个功能，我认为都是优胜于官方下载页面推荐的iOS客户端miniKeepass的。作为日常稳定使用的app，是完全没有问题的。使用上只要明白了上面的5个参数，那么这个app的使用也不会遇到什么问题就不再赘述了。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/001cbe85e3702d136293e4e2df25b9f9463.jpg&#34; alt=&#34;fantasypass&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;目前在App Store中的售价为一次性买断制12元，我认为这个app还是非常值得的。&lt;/p&gt;
&lt;p&gt;下载链接：&lt;a href=&#34;https://apps.apple.com/cn/app/fantasypass-ikeepass/id1357961740&#34;&gt;https://apps.apple.com/cn/app/fantasypass-ikeepass/id1357961740&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;以上，就是我目前使用的密码管理方案了，免费，易用又安全。美中不足的可能在于生成密码这一步没有办法完美集成在别人开发的软件中，但是fantasypass有计划实现js extension，目前对我自己的使用来说也很知足了。&lt;/p&gt;
&lt;p&gt;都2019年了，何不找个时间试试更新一下自己的密码管理策略呢？&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>一个5年工科生的软件解决方案与故事</title>
      <link>https://blog.wsine.top/posts/5-years-cs-student-software-solution/</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wsine.top/posts/5-years-cs-student-software-solution/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;工欲善其事必先利其器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;适合自己的才是最好的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先这篇文章的初衷呢，很单纯，仅仅只是因为平时是一个工具控的爱好者，而身边朋友又大量和我咨询如何提高效率，解决痛点，所以特意写一篇文章，分享一下我在多平台下使用的软件，仅供参考。😀&lt;/p&gt;
&lt;p&gt;风向标：&lt;em&gt;轻量够用&lt;/em&gt;、&lt;em&gt;跨平台&lt;/em&gt;、&lt;em&gt;效率&lt;/em&gt;、&lt;em&gt;联动&lt;/em&gt;、&lt;em&gt;键盘优先&lt;/em&gt;、&lt;em&gt;正版&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;一图以蔽之&#34;&gt;一图以蔽之&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/945c2eb9fbd4643098ff47f8cd0ca793.jpg&#34; alt=&#34;软件导图&#34;  /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;导航&#34;&gt;导航&lt;/h2&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&#34;windows-10-1809&#34;&gt;Windows 10 1809&lt;/h2&gt;
&lt;p&gt;作为一个有编写Office文档和IM聊天需求的人，我认为至少需要一台mac/win来作为处理这些事情的机器，除非跟你交流的人能跟你使用完全相同的平台和软件。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;刚需&#34;&gt;刚需&lt;/h3&gt;
&lt;h4 id=&#34;浏览器chrome&#34;&gt;浏览器：Chrome&lt;/h4&gt;
&lt;p&gt;作为浏览器界的霸主，基本上每一个新网站的第一适配都会是Chrome，这能使你确保自己拥有最少遇到bug的体验。😎&lt;/p&gt;
&lt;p&gt;速度快，占用内存高，也是一个双刃剑，🤔 但是可以通过养成良好的使用习惯来减缓不足。我个人只有在搜索查资料的时候才会高并发打开新标签页，提前加载多个网页，然后快速浏览并关掉资料不合适的网页，一般情况下我的网页数量能控制在5个左右，配合快捷键跳转网页实在是如鱼得水，效率刚刚滴。顺便提一嘴👴 ，请学会使用合适的搜索引擎搜索合适的关键字，比如工科领域使用Google+English搜索排名前2的结果能解决你70%的问题，zhihu.com/github.com等也是搜索引擎，请不要再拘泥于那唯一的搜索引擎了。&lt;/p&gt;
&lt;p&gt;在登录了google的账号后，就能够无缝同步书签，这一点在多设备同步的情况下还是很有用的。但是书签本身是需要被整理和维护的，否则无法快速检索，那保存下来的书签也会变得没有意义。我是在大二的时候接触到这一方法论的，它能使我在未来的这几年里更快找到所需要的东西。同步书签本身依赖于google服务，微软的edge浏览器也在切换为chromium内核，这点我不予置评，如果体验好的话相信我会切换为edge浏览器的。😘&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/e9d049b168fdc7fbcd6c2bffb8166f6d.jpg&#34; alt=&#34;浏览器书签&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;拥有大量的插件支持也是Chrome本身胜于其他家的因素之一，下面着重讲讲我用到的插件。&lt;/p&gt;
&lt;h5 id=&#34;键盘控制vimium&#34;&gt;键盘控制：Vimium&lt;/h5&gt;
&lt;p&gt;这是一个利用键盘来控制网页浏览的工具，多用键盘毫无疑问能提高效率，但是要注意按组合键时候的舒适性，有空多活动活动手指关节。🤞&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/5ff63aebaeac101adcc82bdbf58a9c10.gif&#34; alt=&#34;Vimium.gif&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;我来说一下我日常使用到的按键及其功能&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;按键&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ctrl + t&lt;/td&gt;
&lt;td&gt;新建标签&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;alt + d&lt;/td&gt;
&lt;td&gt;定位到地址栏&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gi&lt;/td&gt;
&lt;td&gt;定位到第一个编辑框&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;f&lt;/td&gt;
&lt;td&gt;在当前标签页打开链接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shift + F&lt;/td&gt;
&lt;td&gt;在新标签页打开链接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;space&lt;/td&gt;
&lt;td&gt;滚动条下拉半屏&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shift + space&lt;/td&gt;
&lt;td&gt;滚动条上拉半屏&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;j&lt;/td&gt;
&lt;td&gt;滚动条下拉10个pixel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;k&lt;/td&gt;
&lt;td&gt;滚动条上拉10个pixel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shift + J&lt;/td&gt;
&lt;td&gt;切换到左边的标签页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shift + K&lt;/td&gt;
&lt;td&gt;切换到右边的标签页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl/alt + num&lt;/td&gt;
&lt;td&gt;跳转到特定标签页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x / ctrl + w&lt;/td&gt;
&lt;td&gt;关闭当前标签页&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;有了上面的这一套衔接的流程，基本上覆盖了网页浏览的全流程了。还剩打开书签的工作还是留个小红点/触摸板吧👻 ，虽然绝大部分情况下我都能记住域名。😁&lt;/p&gt;
&lt;p&gt;有一个值得吐槽的点在于，跳转到特定标签页这个功能上三个平台上面的快捷键都不统一，简直要被气死。Win下面是&lt;code&gt;ctrl + num&lt;/code&gt;，Linux下面是&lt;code&gt;alt + num&lt;/code&gt;，Mac下面是&lt;code&gt;command + num&lt;/code&gt;。💩虽然曾经受不了了写了一个&lt;a href=&#34;https://github.com/Wsine/AltNumberTab&#34;&gt;小插件&lt;/a&gt;，但如果想提交到chrome应用商店还得缴费注册google开发者，遂不了了之（忍耐）。&lt;/p&gt;
&lt;h5 id=&#34;规则代理switchyomega&#34;&gt;规则代理：SwitchyOmega&lt;/h5&gt;
&lt;p&gt;不知道各位看官有没有遇到这样的痛点，如果不使用代理，则想上去的网站上不去；如果全局使用代理，则国内的网站流量绕了一大圈才到达电脑，体验感贼低。但SwitchyOmega就是来解决这个痛点的。&lt;/p&gt;
&lt;p&gt;首先你可以设置一个你自己喜欢的代理&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/985e45c3ea943cbf1b5ed66071668bce.jpg&#34; alt=&#34;代理&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;然后再设置一个&lt;a href=&#34;https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt&#34;&gt;规则列表&lt;/a&gt;，满足规则的流量走proxy代理，不满足规则的流量走直连，也可以互换，随你喜欢哈~&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/58d00a2e435c25e912cfe324f414c591.jpg&#34; alt=&#34;代理2&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;但是，这个但是很关键哈。一个规则列表肯定不能满足全部的需求的，所以Switchy酱还提供了手动选择的option。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/b9cf2887e6eed8c2520ef4bedf67e8d5.jpg&#34; alt=&#34;代理3&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;大部分情况下我们只需要访问网站就好，体验感直升。👍&lt;/p&gt;
&lt;h5 id=&#34;剪裁印象笔记剪裁插件&#34;&gt;剪裁：印象笔记剪裁插件&lt;/h5&gt;
&lt;p&gt;曾经，我也是一个Pocket稍后阅读的中毒使用者，喜欢把很多有用的信息收纳起来，待有一天能够重新阅读，温故而知新，亦或是分享给别人。&lt;strong&gt;但是&lt;/strong&gt;，Pocket只是收纳了一个网址而已，当源内容被删的时候，你的收纳也会随之烟消云散QAQ，尤其是微信公众号的文章，在短时间的爆款文章发出来的时候，过一个小时再访问都显示被举报了就再也访问不到了，多少深度好文被掩埋呀&lt;/p&gt;
&lt;p&gt;印象笔记的剪裁功能才让我领略到什么叫做剪裁。我就用知乎这样的瀑布流来展示一下好了，剪藏的格式巨多，而且隐藏广告这个真的是赞赞赞，试问谁收纳还把垃圾一起收纳进来啊&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/42a538a09a1bda3313d4a1281524f766.jpg&#34; alt=&#34;印象笔记&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更重要的是&lt;/strong&gt;，知识收纳最怕的是只收不二次阅读，然后重复一遍又一遍地收纳。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/e96980907cf79945c5cf3258e58d48ab.jpg&#34; alt=&#34;印象搜索&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;不过检索深度还有成功率还很低就是了，目前应该只停留在title级别搜索？但总归是一个好的开始。&lt;/p&gt;
&lt;h4 id=&#34;im微信&#34;&gt;IM：微信&lt;/h4&gt;
&lt;p&gt;国民级应用，失去了它就失去了连接。学会搭配快捷键，IM的沟通效率还能再提升一个档次喔。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;按键&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ctrl + alt + w&lt;/td&gt;
&lt;td&gt;调出微信&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl + f&lt;/td&gt;
&lt;td&gt;搜索联系人&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;↑ / ↓&lt;/td&gt;
&lt;td&gt;切换联系人&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Esc&lt;/td&gt;
&lt;td&gt;关闭微信窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;alt + a&lt;/td&gt;
&lt;td&gt;调用微信截图&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;凭借手速党的胜利，3秒回复一个新消息都是很稀松平常的事情。✌️&lt;/p&gt;
&lt;h4 id=&#34;图片浏览自带photos&#34;&gt;图片浏览：自带Photos&lt;/h4&gt;
&lt;p&gt;这个工具吧，我真的是从小看着它大的233😆&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最初吧并不支持透明底的png图像，这我当时只能想办法调用win7时代的图片浏览器才能看到&lt;/li&gt;
&lt;li&gt;然后吧并不支持raw图像格式，这我觉得倒没什么，很多也不支持，找个小软件看看就好了，但是现在支持了，点个赞&lt;/li&gt;
&lt;li&gt;再来吧gif图片不会播放，是静止的，噗；还好有ie11；不过现在也支持了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我简直就像一个老父亲一样看着它的成长，满满的记忆&lt;/p&gt;
&lt;p&gt;这软件还支持图像编辑功能，裁剪大小，添加滤镜等都不是问题，配合&lt;code&gt;Shift + Win + S&lt;/code&gt;快捷键截图还是挺方便的。&lt;/p&gt;
&lt;p&gt;不过客官要清楚，由于还多了编辑功能，这软件的加载速度还是相对比较慢的，如果是图像工作者尽早找替代软件吧。&lt;a href=&#34;https://cn.bandisoft.com/honeyview/&#34;&gt;honeyview&lt;/a&gt;不错喔，免安装还没有广告，还要什么自行车，和bandizip同厂软件，哎，韩国软件也还是很不错滴。😘&lt;/p&gt;
&lt;h4 id=&#34;视频播放器potplayer&#34;&gt;视频播放器：PotPlayer&lt;/h4&gt;
&lt;p&gt;这个在Win10时代被吹爆的播放器，我就不再吹了。总之呢，一个播放器只要能外挂字幕，软件包小，内存占用低，CPU占用低，调节字幕与视频的gap，切换音轨，硬件加速，不影响续航，方向键调节几帧，空格键暂停播放，支持的播放格式全，UI还过得去，我一般就不要求什么了，这个要求不算高吧？🙈&lt;/p&gt;
&lt;p&gt;以前吧，我总是用鹅厂的QQ影音，无奈软件停更太久了，适配太差功能都有问题了，才不得不换播放器。不过最近看到3.0大版本更新漂亮了，我很看好你唷，待你成熟之时我再支持国产可好🐣&lt;/p&gt;
&lt;h4 id=&#34;输入法自带微软拼音&#34;&gt;输入法：自带微软拼音&lt;/h4&gt;
&lt;p&gt;说真的，这是唯一一个能够在win32、metro、uwp三种应用间通用的输入法了，尽管可能有一些小bug，但至少能用。在1809版本中，联想功能、错误纠正都好了很多了，处于可用的状态了。&lt;/p&gt;
&lt;p&gt;之前一直用的是搜狗拼音输入法智慧版，一个看似大众实质小众的输入法，还没有弹窗，一般人我不告诉他😏&lt;/p&gt;
&lt;p&gt;还有一个字体渲染的问题一直困扰着我，微软拼音的字体渲染就像用mactype一样，但怎么样才能将这种字体也应用在别的软件啊😞&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/0c655fdc5065e6a420d398ec6ff31231.jpg&#34; alt=&#34;字体渲染&#34;  /&gt;
&lt;/p&gt;
&lt;h4 id=&#34;音乐qq音乐&#34;&gt;音乐：QQ音乐&lt;/h4&gt;
&lt;p&gt;音乐我倒是没什么好分享的，PC端上我只需要曲库比较全就好了，上市的QQ音乐就是首选了。而且还有推荐算法，还行吧，但推荐算法怎么能比得上云村的呢😏&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://listen1.github.io/listen1/&#34;&gt;Listen1&lt;/a&gt;也是一个优秀的音乐播放器，拥有全平台的歌曲，有兴趣的可以试试~&lt;/p&gt;
&lt;h4 id=&#34;下载工具迅雷极速版&#34;&gt;下载工具：迅雷极速版&lt;/h4&gt;
&lt;p&gt;这个说实在的，截止至发稿日，在国内的P2P环境里，各大视频下载点使用&lt;code&gt;thunder://&lt;/code&gt;协议下，谁能pk掉迅雷呢，然而迅雷的吃相实在是太难看了。尊享版的价格居高不下，会员的去广告还是给你留下了一个大大的浏览器窗口。真的是要吐槽的点实在是太多了。对了，还有那强制监控我各种下载入口的，明明这次去掉了监控，下次开机启动后就好像没保存过这个设置一样，真的是太恶心了。&lt;/p&gt;
&lt;p&gt;迅雷极速版，拥有无广告，同等的下载功能，不过最近多了一个升级提醒，点一下就是了，反正我使用频率低。安装包流传于各个网络角落，注意鉴别，朋友可以问我拿哈。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;大小&lt;/th&gt;
&lt;th&gt;md5&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ThunderSpeed1.0.35.366.exe&lt;/td&gt;
&lt;td&gt;23.2MB&lt;/td&gt;
&lt;td&gt;ab002005168e0e6439ac4667dbecff84&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/4d9493a8cd8f0ee19a49edb16dc79a89.jpg&#34; alt=&#34;迅雷极速版&#34;  /&gt;
&lt;/p&gt;
&lt;h4 id=&#34;密码管理keepass&#34;&gt;密码管理：Keepass&lt;/h4&gt;
&lt;p&gt;都2019年了，互联网服务这么多，在生物识别技术没有普及的当下，依赖有限的几个密码，实在是虎口拔须。这里先卖个关子，我会另写一篇文章介绍密码管理。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;办公&#34;&gt;办公&lt;/h3&gt;
&lt;h4 id=&#34;文本编辑器sublime-text-3&#34;&gt;文本编辑器：Sublime Text 3&lt;/h4&gt;
&lt;p&gt;一个好的文本编辑器，才是星巴克里面装逼的利器。👨‍💻 那么Sublime好在哪里呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;颜值过关&lt;/li&gt;
&lt;li&gt;代码高亮&lt;/li&gt;
&lt;li&gt;优秀快捷键&lt;/li&gt;
&lt;li&gt;搜索跳转&lt;/li&gt;
&lt;li&gt;插件系统&lt;/li&gt;
&lt;li&gt;项目文件树&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;吹到这里我觉得就够了，反正VS Code的反人类快捷键又不可能打败Sublime的对吧🤷‍♂️&lt;/p&gt;
&lt;p&gt;在这里我顺便提一下，win10的记事本&lt;strong&gt;居然更新了&lt;/strong&gt;~现在支持Unix的换行符等功能，哎呦不错喔&lt;/p&gt;
&lt;h4 id=&#34;officemicrosoft-office-365&#34;&gt;Office：Microsoft Office 365&lt;/h4&gt;
&lt;p&gt;首先我在这里先明确一下，Office套件包括了Word + Excel + PowerPoint + Outlook + OneDrive + SharePoint + OneNote，只有合理运用其联动的功能才能发挥它更强的能力。&lt;/p&gt;
&lt;p&gt;举个栗子👨‍🏫 ：你用Word写了一篇文章，保存在OneDrive中，通过SharePoint共享给小伙伴，小伙伴收到了邮件提醒用Outlook打开超链接直接跳转到Word中，然后直接在上面做一些修改和批注讨论，一来二往，终稿就写好了，最后还可以将它虚拟打印在OneNote中写写总结学到了什么。你会发现这里面有3个优点：①文件保存在OneDrive中途怎么换电脑打开的文件都一样，完全不需要U盘了；②修改和批注都在同一份文件中操作，没有了什么&lt;code&gt;装逼指南v3终稿打死也不修改版本.pptx&lt;/code&gt;这种杂乱无章命名；③从无到产出到总结能给下一篇提供思路和参考，完成了一个良性循环。💁‍♂️&lt;/p&gt;
&lt;p&gt;不过呢，Office套件还是需要付费的，一般高校和企业都有提供，建议先考虑一下有没有。自己需要购买的话，建议凑6人一起买家庭版，相对来说划算很多。预算不足的用WPS也不错，轻量够用，稍微忍受一下广告，功能操作上也很优秀，还有多标签功能呢，格式尽量选择&lt;code&gt;docx、xlsx、pptx&lt;/code&gt;这种标准的格式。&lt;/p&gt;
&lt;h4 id=&#34;邮箱客户端自带邮箱&#34;&gt;邮箱客户端：自带邮箱&lt;/h4&gt;
&lt;p&gt;Win10自带这个邮件客户端基本功能基本已经齐全了，签名归档一样不漏，我觉得吧够用就好，毕竟个人使用其实不需要太多fancy的功能。&lt;/p&gt;
&lt;h4 id=&#34;压缩工具bandizip&#34;&gt;压缩工具：Bandizip&lt;/h4&gt;
&lt;p&gt;Bandizip是一款颜值挺高的压缩工具，功能不断在更新与维护，只是感觉更新频率太高了，动不动就提示升级一下。功能本身是挺优秀的，解压速度快，还能解压像&lt;code&gt;tar.gz&lt;/code&gt;后缀的压缩包。轻量简洁是它的优点。&lt;/p&gt;
&lt;p&gt;这里也提一下另一款，2345好压，功能也很齐全，自带工具箱文件校验码等，宣称永久免费（之前还宣传无广告），看需要使用吧。我倒是不太需要，毕竟我会调用系统命令看文件校验码不是😜 。&lt;/p&gt;
&lt;h4 id=&#34;pdf阅读器edge&#34;&gt;pdf阅读器：Edge&lt;/h4&gt;
&lt;p&gt;Edge本身的阅读功能我觉得真心棒，无论是mobi等格式电子书也能阅读，pdf就更不在话下了。Edge的标注功能能够媲美Adobe Reader，就差下划线了，我反馈了一下。但是打开速度稍慢，不能接受的话是用其他软件比较好。但是它还支持手写✍🏻  和OneNote联动我就喜欢上它了。&lt;/p&gt;
&lt;h3 id=&#34;学习&#34;&gt;学习&lt;/h3&gt;
&lt;h4 id=&#34;云存储onedrive&#34;&gt;云存储：OneDrive&lt;/h4&gt;
&lt;p&gt;OneDrive本身就是Win10自带的云存储，我喜欢把将重要的文档和照片都保存到OneDrive中，同步完云端之后，还可以选择释放本地空间。这样哪怕是一台32G的小容量设备，也能发挥它巨大的价值。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/7b8012c6c8cc01ede2ec421ce3890992.jpg&#34; alt=&#34;释放本地空间&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;OneDrive的速度其实本身并不慢，但是貌似在不同的地区有不同的速度表现，实测在国内的4个一线城市和几个二线城市速度我都能接受，基本满足我的差旅需求了。&lt;/p&gt;
&lt;h4 id=&#34;云笔记印象笔记&#34;&gt;云笔记：印象笔记&lt;/h4&gt;
&lt;p&gt;说实话，我一直都是微软服务的忠实拥护者。但是OneNote的速度与OneDrive不可同日而语，OneNote的同步速度一般为n小时（0.5 &amp;lt; n &amp;lt; 5）。所以不得不在今年切换为印象笔记，还好它常年打6折，感觉真的是一个良心软件。我不会讨论OneNote与Evernote谁好谁坏，这里反而想引用一个观点给大家参考。🌞&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Evernote就像一个图书馆，广而纳之，它扩展的是你的广度（Breath）；OneNote就像一个工作室，深而究之，它扩展的是你的深度（Depth）；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;笔记术是一个伴随人们成长的一个持续过程，学会了它我真的感觉受益匪浅。之后我会另写一篇文章介绍我会如何同时利用Evernote和OneNote来记录我的笔记的。&lt;/p&gt;
&lt;h4 id=&#34;待办工具microsoft-to-do&#34;&gt;待办工具：Microsoft To-Do&lt;/h4&gt;
&lt;p&gt;GTD（Getting Thing Done）是一个优秀的理念，它能帮助你在茫然时打开电脑的时候告诉你下一步有什么事情可以做的。但是这个依赖一个习惯，通过手机端收集整理Thing，在打开电脑的时候瞄一眼Todo软件，然后将事情Done。这能节省了你大量浪费在视频网站的时间。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/c7f2534e6bda61bc5db00677e6615d42.jpg&#34; alt=&#34;Todo&#34;  /&gt;
&lt;/p&gt;
&lt;h4 id=&#34;思维导图xmind-zen&#34;&gt;思维导图：XMind ZEN&lt;/h4&gt;
&lt;p&gt;养成思维导图和大纲的习惯，能使你面对写文章的时候，不会无从下手，用来整理读书时候的作者思维也是一个巨大的帮助。在这点上我觉得自己的使用还不够深入，希望能够在更多的场景下挖掘它更多的作用。&lt;/p&gt;
&lt;p&gt;ZEN本身的设计非常棒(๑•̀ㅂ•́)و✧，加入了禅模式，专注于头脑风暴本身而不用受到其他事情的打扰。&lt;/p&gt;
&lt;h3 id=&#34;geek&#34;&gt;Geek&lt;/h3&gt;
&lt;h4 id=&#34;自由冲浪ss--openvpn&#34;&gt;自由冲浪：Ss + OpenVPN&lt;/h4&gt;
&lt;p&gt;这个我就不赘述了。&lt;/p&gt;
&lt;h4 id=&#34;远程连接cmd--自带ssh&#34;&gt;远程连接：Cmd + 自带ssh&lt;/h4&gt;
&lt;p&gt;曾经我是一个xshell的长期用户，自从在企业网里面无法使用后，我就不得不寻求其他的解决方案。我对ssh的要求其实还真的蛮高的，最后也特别惊讶自己会选中这个solution。我先来列举一下自己对ssh工具的要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;远程连接配色正常显示&lt;/li&gt;
&lt;li&gt;powerfont字体支持&lt;/li&gt;
&lt;li&gt;x11 forwarding支持&lt;/li&gt;
&lt;li&gt;tmux的状态栏正常显示&lt;/li&gt;
&lt;li&gt;可以连续选中多行文本&lt;/li&gt;
&lt;li&gt;正常的&lt;code&gt;ctrl + c&lt;/code&gt; 终止程序，&lt;code&gt;ctrl + v&lt;/code&gt; tmux热键，&lt;code&gt;ctrl + w&lt;/code&gt; vim热键&lt;/li&gt;
&lt;li&gt;正常的&lt;code&gt;ctrl + shift + c/v&lt;/code&gt;复制粘贴或鼠标选中复制中键粘贴&lt;/li&gt;
&lt;li&gt;多标签功能支持&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;列举了这么多相信很多小伙伴看到都要吐槽我了，但是我每天有大量的时间花费在这个ssh工具上面，工欲善其事必先利其器，我一定会选出最适合自己的方案。不过鱼与熊掌不可兼得，比如这个solution就不支持多标签，挑选最合适就好。其实我自己也没想到Win10上面的进步这么快，打开cmd直接&lt;code&gt;ssh username@ip&lt;/code&gt;就可以连上服务器，真的特别省心，速度极快。最后上一张图镇楼😀&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/35bd1a89f669b8462f4643899f8b394c.jpg&#34; alt=&#34;cmd&amp;#43;ssh&#34;  /&gt;
&lt;/p&gt;
&lt;h4 id=&#34;linuxwsl---ubuntu&#34;&gt;Linux：WSL - Ubuntu&lt;/h4&gt;
&lt;p&gt;wsl算是补齐了windows系统下的命令行编程的支持，至此我个人认为三大平台都有了Bash的支持，严格来说我的综合评价是&lt;code&gt;Linux &amp;gt; Windows &amp;gt; MacOS&lt;/code&gt;，毕竟mac下面的bash要适配起来得改好多东西，这是减分项。&lt;/p&gt;
&lt;p&gt;关于WSL在Windows下面的调优使用，我会另外写一篇文章来介绍提高它的易用性。&lt;/p&gt;
&lt;h4 id=&#34;markdowntypora&#34;&gt;Markdown：Typora&lt;/h4&gt;
&lt;p&gt;颜值与功能齐飞，说的就是Typora。Markdown作为文章编写的当红炸子鸡，确实带来了很多的便利，将内容的编写和格式的渲染分开使得一处编写，多处发布成为了可能。这跟编译型语言的思路很香，但是这里面会遇到两个矛盾：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;按照自我理解的md格式编写，最终还是需要等到本地预览的时候才能知道格式有没有编写错误，然后再来改格式&lt;/li&gt;
&lt;li&gt;本地调整完格式后，再上传到不同的平台发布，然后会发现不同平台使用的格式不一样导致部分渲染失败&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Typora针对这两个问题有相应的解决方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;所见即所得&lt;/code&gt;的编写方式，即编辑栏跟渲染栏在同一个界面中，确保了本地编写的格式正确性&lt;/li&gt;
&lt;li&gt;采用了最严格的&lt;a href=&#34;https://github.github.com/gfm/&#34;&gt;GitHub Flavored Markdown Spec&lt;/a&gt;标准来作为格式规范，并自带格式化功能，减少本地自主调整格式的需要&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后再配合一个图床服务，Typora无愧于颜值与功能齐飞~~~👍&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/764ef69183fec00b789313c17ebe0ed6.jpg&#34; alt=&#34;typora&#34;  /&gt;
&lt;/p&gt;
&lt;h4 id=&#34;键鼠共享synergy&#34;&gt;键鼠共享：Synergy&lt;/h4&gt;
&lt;p&gt;作为一个Linux桌面用户，还是需要有一台win/mac作为自己的主力聊天与写文档设备的。包括写代码的时候需要与别人沟通，怎么比得上截个图圈一下发给别人更快捷方便呢？所以迫于Linux没有好的跨平台沟通软件（or被垄断的那个没有）anyway，这个还是必不可少的。&lt;/p&gt;
&lt;p&gt;这个软件本身也比较神奇，这是一个&lt;strong&gt;开源收费软件&lt;/strong&gt;。软件整体可以在github上找到源代码，但是你会发现没有任何的编译文档说明。在官网下载这个软件需要付费license激活。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是&lt;/strong&gt;，这个但是很重要哈，旧版本是有提供编译好的下载地址的：https://github.com/brahma-dev/synergy-stable-builds/releases，使用开源软件并不算违反正版。&lt;/p&gt;
&lt;p&gt;最终整体的体验就是，我可以利用台式机的机械键盘和人体工程学鼠标，移动鼠标平滑切换两个桌面，各自操作不同的软件，在A机器复制文字，在B机器粘贴文字，得到更好的软件体验。可能还比较期待的是，如果新版本中能加入复制粘贴截图功能和内置键盘快捷键（可自主配置实现）切换桌面功能，我还是愿意为其付费的。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/fa7d71917966b4a2cbea23e1c2e6cb11.jpg&#34; alt=&#34;server&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/3660300f833cf1708ac28fc4f0b1270c.jpg&#34; alt=&#34;client&#34;  /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;ubuntu-1604&#34;&gt;Ubuntu 16.04&lt;/h2&gt;
&lt;h4 id=&#34;浏览器chrome-1&#34;&gt;浏览器：Chrome&lt;/h4&gt;
&lt;p&gt;这个上面也说过了，只要登录同一个账号就好。&lt;/p&gt;
&lt;h4 id=&#34;officelibreoffice&#34;&gt;Office：LibreOffice&lt;/h4&gt;
&lt;p&gt;能看就行，千万别作死去编辑然后发给老板。&lt;/p&gt;
&lt;h4 id=&#34;文本编辑器vim&#34;&gt;文本编辑器：Vim&lt;/h4&gt;
&lt;p&gt;学习曲线有多难，相信这点是不用我多说的，它本身很适合想要理解软件编译链接构建等过程的开发者，如果只是单纯想要搞开发，那用什么其实都是ok的。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/334b54b985a61de1ce4340c3e91e8d2a.jpg&#34; alt=&#34;vim&#34;  /&gt;
&lt;/p&gt;
&lt;h4 id=&#34;输入法rime&#34;&gt;输入法：Rime&lt;/h4&gt;
&lt;p&gt;Rime算是在Linux下最方便，最稳定的输入法了。可以通过apt一键安装，然后也不需要配置，也不太需要考虑ibus/ficix底层引擎，反正都有。颜值的话我觉得是ok的，自动联想功能我感觉可以打7分。软件本身也支持很多定制化，贴一个默认的图以示赞赏。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/daa76cd691d2aed0dd4beb1f0a849c18.jpg&#34; alt=&#34;rime&#34;  /&gt;
&lt;/p&gt;
&lt;h4 id=&#34;shellzsh--bash&#34;&gt;Shell：Zsh + Bash&lt;/h4&gt;
&lt;p&gt;Zsh相比Bash是会有更优秀的用户体验的，shell本身的CPU和内存占用是可以忽略的，所以比拼就在功能点上。zsh + oh-my-zsh 可以带来 select mode、git promt、intelligent completion、better alias等优秀功能，如果日常大量的开发都能在一台机器上，还是比较建议试用zsh的。&lt;/p&gt;
&lt;p&gt;bash通过调教也能达到更好的体验，但想要比肩zsh估计还是有点难的，需要在多服务器端操作的，建议也调整一下bash使其更适合自己。👨‍💻&lt;/p&gt;
&lt;h4 id=&#34;终端复用器tmux&#34;&gt;终端复用器：Tmux&lt;/h4&gt;
&lt;p&gt;一个终端连接使无法满足日益增长的多进程需求，而tmux在本地与服务端都能被使用，且能够挂载在后台运行，就算因为网络不稳定远程连接断线了也能重新连接恢复上下文，实乃居家旅行必备的神器啊。👨‍💻&lt;/p&gt;
&lt;h4 id=&#34;图像浏览器自带image-viewer&#34;&gt;图像浏览器：自带Image Viewer&lt;/h4&gt;
&lt;p&gt;能用就行。&lt;/p&gt;
&lt;h4 id=&#34;视频播放器vlc&#34;&gt;视频播放器：Vlc&lt;/h4&gt;
&lt;p&gt;够用就好。&lt;/p&gt;
&lt;h4 id=&#34;屏幕录制kazam&#34;&gt;屏幕录制：Kazam&lt;/h4&gt;
&lt;p&gt;这个还是蛮好用的，实力吹一句。&lt;/p&gt;
&lt;h4 id=&#34;屏幕色温redshift&#34;&gt;屏幕色温：Redshift&lt;/h4&gt;
&lt;p&gt;调节屏幕过滤蓝光，一直是我使用电子产品的刚需。Redshift的使用相比f.lux来说在Ubuntu上面要简单得多，安装配置启动都要简单一些，效果我倒没感觉太大的差别。只要蓝光被过滤了，那么一天下来的疲劳感还是会少一些的。💡&lt;/p&gt;
&lt;h4 id=&#34;markdowntypora-1&#34;&gt;Markdown：Typora&lt;/h4&gt;
&lt;p&gt;使用体验上跟windows下没有任何差别，好评！&lt;/p&gt;
&lt;h4 id=&#34;键鼠共享synergy-1&#34;&gt;键鼠共享：Synergy&lt;/h4&gt;
&lt;p&gt;见上。&lt;/p&gt;
&lt;h2 id=&#34;ios&#34;&gt;iOS&lt;/h2&gt;
&lt;h3 id=&#34;工作&#34;&gt;工作&lt;/h3&gt;
&lt;h4 id=&#34;邮箱mail--outlook办公&#34;&gt;邮箱：Mail + Outlook（办公）&lt;/h4&gt;
&lt;p&gt;通过Mail app来连接自己的hotmail邮箱（早期用户🖖 ），然后通过Outlook app来连接公司的office 365邮箱，基本就能满足我低频的个人邮箱使用但不错过任何信息，高频的办公邮箱使用且自带过滤不错过重要信息。&lt;/p&gt;
&lt;p&gt;但这里还是需要吐槽一些outlook app自身对于邮件的加载问题，加载速度很慢且不稳定，对于多个人回复过后的邮件阅读也是一件糟心的事情。&lt;/p&gt;
&lt;h4 id=&#34;待办工具reminders&#34;&gt;待办工具：Reminders&lt;/h4&gt;
&lt;p&gt;通过Reminders app来连接自己的microsoft服务，跟电脑上的microsoft todo软件能够同步，因此无论是在手机端还是在电脑端，都可以正常添加todo item或者resolve item还是重分类都行，非常棒(๑•̀ㅂ•́)و✧&lt;/p&gt;
&lt;h4 id=&#34;云存储onedrive-1&#34;&gt;云存储：OneDrive&lt;/h4&gt;
&lt;p&gt;手机端上我也使用OneDrive app，不过加载还是挺慢的，要是File app能够支持连接OneDrive就好了~&lt;/p&gt;
&lt;h4 id=&#34;扫描器office-lens&#34;&gt;扫描器：Office Lens&lt;/h4&gt;
&lt;p&gt;Office Lens最近终于更新了可以让用户手动调节自动捕捉边缘的角点了，毕竟算法本身是有局限性的，自从多了这个功能，我就能将重要的纸质文档扫描下来然后一键保存到OneDrive中，感觉还是棒棒哒(๑•̀ㅂ•́)و✧&lt;/p&gt;
&lt;h4 id=&#34;云笔记印象笔记-1&#34;&gt;云笔记：印象笔记&lt;/h4&gt;
&lt;p&gt;基本上我是不会在手机端做编辑的（除了名片扫描），所以纯阅读体验对我来说很重要。对于网页转存和markdown笔记的阅读还不足以外，普通的笔记的手机适配性我还是比较喜欢的，相比之前用OneNote的时候不断在小屏幕上移动布局，这个更让我喜欢一些。&lt;/p&gt;
&lt;p&gt;还有它的名片扫描功能也挺好用的，就是自动识别能力不强，我理解这里的难度但还是有提升空间的。&lt;/p&gt;
&lt;h4 id=&#34;双因子验证器google-authenticator&#34;&gt;双因子验证器：Google Authenticator&lt;/h4&gt;
&lt;p&gt;本来嘛我是一个微软的忠实用户，第一思考就是Microsoft Authenticator。然而，功能一样的情况下，我还是选择了颜值哈哈哈。Google家的这款还是字体大且明亮好看啊啊。&lt;/p&gt;
&lt;h3 id=&#34;社交&#34;&gt;社交&lt;/h3&gt;
&lt;h4 id=&#34;qqtim&#34;&gt;QQ：TIM&lt;/h4&gt;
&lt;p&gt;对于QQ这个工具来说，我已经是一个叔叔级别的人儿了。早已忘却了QQ空间，QQ农场是什么感觉了，只剩下单纯的IM需求。所以TIM相对其他的功能来说就比较纯粹了，我还挺喜欢的，加法与减法的矛盾并不存在。&lt;/p&gt;
&lt;h4 id=&#34;微博weibo-intl&#34;&gt;微博：Weibo intl.&lt;/h4&gt;
&lt;p&gt;微博国际版也挺明亮简洁的，修复了时间线的问题后，也就能满足八卦的入口，日常抽奖的需求噗(/≧▽≦)/。但绝大部分的需求还是需要在普通版才有，比如重新绑定新手机。&lt;/p&gt;
&lt;h4 id=&#34;职场领英&#34;&gt;职场：领英&lt;/h4&gt;
&lt;p&gt;这里相对来说会比较简单一点，描述一下自己，给自己认可的人的技能点+1，我认为是职场中最美妙的东西，但希望不要在未来沦落成像Github一样的刷star的业务。有时候当一个小透明也挺好的，何必利用信息不对等来抬高自己导致人生更艰难呢。&lt;/p&gt;
&lt;h3 id=&#34;其他&#34;&gt;其他&lt;/h3&gt;
&lt;h4 id=&#34;词典必应词典&#34;&gt;词典：必应词典&lt;/h4&gt;
&lt;p&gt;我没有选择有道，是因为广告太多。我没有选择欧路，是因为启动页太慢。我所需要的仅仅是快速打开app，查一下单词的意思就足够了。学习英语单词等功能还是交给专业的app来做吧。&lt;/p&gt;
&lt;h4 id=&#34;外卖饿了么&#34;&gt;外卖：饿了么&lt;/h4&gt;
&lt;p&gt;在这个55开的年代，选什么不一样呢？&lt;/p&gt;
&lt;h4 id=&#34;密码管理fantasypass&#34;&gt;密码管理：FantasyPass&lt;/h4&gt;
&lt;p&gt;怎么说呢，这是一款密码管理工具的后起之秀，它弥补了keepass在iOS端的云同步的缺失。开发者还是一个学生，要对这个app有一定的包容性。&lt;/p&gt;
&lt;p&gt;关于更详细的介绍，我会在密码管理的文章中再详细述说的。&lt;/p&gt;
&lt;h3 id=&#34;阅读&#34;&gt;阅读&lt;/h3&gt;
&lt;h4 id=&#34;新闻zaker-pro&#34;&gt;新闻：ZAKER Pro&lt;/h4&gt;
&lt;p&gt;这是一款最良心的应用了，仅售1元，且说没有广告就是没有广告！能够分类订阅不用的新闻，相比推荐的不确定性来说，我还是更喜欢这个style。&lt;/p&gt;
&lt;h4 id=&#34;降价什么值得买&#34;&gt;降价：什么值得买&lt;/h4&gt;
&lt;p&gt;人称 色魔张大妈 。算是唯恐天下不买买买，想尽一切办法让你心动，没有自制力的同学请小心安装喔。它上面的好物推荐，降价提醒，产品评测都是我很喜欢的功能，回归第一点&lt;code&gt;工欲善其事必先利其器&lt;/code&gt;，买到合适的东西你的生产力就会跟着提高了。&lt;/p&gt;
&lt;p&gt;希望，SMZDM能够支持markdown编写文章吧，我也会考虑在上面写写东西的。&lt;/p&gt;
&lt;h4 id=&#34;消遣知乎&#34;&gt;消遣：知乎&lt;/h4&gt;
&lt;p&gt;真的只是消遣，就别打算学知识了。&lt;/p&gt;
&lt;h3 id=&#34;理财&#34;&gt;理财&lt;/h3&gt;
&lt;h4 id=&#34;投资查看同花顺&#34;&gt;投资查看：同花顺&lt;/h4&gt;
&lt;p&gt;同花顺这个软件做得还算蛮不错的，查看K线和放大缩小的一些操作，深得我的直觉喜欢。有一次我还跟客服小姐姐聊了十来分钟，说明着我使用这个软件的一些情况，他们也会记录下来反馈到研发中。从这点上来看，我还是很看好这个的未来的。但我一般只会利用这个软件看一些信息，购买还是会通过别的平台，没办法，购买和维护还是别的更方便一些。&lt;/p&gt;
&lt;h3 id=&#34;出行&#34;&gt;出行&lt;/h3&gt;
&lt;h4 id=&#34;飞机酒店携程&#34;&gt;飞机酒店：携程&lt;/h4&gt;
&lt;p&gt;作为一个出行必备的app，携程算是满足了我的需求。我会把我喜欢的酒店都存储在携程的收藏中，作为猎奇心理，大大小小的酒店我都有尝试，就看未来哪一天我还写文章将这些酒店慢慢诉说吧。&lt;/p&gt;
&lt;h4 id=&#34;航班航旅纵横pro&#34;&gt;航班：航旅纵横Pro&lt;/h4&gt;
&lt;p&gt;这个app可以查看你购买的航班的信息，包括但不限于机场名称、航站楼号、值机柜台、登机口、航班起飞时间、航班到达时间、是否有餐食、当前航班状态，前序航班状态。所有的这些信息都能够在一个app中给你提供了，相比自己寻找信息能够节省大量的时间，尤其是飞机出行把握时间很重要。&lt;/p&gt;
&lt;h4 id=&#34;打车滴滴&#34;&gt;打车：滴滴&lt;/h4&gt;
&lt;p&gt;作为最后的佼佼者，我只能说是没得选择的选择了。希望不要作恶吧。也期望着现在新的出行服务提供商的发展。&lt;/p&gt;
&lt;h4 id=&#34;地图高德地图&#34;&gt;地图：高德地图&lt;/h4&gt;
&lt;p&gt;由于害怕全家桶，故选择了高德。希望高德能将地铁图的入口往外层调整一下，我真的不相信这个需求会没有什么人用，4年了，这个入口不断被放在更深的地方，真的气死人。&lt;/p&gt;
&lt;h4 id=&#34;公交车来了&#34;&gt;公交：车来了&lt;/h4&gt;
&lt;p&gt;刚发展的时候还是蛮好用的，但是最近广告多得有点过分了。正在考虑替代方案中。&lt;/p&gt;
&lt;h4 id=&#34;高铁高铁管家pro&#34;&gt;高铁：高铁管家Pro&lt;/h4&gt;
&lt;p&gt;首先，官方12306的排队功能还没有上线，我还是需要这么一款软件帮我云端“排排队”。其次，只要我付费了软件就没有广告，何乐而不为。至于抢不抢得到嘛，心里有点数就行了。&lt;/p&gt;
&lt;h3 id=&#34;效率&#34;&gt;效率&lt;/h3&gt;
&lt;h4 id=&#34;快捷方式shortcuts&#34;&gt;快捷方式：Shortcuts&lt;/h4&gt;
&lt;p&gt;通过整合一系列的动作到一个按钮，一次性触发，颇有编程的思想。举个栗子，我最常用的两个shortcuts分别是“取快递提醒”和“12306出行事件”，一般快递到达快递箱之后会有一条短信提醒，我只需要复制这条短信，然后触发这个shortcut，再配合iphone的位置服务，当我走到快递箱附近时就会有通知告诉我取件码，这体验真的挺棒的。12306出行事件也是类似的。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/6eb18a5e73c15a6f6356cb92f53e8032.jpg&#34; alt=&#34;shortcus&#34;  /&gt;
&lt;/p&gt;
&lt;h4 id=&#34;日程widgetagenda&#34;&gt;日程Widget：Agenda+&lt;/h4&gt;
&lt;p&gt;Agenda+ app能够读取你的日历事件，然后生成agenda。系统日历app的widget只能显示今天的事件，但是我想要的明明是提前就要告诉我“女朋友生日啦”，否则你怎么准备啊，不用跪搓衣板吗。💄 🙏&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/dfdc381355f010a88385b5fd0a81f569.jpg&#34; alt=&#34;agenda&#34;  /&gt;
&lt;/p&gt;
&lt;h4 id=&#34;todo-widgetreminder&#34;&gt;Todo Widget：Reminder+&lt;/h4&gt;
&lt;p&gt;Todo List的作用就是先收纳，然后赶紧做，但你其实并不知道应该什么时候开始做，如果有item需要remind，那岂不成了event了？所以我自己的需求更需要一个Todo List能够显示再widget中的，会在不小心翻到的时候瞄一眼，提醒自己还有很多没干的，没有浪费时间在视频上。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/c4e2205bb24d9be5136aa3612678c95a.jpg&#34; alt=&#34;reminder&#34;  /&gt;
&lt;/p&gt;
&lt;h4 id=&#34;分词pin&#34;&gt;分词：Pin&lt;/h4&gt;
&lt;p&gt;最近这个app其实被我使用场景比较低了，但是它却是带我进入iOS效率的第一个软件。感恩有你，因此还保留在手机中。附上官方使用教程，有兴趣的可以了解一下。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cyanzhong/app-tutorials&#34;&gt;https://github.com/cyanzhong/app-tutorials&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/845f28aee9b39bd3bc5e4cb24692a983.jpg&#34; alt=&#34;pin&#34;  /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;
&lt;h4 id=&#34;传输pushbullet&#34;&gt;传输：Pushbullet&lt;/h4&gt;
&lt;p&gt;用来跨设备之间传输截图，作为Synergy 的一个补充吧。&lt;/p&gt;
&lt;h4 id=&#34;工具箱在线工具开源中国社区&#34;&gt;工具箱：在线工具——开源中国社区&lt;/h4&gt;
&lt;p&gt;实用功能还是蛮多的，有兴趣的慢慢挖掘吧。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/c0b061381f5fbb7b7f7fa7b103491cdb.jpg&#34; alt=&#34;tools&#34;  /&gt;
&lt;/p&gt;
&lt;h4 id=&#34;流程图processon&#34;&gt;流程图：ProcessOn&lt;/h4&gt;
&lt;p&gt;一个蛮知名的在线软件了，可以支持流程图、思维导图、原型图、UML、网络拓扑图、组织结构图，样式也算挺漂亮的。&lt;/p&gt;
&lt;h4 id=&#34;关系图sketchboard&#34;&gt;关系图：Sketchboard&lt;/h4&gt;
&lt;p&gt;随手截图两张看看效果吧，没有ipad或者surface的时候，这个还是挺好用的&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/899e21d5ec6b142911cad227f6f82cf3.jpg&#34; alt=&#34;sketchboard1&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/f57b4954c04f3aef6930a8e6f2cf82aa.jpg&#34; alt=&#34;sketchboard2&#34;  /&gt;
&lt;/p&gt;
&lt;h4 id=&#34;markdown马克飞象&#34;&gt;Markdown：马克飞象&lt;/h4&gt;
&lt;p&gt;有时候还是需要网页端使用markdown写写东西的，支持的功能最多的应该要数马克飞象了。如果印象笔记的markdown支持网页端就好了。&lt;/p&gt;
&lt;h4 id=&#34;数学绘图desmos&#34;&gt;数学绘图：Desmos&lt;/h4&gt;
&lt;p&gt;对于一些特定的函数，Desmos能够将其绘制在坐标轴上，使其更直观理解，对于平时推导一些公式的时候，真的十分方便。&lt;/p&gt;
&lt;h4 id=&#34;pdfsmallpdf&#34;&gt;PDF：Smallpdf&lt;/h4&gt;
&lt;p&gt;处理PDF的好工具，基本上和pdf相关的操作它都有了。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://image.wsine.top/98a225f66d536ef35491eeb3c6055d21.jpg&#34; alt=&#34;pdf&#34;  /&gt;
&lt;/p&gt;
&lt;h4 id=&#34;latexoverleaf&#34;&gt;Latex：Overleaf&lt;/h4&gt;
&lt;p&gt;每到顶会截止投稿的那天，基本上服务都会炸了，可想而知使用人数有多少。Latex是一个好东西，但不适合普通人吧。知者请试用。&lt;/p&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;我相信总会有人问，为什么没有Android和MacOS的软件推荐，笔者并非没有长时间使用过这两款，且也有了比较顺手的工具，只是最近身边的常用工具就这些，不方便截图就先不写了，以后有空再补充。&lt;/p&gt;
&lt;p&gt;如果你有更好的解决方案，欢迎前来探讨探讨吐槽吐槽~&lt;/p&gt;
&lt;p&gt;如果你有强烈的痛点暂时没找到解决方案，欢迎告诉我我来折腾折腾~&lt;/p&gt;
</description>
    </item>
    
    
    
  </channel>
</rss>
